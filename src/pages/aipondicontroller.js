const { promisify } = require("util");
const jwt = require("jsonwebtoken");
const User = require("./../Models/user");
const Kpi = require("./../Models/kpi");

const ppuclgdetails = require("./../Models/ppuclgdetails");
const ppuheaddetails = require("./../Models/ppuheaddetails");
const ppulegalrep = require("./../Models/ppulegalrep");
const pputrustdetails = require("./../Models/pputrustdetails");
const ppupermission = require("./../Models/ppupermission");
const ppumanagingbody = require("./../Models/ppumanagingbody");
const ppuwlfcomt = require("./../Models/ppuwlfcomt");
const pputrustfin = require("./../Models/pputrustfin");
const ppufdrdetails = require("./../Models/ppufdrdetails");
const ppuimmvprop = require("./../Models/ppuimmvprop");
const ppufinance = require("./../Models/ppufinance");
const ppuland = require("./../Models/ppuland");
const ppubuilding = require("./../Models/ppubuilding");
const ppuhostel = require("./../Models/ppuhostel");
const ppurooms = require("./../Models/ppurooms");
const ppuphyedu = require("./../Models/ppuphyedu");
const ppustaff = require("./../Models/ppustaff");
const ppucollege = require("./../Models/ppucollege");
const pputrust = require("./../Models/pputrust");
const ppuaddprog = require("./../Models/ppuaddprog");
const ppuvarintake = require("./../Models/ppuvarintake");
const ppuexistprog = require("./../Models/ppuexistprog");
const ppucourses = require("./../Models/ppucourses");
const ppucoursrep = require("./../Models/ppucoursrep");
const ppuprincipal = require("./../Models/ppuprincipal");
const ppufaculty = require("./../Models/ppufaculty");
const ppustafstudratio = require("./../Models/ppustafstudratio");
const ppulabequip = require("./../Models/ppulabequip");
const ppulabequipprocure = require("./../Models/ppulabequipprocure");
const ppulecturerooms = require("./../Models/ppulecturerooms");
const ppuavailclsroom = require("./../Models/ppuavailclsroom");
const ppunetwork = require("./../Models/ppunetwork");
const ppucompfaci = require("./../Models/ppucompfaci");
const ppucompsoftware = require("./../Models/ppucompsoftware");
const ppucompaddinfo = require("./../Models/ppucompaddinfo");
const ppucompaddsoft = require("./../Models/ppucompaddsoft");
const ppulibrary = require("./../Models/ppulibrary");
const ppulibstaff = require("./../Models/ppulibstaff");
const ppulibbooks = require("./../Models/ppulibbooks");
const ppulibindjrnl = require("./../Models/ppulibindjrnl");
const ppulibforgjrnl = require("./../Models/ppulibforgjrnl");
const ppulibautomation = require("./../Models/ppulibautomation");
const ppulibprocure = require("./../Models/ppulibprocure");
const ppulibexp = require("./../Models/ppulibexp");
const ppustudfaci = require("./../Models/ppustudfaci");
const ppuotherfaci = require("./../Models/ppuotherfaci");
const ppumedservice = require("./../Models/ppumedservice");
const ppuaudvidequip = require("./../Models/ppuaudvidequip");
const ppuclubs = require("./../Models/ppuclubs");
const pputechstaff = require("./../Models/pputechstaff");
const ppuminststaff = require("./../Models/ppuminststaff");
const ppuaddinfo = require("./../Models/ppuaddinfo");
const ppudeclaration = require("./../Models/ppudeclaration");
const ppucertificates = require("./../Models/ppucertificates");
const ppuaddinfoprog = require("./../Models/ppuaddinfoprog");
const ppuaddinfonoc = require("./../Models/ppuaddinfonoc");
const ppuaddinfopermission = require("./../Models/ppuaddinfopermission");
const ppuaddinfobos = require("./../Models/ppuaddinfobos");
const ppuaddinfosyllabi = require("./../Models/ppuaddinfosyllabi");
const ppuaddinfofac = require("./../Models/ppuaddinfofac");
const ppuaddinfostaffdetails = require("./../Models/ppuaddinfostaffdetails");
const ppuaddfacdetails = require("./../Models/ppuaddfacdetails");
const ppufacworkload = require("./../Models/ppufacworkload");

const hostel = require("./../Models/hostel");

const ainscom = require("./../Models/ainscom");
const afaccadre = require("./../Models/afaccadre");
const aequipments = require("./../Models/aequipments");
const awards = require("./../Models/awards");

const awardsnew = require("./../Models/awardsnew");

const anlibjournals = require("./../Models/anlibjournals");

const vacstudents = require("./../Models/vacstudents");

const ninvoicenew = require("./../Models/ninvoicenew");
const ninvoiceitems = require("./../Models/ninvoiceitems");

const ninvoicen = require("./../Models/ninvoicen");

const ninvoicefinal = require("./../Models/ninvoicefinal");

const ninvoicefnew = require("./../Models/ninvoicefnew");
const norgdetails = require("./../Models/norgdetails");

const nstatus = require("./../Models/nstatus");
const nprojects = require("./../Models/nprojects");
const nprojectsnew = require("./../Models/nprojectsnew");

const innovationnew = require("./../Models/innovationnew");
const booknew = require("./../Models/booknew");
const expenditurenew = require("./../Models/expenditurenew");
const qualitynew = require("./../Models/qualitynew");
const lquality = require("./../Models/lquality");
const uquality = require("./../Models/uquality");
const studschspnew = require("./../Models/studschspnew");
const ustudschsp = require("./../Models/ustudschsp");

const studmasternew = require("./../Models/studmasternew");
const studmasterall = require("./../Models/studmasterall");

const amprograms = require("./../Models/amprograms");
const amclassroom = require("./../Models/amclassroom");
const amequipments = require("./../Models/amequipments");
const amlibrary = require("./../Models/amlibrary");
const amlibdetails = require("./../Models/amlibdetails");
const amfaculties = require("./../Models/amfaculties");
const amadminstaff = require("./../Models/amadminstaff");
const aminfsuff = require("./../Models/aminfsuff");
const amimprovements = require("./../Models/amimprovements");
const amrecommendation = require("./../Models/amrecommendation");
const amchemicals = require("./../Models/amchemicals");
const amprogfaculties = require("./../Models/amprogfaculties");

const studmentor = require("./../Models/studmentor");
const lphdfac = require("./../Models/lphdfac");

const alumniusers = require("./../Models/alumniusers");
const alumniwork = require("./../Models/alumniwork");
const alumnihighered = require("./../Models/alumnihighered");
const alumnicontribute = require("./../Models/alumnicontribute");
const alumnijobs = require("./../Models/alumnijobs");
const alumnievents = require("./../Models/alumnievents");

const pfiles = require("./../Models/pfiles");
const pdeliverables = require("./../Models/pdeliverables");

const cnewfeedback = require("./../Models/cnewfeedback");
const sssstud = require("./../Models/sssstud");

const admusers = require("./../Models/admusers");
const admedu = require("./../Models/admedu");
const admwork = require("./../Models/admwork");
const admprograms = require("./../Models/admprograms");
const admintern = require("./../Models/admintern");
const admextra = require("./../Models/admextra");
const admlanguages = require("./../Models/admlanguages");
const admfacilities = require("./../Models/admfacilities");
const admmarks = require("./../Models/admmarks");

const assignment = require("./../Models/assignment");
const coursefiles = require("./../Models/coursefiles");

const affassign = require("./../Models/affassign");
const cocal = require("./../Models/cocal");

const amcpdetails3 = require("./../Models/amcpdetails3");
const amcpobservations = require("./../Models/amcpobservations");
const ammember1 = require("./../Models/ammember1");
const ammbr2comp = require("./../Models/ammbr2comp");
const ammbr2det = require("./../Models/ammbr2det");

const mkustud = require("./../Models/mkustud");
const mkumarks = require("./../Models/mkumarks");

const anmstudnew = require("./../Models/anmstudnew");
const amastudnew = require("./../Models/amastudnew");

const affcolprog = require("./../Models/affcolprog");
const affproglist = require("./../Models/affproglist");
const Institutions = require("./../Models/institutions");

const rmsucoldeta = require("./../Models/rmsucoldeta");
const rmsunirf = require("./../Models/rmsunirf");
const rsmuaddeta = require("./../Models/rsmuaddeta");
const rsmucoldetaex = require("./../Models/rsmucoldetaex");
const rsmuprincdeta = require("./../Models/rsmuprincdeta");
const rsmugovcouncil = require("./../Models/rsmugovcouncil");
const rsmuragcomt = require("./../Models/rsmuragcomt");
const rsmuragsquad = require("./../Models/rsmuragsquad");
const rsmubankacnts = require("./../Models/rsmubankacnts");
const rsmudeposit = require("./../Models/rsmudeposit");
const rsmuendowment = require("./../Models/rsmuendowment");
const rsmubuildeta = require("./../Models/rsmubuildeta");
const rsmufeduqualif = require("./../Models/rsmufeduqualif");
const rsmufacnew = require("./../Models/rsmufacnew");
const rsmuontstaff = require("./../Models/rsmuontstaff");
const rmsucourse = require("./../Models/rmsucourse");
const rsunontstaff = require("./../Models/rsunontstaff");

const rsmuaddetacng = require("./../Models/rsmuaddetacng");
const rmsutrustdatacng = require("./../Models/rmsutrustdatacng");
const rsmufacnewcng = require("./../Models/rsmufacnewcng");
const rsmuendowmentcng = require("./../Models/rsmuendowmentcng");
const rsmulanddetacng = require("./../Models/rsmulanddetacng");

const user = require("./../Models/user");

const rsmuadmup = require("./../Models/rsmuadmup");
const rsmucoldetaup = require("./../Models/rsmucoldetaup");
const rsmutrustup = require("./../Models/rsmutrustup");
const rsmuprinup = require("./../Models/rsmuprinup");
const rsmuendowup = require("./../Models/rsmuendowup");
const rsmuadcourup = require("./../Models/rsmuadcourup");
const rsmufacnewup = require("./../Models/rsmufacnewup");
const rsmufacqualifup = require("./../Models/rsmufacqualifup");
const rsmunontechup = require("./../Models/rsmunontechup");

const nlibtable1 = require("./../Models/nlibtable1");
const nlibtable2 = require("./../Models/nlibtable2");
const nofficefacility = require("./../Models/nofficefacility");

const msusancseatn = require("./../Models/msusancseatn");

const msuallfacnew = require("./../Models/msuallfacnew");

const awsconfig = require("./../Models/awsconfig");

const book = require("./../Models/book");

const feedback = require("./../Models/feedback");

const payimages = require("./../Models/payimages");
const alumnipay = require("./../Models/alumnipay");

const amfacalln = require("./../Models/amfacalln");

const evguests = require("./../Models/evguests");

const genderaudit = require("./../Models/genderaudit");

const salarypaid = require("./../Models/salarypaid");
const emptravel = require("./../Models/emptravel");

const projects = require("./../Models/projects");

const publications = require("./../Models/publications");
const seminar = require("./../Models/seminar");
const certificates = require("./../Models/certificates");
const employmentall = require("./../Models/employmentall");

const addoncstud = require("./../Models/addoncstud");
const addonc = require("./../Models/addonc");

const nallcourses = require("./../Models/nallcourses");

// oct 20 2023

const doc121ac = require("./../Models/doc121ac");
const doc121bos = require("./../Models/doc121bos");
const doc132att = require("./../Models/doc132att");
const doc132brochure = require("./../Models/doc132brochure");
const doc132cert = require("./../Models/doc132cert");
const doc133intern = require("./../Models/doc133intern");
const doc133bos = require("./../Models/doc133bos");
const doc141fsubmit = require("./../Models/doc141fsubmit");
const doc141sample = require("./../Models/doc141sample");
const doc141action = require("./../Models/doc141action");
const dod211intake = require("./../Models/dod211intake");
const doc211extract = require("./../Models/doc211extract");
const doc212final = require("./../Models/doc212final");
const doc212letter = require("./../Models/doc212letter");
const dod222stud = require("./../Models/dod222stud");
const doc222teachers = require("./../Models/doc222teachers");
const doc241sanction = require("./../Models/doc241sanction");
const doc242faclist = require("./../Models/doc242faclist");
const doc252list = require("./../Models/doc252list");
const doc253screenshot = require("./../Models/doc253screenshot");
const doc253report = require("./../Models/doc253report");
const doc261polist = require("./../Models/doc261polist");
const doc261colist = require("./../Models/doc261colist");
const doc262cert = require("./../Models/doc262cert");
const doc262annual = require("./../Models/doc262annual");
const doc311co = require("./../Models/doc311co");
const doc312sanction = require("./../Models/doc312sanction");
const doc312finance = require("./../Models/doc312finance");
const doc341syllabus = require("./../Models/doc341syllabus");
const doc341ethics = require("./../Models/doc341ethics");
const doc341ethicsmin = require("./../Models/doc341ethicsmin");
const doc341research = require("./../Models/doc341research");
const doc341researchmin = require("./../Models/doc341researchmin");
const doc341bills = require("./../Models/doc341bills");
const doc342phdaward = require("./../Models/doc342phdaward");
const doc342letter = require("./../Models/doc342letter");
const doc346agency = require("./../Models/doc346agency");
const doc346ec = require("./../Models/doc346ec");
const doc346lms = require("./../Models/doc346lms");
const doc351corporate = require("./../Models/doc351corporate");
const doc351consultancy = require("./../Models/doc351consultancy");
const doc351ca = require("./../Models/doc351ca");
const doc351audit = require("./../Models/doc351audit");
const doc362photos = require("./../Models/doc362photos");
const doc371msummary = require("./../Models/doc371msummary");
const doc432stock = require("./../Models/doc432stock");
const doc432bills = require("./../Models/doc432bills");
const doc433photos = require("./../Models/doc433photos");
const doc433stock = require("./../Models/doc433stock");
const doc433bills = require("./../Models/doc433bills");
const doc511students = require("./../Models/doc511students");
const doc511policy = require("./../Models/doc511policy");
const doc513skills = require("./../Models/doc513skills");
const doc513life = require("./../Models/doc513life");
const doc513lang = require("./../Models/doc513lang");
const doc513ict = require("./../Models/doc513ict");
const doc514awareness = require("./../Models/doc514awareness");
const doc514submission = require("./../Models/doc514submission");
const doc514implementation = require("./../Models/doc514implementation");
const doc514com = require("./../Models/doc514com");
const doc514annual = require("./../Models/doc514annual");
const doc523studlist = require("./../Models/doc523studlist");
const doc533fest = require("./../Models/doc533fest");
const doc533sports = require("./../Models/doc533sports");
const doc533cultural = require("./../Models/doc533cultural");
const doc533clubs = require("./../Models/doc533clubs");
const doc622screen = require("./../Models/doc622screen");
const doc622egrep = require("./../Models/doc622egrep");
const doc632policy = require("./../Models/doc632policy");
const doc632audit = require("./../Models/doc632audit");
const doc642audit = require("./../Models/doc642audit");
const doc652 = require("./../Models/doc652");
const doc652orientation = require("./../Models/doc652orientation");
const doc652workshop = require("./../Models/doc652workshop");
const doc652collab = require("./../Models/doc652collab");
const doc712permission = require("./../Models/doc712permission");
const doc712photos = require("./../Models/doc712photos");
const doc712bill = require("./../Models/doc712bill");
const doc714greeen = require("./../Models/doc714greeen");
const doc714photos = require("./../Models/doc714photos");
const doc714bills = require("./../Models/doc714bills");
const doc715policy = require("./../Models/doc715policy");
const doc715photos = require("./../Models/doc715photos");
const doc715reports = require("./../Models/doc715reports");
const doc716reports = require("./../Models/doc716reports");
const doc716greeen = require("./../Models/doc716greeen");
const doc7110report = require("./../Models/doc7110report");
const doc7110code = require("./../Models/doc7110code");

const aauc1 = require("./../Models/aauc1");
const aauc2 = require("./../Models/aauc2");
const aaucother = require("./../Models/aaucother");
const aaucfees = require("./../Models/aaucfees");

const aaucn1 = require("./../Models/aaucn1");
const aaucn2 = require("./../Models/aaucn2");
const aaucfees2 = require("./../Models/aaucfees2");
const aaucother2 = require("./../Models/aaucother2");

const austudu = require("./../Models/austudu");

const austudu1 = require("./../Models/austudu1");

const passpercent = require("./../Models/passpercent");
const nugrievance = require("./../Models/nugrievance");

const auatt = require("./../Models/auatt");
const auattsummary = require("./../Models/auattsummary");

const pstatusnew = require("./../Models/pstatusnew");
const seedadd = require("./../Models/seedadd");
const phddeclare = require("./../Models/phddeclare");
const pfacmaster = require("./../Models/pfacmaster");

const vacnew1 = require("./../Models/vacnew1");
const vacstudents1 = require("./../Models/vacstudents1");

const vacnew2 = require("./../Models/vacnew2");

//const Assignment=require('./../Models/assignment');

const assignsubmit = require("./../Models/assignsubmit");

const aupaynew = require("./../Models/aupaynew");

const acalendernew = require("./../Models/acalendernew");
const deptasks = require("./../Models/deptasks");

const cas11 = require("./../Models/cas11");
const cas12 = require("./../Models/cas12");
const cas22 = require("./../Models/cas22");
const cas23 = require("./../Models/cas23");
const cas241 = require("./../Models/cas241");
const cas242 = require("./../Models/cas242");
const cas243 = require("./../Models/cas243");
const cas251 = require("./../Models/cas251");
const cas252 = require("./../Models/cas252");
const cas253 = require("./../Models/cas253");
const cas26 = require("./../Models/cas26");

const ncas11 = require("./../Models/ncas11");
const ncas12 = require("./../Models/ncas12");
const ncas22 = require("./../Models/ncas22");
const ncas23 = require("./../Models/ncas23");
const ncas241 = require("./../Models/ncas241");
const ncas242 = require("./../Models/ncas242");
const ncas243 = require("./../Models/ncas243");
const ncas251 = require("./../Models/ncas251");
const ncas252 = require("./../Models/ncas252");
const ncas253 = require("./../Models/ncas253");
const ncas26 = require("./../Models/ncas26");

const admapplnew = require("./../Models/admapplnew");

const madmapplys = require("./../Models/madmapplys");
const madmapplya = require("./../Models/madmapplya");

//const sssstud=require('./../Models/sssstud');

exports.getppuclgdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuclgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclgdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuclgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclgdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuclgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclgdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuclgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclgdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuclgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuclgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuclgdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clgnameadrs: req.query.clgnameadrs,
      phone: req.query.phone,
      email: req.query.email,
      yoe: req.query.yoe,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuclgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuclgdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clgnameadrs: req.query.clgnameadrs,
      phone: req.query.phone,
      email: req.query.email,
      yoe: req.query.yoe,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuclgdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuclgdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuclgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuclgdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuheaddetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuheaddetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuheaddetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuheaddetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuheaddetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuheaddetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuheaddetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuheaddetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuheaddetailslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuheaddetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuheaddetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuheaddetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      headname: req.query.headname,
      designation: req.query.designation,
      emailphone: req.query.emailphone,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuheaddetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuheaddetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      headname: req.query.headname,
      designation: req.query.designation,
      emailphone: req.query.emailphone,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuheaddetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuheaddetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuheaddetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuheaddetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulegalrepbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulegalrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulegalrepbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulegalrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulegalrepbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulegalrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulegalrepdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulegalrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulegalreplinks = async (req, res) => {
  try {
    const lcat1233 = await ppulegalrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulegalrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulegalrep.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      legalrep: req.query.legalrep,
      address: req.query.address,
      telephone: req.query.telephone,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulegalrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulegalrep.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      legalrep: req.query.legalrep,
      address: req.query.address,
      telephone: req.query.telephone,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulegalrepcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulegalrep.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulegalrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulegalrep.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpputrustdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await pputrustdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await pputrustdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await pputrustdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await pputrustdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await pputrustdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpputrustdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pputrustdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustnameadrs: req.query.trustnameadrs,
      regno: req.query.regno,
      dor: req.query.dor,
      familytrust: req.query.familytrust,
      chairman: req.query.chairman,
      secretary: req.query.secretary,
      emailphone: req.query.emailphone,
      resadrsphone: req.query.resadrsphone,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pputrustdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustnameadrs: req.query.trustnameadrs,
      regno: req.query.regno,
      dor: req.query.dor,
      familytrust: req.query.familytrust,
      chairman: req.query.chairman,
      secretary: req.query.secretary,
      emailphone: req.query.emailphone,
      resadrsphone: req.query.resadrsphone,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pputrustdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepputrustdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pputrustdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppupermissionbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppupermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppupermissionbydep = async (req, res) => {
  try {
    const lcat1233 = await ppupermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppupermissionbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppupermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppupermissiondocs = async (req, res) => {
  try {
    const lcat1233 = await ppupermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppupermissionlinks = async (req, res) => {
  try {
    const lcat1233 = await ppupermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppupermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppupermission.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      letterno: req.query.letterno,
      doi: req.query.doi,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppupermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppupermission.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      letterno: req.query.letterno,
      doi: req.query.doi,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppupermissioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppupermission.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppupermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppupermission.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppumanagingbodybyfac = async (req, res) => {
  try {
    const lcat1233 = await ppumanagingbody.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumanagingbodybydep = async (req, res) => {
  try {
    const lcat1233 = await ppumanagingbody.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumanagingbodybyprog = async (req, res) => {
  try {
    const lcat1233 = await ppumanagingbody.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumanagingbodydocs = async (req, res) => {
  try {
    const lcat1233 = await ppumanagingbody.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumanagingbodylinks = async (req, res) => {
  try {
    const lcat1233 = await ppumanagingbody.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppumanagingbodybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppumanagingbody.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      bodyname: req.query.bodyname,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppumanagingbodybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppumanagingbody.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      bodyname: req.query.bodyname,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppumanagingbodycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppumanagingbody.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppumanagingbodybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppumanagingbody.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuwlfcomtbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuwlfcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuwlfcomtbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuwlfcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuwlfcomtbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuwlfcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuwlfcomtdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuwlfcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuwlfcomtlinks = async (req, res) => {
  try {
    const lcat1233 = await ppuwlfcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuwlfcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuwlfcomt.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      isfunct: req.query.isfunct,
      normsavl: req.query.normsavl,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuwlfcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuwlfcomt.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      isfunct: req.query.isfunct,
      normsavl: req.query.normsavl,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuwlfcomtcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuwlfcomt.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuwlfcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuwlfcomt.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpputrustfinbyfac = async (req, res) => {
  try {
    const lcat1233 = await pputrustfin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustfinbydep = async (req, res) => {
  try {
    const lcat1233 = await pputrustfin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustfinbyprog = async (req, res) => {
  try {
    const lcat1233 = await pputrustfin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustfindocs = async (req, res) => {
  try {
    const lcat1233 = await pputrustfin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustfinlinks = async (req, res) => {
  try {
    const lcat1233 = await pputrustfin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpputrustfinbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pputrustfin.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      banker: req.query.banker,
      branch: req.query.branch,
      accno: req.query.accno,
      balonye: req.query.balonye,
      balondate: req.query.balondate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustfinbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pputrustfin.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      banker: req.query.banker,
      branch: req.query.branch,
      accno: req.query.accno,
      balonye: req.query.balonye,
      balondate: req.query.balondate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustfincomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pputrustfin.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepputrustfinbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pputrustfin.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppufdrdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppufdrdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufdrdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppufdrdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufdrdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppufdrdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufdrdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppufdrdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufdrdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await ppufdrdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppufdrdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppufdrdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      branch: req.query.branch,
      amount: req.query.amount,
      dom: req.query.dom,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufdrdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppufdrdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      branch: req.query.branch,
      amount: req.query.amount,
      dom: req.query.dom,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufdrdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppufdrdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppufdrdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppufdrdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuimmvpropbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuimmvprop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuimmvpropbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuimmvprop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuimmvpropbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuimmvprop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuimmvpropdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuimmvprop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuimmvproplinks = async (req, res) => {
  try {
    const lcat1233 = await ppuimmvprop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuimmvpropbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuimmvprop.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      survno: req.query.survno,
      landext: req.query.landext,
      location: req.query.location,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuimmvpropbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuimmvprop.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      survno: req.query.survno,
      landext: req.query.landext,
      location: req.query.location,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuimmvpropcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuimmvprop.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuimmvpropbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuimmvprop.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppufinancebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppufinance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufinancebydep = async (req, res) => {
  try {
    const lcat1233 = await ppufinance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufinancebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppufinance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufinancedocs = async (req, res) => {
  try {
    const lcat1233 = await ppufinance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufinancelinks = async (req, res) => {
  try {
    const lcat1233 = await ppufinance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppufinancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppufinance.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      endowmntcrtd: req.query.endowmntcrtd,
      pan: req.query.pan,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufinancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppufinance.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      endowmntcrtd: req.query.endowmntcrtd,
      pan: req.query.pan,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufinancecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppufinance.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppufinancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppufinance.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulandbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuland.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulandbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuland.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulandbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuland.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulanddocs = async (req, res) => {
  try {
    const lcat1233 = await ppuland.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulandlinks = async (req, res) => {
  try {
    const lcat1233 = await ppuland.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulandbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuland.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      docno: req.query.docno,
      dor: req.query.dor,
      surveyno: req.query.surveyno,
      extent: req.query.extent,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulandbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuland.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      docno: req.query.docno,
      dor: req.query.dor,
      surveyno: req.query.surveyno,
      extent: req.query.extent,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulandcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuland.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulandbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuland.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppubuildingbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppubuilding.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppubuildingbydep = async (req, res) => {
  try {
    const lcat1233 = await ppubuilding.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppubuildingbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppubuilding.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppubuildingdocs = async (req, res) => {
  try {
    const lcat1233 = await ppubuilding.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppubuildinglinks = async (req, res) => {
  try {
    const lcat1233 = await ppubuilding.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppubuildingbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppubuilding.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      description: req.query.description,
      size: req.query.size,
      quantity: req.query.quantity,
      rooftype: req.query.rooftype,
      amendetail: req.query.amendetail,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppubuildingbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppubuilding.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      description: req.query.description,
      size: req.query.size,
      quantity: req.query.quantity,
      rooftype: req.query.rooftype,
      amendetail: req.query.amendetail,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppubuildingcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppubuilding.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppubuildingbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppubuilding.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuhostelbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuhostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuhostelbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuhostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuhostelbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuhostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuhosteldocs = async (req, res) => {
  try {
    const lcat1233 = await ppuhostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuhostellinks = async (req, res) => {
  try {
    const lcat1233 = await ppuhostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuhostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuhostel.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      noofblocks: req.query.noofblocks,
      location: req.query.location,
      noofstaff: req.query.noofstaff,
      noofcomroom: req.query.noofcomroom,
      noofreadroom: req.query.noofreadroom,
      noofrecroom: req.query.noofrecroom,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuhostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuhostel.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      noofblocks: req.query.noofblocks,
      location: req.query.location,
      noofstaff: req.query.noofstaff,
      noofcomroom: req.query.noofcomroom,
      noofreadroom: req.query.noofreadroom,
      noofrecroom: req.query.noofrecroom,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuhostelcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuhostel.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuhostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuhostel.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuroomsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppurooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuroomsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppurooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuroomsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppurooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuroomsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppurooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuroomslinks = async (req, res) => {
  try {
    const lcat1233 = await ppurooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppurooms.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      area: req.query.area,
      noofrooms: req.query.noofrooms,
      noofstudacmd: req.query.noofstudacmd,
      totalarea: req.query.totalarea,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppurooms.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      area: req.query.area,
      noofrooms: req.query.noofrooms,
      noofstudacmd: req.query.noofstudacmd,
      totalarea: req.query.totalarea,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuroomscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppurooms.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppurooms.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuphyedubyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuphyedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuphyedubydep = async (req, res) => {
  try {
    const lcat1233 = await ppuphyedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuphyedubyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuphyedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuphyedudocs = async (req, res) => {
  try {
    const lcat1233 = await ppuphyedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuphyedulinks = async (req, res) => {
  try {
    const lcat1233 = await ppuphyedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuphyedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuphyedu.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      dirname: req.query.dirname,
      qualiexp: req.query.qualiexp,
      noofattndr: req.query.noofattndr,
      attndrname: req.query.attndrname,
      totalarea: req.query.totalarea,
      outgames: req.query.outgames,
      ingames: req.query.ingames,
      gym: req.query.gym,
      funds: req.query.funds,
      itemsncost: req.query.itemsncost,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuphyedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuphyedu.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      dirname: req.query.dirname,
      qualiexp: req.query.qualiexp,
      noofattndr: req.query.noofattndr,
      attndrname: req.query.attndrname,
      totalarea: req.query.totalarea,
      outgames: req.query.outgames,
      ingames: req.query.ingames,
      gym: req.query.gym,
      funds: req.query.funds,
      itemsncost: req.query.itemsncost,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuphyeducomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuphyedu.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuphyedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuphyedu.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppustaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppustaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustaffbydep = async (req, res) => {
  try {
    const lcat1233 = await ppustaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppustaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustaffdocs = async (req, res) => {
  try {
    const lcat1233 = await ppustaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustafflinks = async (req, res) => {
  try {
    const lcat1233 = await ppustaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppustaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppustaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      designation: req.query.designation,
      noofstaff: req.query.noofstaff,
      area: req.query.area,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppustaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      designation: req.query.designation,
      noofstaff: req.query.noofstaff,
      area: req.query.area,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppustaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppustaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppustaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucollegebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucollege.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucollegebydep = async (req, res) => {
  try {
    const lcat1233 = await ppucollege.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucollegebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucollege.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucollegedocs = async (req, res) => {
  try {
    const lcat1233 = await ppucollege.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucollegelinks = async (req, res) => {
  try {
    const lcat1233 = await ppucollege.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucollegebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucollege.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clgname: req.query.clgname,
      clgadrs: req.query.clgadrs,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucollegebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucollege.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clgname: req.query.clgname,
      clgadrs: req.query.clgadrs,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucollegecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucollege.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucollegebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucollege.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpputrustbyfac = async (req, res) => {
  try {
    const lcat1233 = await pputrust.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustbydep = async (req, res) => {
  try {
    const lcat1233 = await pputrust.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustbyprog = async (req, res) => {
  try {
    const lcat1233 = await pputrust.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustdocs = async (req, res) => {
  try {
    const lcat1233 = await pputrust.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputrustlinks = async (req, res) => {
  try {
    const lcat1233 = await pputrust.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpputrustbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pputrust.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustname: req.query.trustname,
      trustadrs: req.query.trustadrs,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pputrust.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustname: req.query.trustname,
      trustadrs: req.query.trustadrs,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputrustcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pputrust.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepputrustbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pputrust.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddprogbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddprogbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddprogbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddprogdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddproglinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddprog.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      sancstrngth: req.query.sancstrngth,
      recgnodate: req.query.recgnodate,
      remarks: req.query.remarks,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddprog.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      sancstrngth: req.query.sancstrngth,
      recgnodate: req.query.recgnodate,
      remarks: req.query.remarks,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddprogcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddprog.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddprog.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuvarintakebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuvarintake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuvarintakebydep = async (req, res) => {
  try {
    const lcat1233 = await ppuvarintake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuvarintakebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuvarintake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuvarintakedocs = async (req, res) => {
  try {
    const lcat1233 = await ppuvarintake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuvarintakelinks = async (req, res) => {
  try {
    const lcat1233 = await ppuvarintake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuvarintakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuvarintake.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      prevsancstrngth: req.query.prevsancstrngth,
      revsancstrngth: req.query.revsancstrngth,
      noc: req.query.noc,
      recgnodate: req.query.recgnodate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuvarintakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuvarintake.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      prevsancstrngth: req.query.prevsancstrngth,
      revsancstrngth: req.query.revsancstrngth,
      noc: req.query.noc,
      recgnodate: req.query.recgnodate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuvarintakecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuvarintake.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuvarintakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuvarintake.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuexistprogbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuexistprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuexistprogbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuexistprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuexistprogbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuexistprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuexistprogdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuexistprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuexistproglinks = async (req, res) => {
  try {
    const lcat1233 = await ppuexistprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuexistprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuexistprog.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      progname: req.query.progname,
      prevsancstrngth: req.query.prevsancstrngth,
      admtdstud: req.query.admtdstud,
      minstaprvnodate: req.query.minstaprvnodate,
      univafflnodate: req.query.univafflnodate,
      yob: req.query.yob,
      yoi: req.query.yoi,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuexistprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuexistprog.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      progname: req.query.progname,
      prevsancstrngth: req.query.prevsancstrngth,
      admtdstud: req.query.admtdstud,
      minstaprvnodate: req.query.minstaprvnodate,
      univafflnodate: req.query.univafflnodate,
      yob: req.query.yob,
      yoi: req.query.yoi,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuexistprogcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuexistprog.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuexistprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuexistprog.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucoursesbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursesbydep = async (req, res) => {
  try {
    const lcat1233 = await ppucourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursesbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursesdocs = async (req, res) => {
  try {
    const lcat1233 = await ppucourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucourseslinks = async (req, res) => {
  try {
    const lcat1233 = await ppucourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucourses.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      sancstrngth: req.query.sancstrngth,
      studonroll: req.query.studonroll,
      startdate: req.query.startdate,
      affil: req.query.affil,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucourses.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      progname: req.query.progname,
      sancstrngth: req.query.sancstrngth,
      studonroll: req.query.studonroll,
      startdate: req.query.startdate,
      affil: req.query.affil,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucoursescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucourses.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucourses.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucoursrepbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucoursrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursrepbydep = async (req, res) => {
  try {
    const lcat1233 = await ppucoursrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursrepbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucoursrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursrepdocs = async (req, res) => {
  try {
    const lcat1233 = await ppucoursrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucoursreplinks = async (req, res) => {
  try {
    const lcat1233 = await ppucoursrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucoursrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucoursrep.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifbreak: req.query.ifbreak,
      brkdetails: req.query.brkdetails,
      instful: req.query.instful,
      ifcomplrep: req.query.ifcomplrep,
      complrepdetails: req.query.complrepdetails,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucoursrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucoursrep.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifbreak: req.query.ifbreak,
      brkdetails: req.query.brkdetails,
      instful: req.query.instful,
      ifcomplrep: req.query.ifcomplrep,
      complrepdetails: req.query.complrepdetails,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucoursrepcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucoursrep.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucoursrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucoursrep.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuprincipalbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuprincipal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuprincipalbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuprincipal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuprincipalbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuprincipal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuprincipaldocs = async (req, res) => {
  try {
    const lcat1233 = await ppuprincipal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuprincipallinks = async (req, res) => {
  try {
    const lcat1233 = await ppuprincipal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuprincipalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuprincipal.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      yop: req.query.yop,
      marksobt: req.query.marksobt,
      univname: req.query.univname,
      spclz: req.query.spclz,
      dob: req.query.dob,
      age: req.query.age,
      doj: req.query.doj,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      totalexp: req.query.totalexp,
      totalpay: req.query.totalpay,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuprincipalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuprincipal.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      yop: req.query.yop,
      marksobt: req.query.marksobt,
      univname: req.query.univname,
      spclz: req.query.spclz,
      dob: req.query.dob,
      age: req.query.age,
      doj: req.query.doj,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      totalexp: req.query.totalexp,
      totalpay: req.query.totalpay,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuprincipalcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuprincipal.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuprincipalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuprincipal.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppufacultybyfac = async (req, res) => {
  try {
    const lcat1233 = await ppufaculty.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacultybydep = async (req, res) => {
  try {
    const lcat1233 = await ppufaculty.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacultybyprog = async (req, res) => {
  try {
    const lcat1233 = await ppufaculty.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacultydocs = async (req, res) => {
  try {
    const lcat1233 = await ppufaculty.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacultylinks = async (req, res) => {
  try {
    const lcat1233 = await ppufaculty.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppufacultybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppufaculty.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      faculty: req.query.faculty,
      designation: req.query.designation,
      qualification: req.query.qualification,
      marksobt: req.query.marksobt,
      degree: req.query.degree,
      spclz: req.query.spclz,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      basicpay: req.query.basicpay,
      emoluments: req.query.emoluments,
      univaprvl: req.query.univaprvl,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufacultybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppufaculty.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      faculty: req.query.faculty,
      designation: req.query.designation,
      qualification: req.query.qualification,
      marksobt: req.query.marksobt,
      degree: req.query.degree,
      spclz: req.query.spclz,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      basicpay: req.query.basicpay,
      emoluments: req.query.emoluments,
      univaprvl: req.query.univaprvl,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufacultycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppufaculty.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppufacultybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppufaculty.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppustafstudratiobyfac = async (req, res) => {
  try {
    const lcat1233 = await ppustafstudratio.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustafstudratiobydep = async (req, res) => {
  try {
    const lcat1233 = await ppustafstudratio.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustafstudratiobyprog = async (req, res) => {
  try {
    const lcat1233 = await ppustafstudratio.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustafstudratiodocs = async (req, res) => {
  try {
    const lcat1233 = await ppustafstudratio.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustafstudratiolinks = async (req, res) => {
  try {
    const lcat1233 = await ppustafstudratio.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppustafstudratiobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppustafstudratio.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      sancstrength: req.query.sancstrength,
      totalstaff: req.query.totalstaff,
      ratio: req.query.ratio,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustafstudratiobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppustafstudratio.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      sancstrength: req.query.sancstrength,
      totalstaff: req.query.totalstaff,
      ratio: req.query.ratio,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustafstudratiocomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppustafstudratio.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppustafstudratiobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppustafstudratio.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulabequipbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulabequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulabequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulabequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulabequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequiplinks = async (req, res) => {
  try {
    const lcat1233 = await ppulabequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulabequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulabequip.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      labname: req.query.labname,
      equipname: req.query.equipname,
      quantity: req.query.quantity,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulabequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulabequip.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      labname: req.query.labname,
      equipname: req.query.equipname,
      quantity: req.query.quantity,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulabequipcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulabequip.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulabequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulabequip.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulabequipprocurebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulabequipprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipprocurebydep = async (req, res) => {
  try {
    const lcat1233 = await ppulabequipprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipprocurebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulabequipprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipprocuredocs = async (req, res) => {
  try {
    const lcat1233 = await ppulabequipprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulabequipprocurelinks = async (req, res) => {
  try {
    const lcat1233 = await ppulabequipprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulabequipprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulabequipprocure.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      labname: req.query.labname,
      equipname: req.query.equipname,
      quantity: req.query.quantity,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulabequipprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulabequipprocure.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      labname: req.query.labname,
      equipname: req.query.equipname,
      quantity: req.query.quantity,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulabequipprocurecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulabequipprocure.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulabequipprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulabequipprocure.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulectureroomsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulecturerooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulectureroomsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulecturerooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulectureroomsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulecturerooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulectureroomsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulecturerooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulectureroomslinks = async (req, res) => {
  try {
    const lcat1233 = await ppulecturerooms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulectureroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulecturerooms.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      noofclsroom: req.query.noofclsroom,
      nooflabroom: req.query.nooflabroom,
      floorspace: req.query.floorspace,
      reqfurniture: req.query.reqfurniture,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulectureroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulecturerooms.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      noofclsroom: req.query.noofclsroom,
      nooflabroom: req.query.nooflabroom,
      floorspace: req.query.floorspace,
      reqfurniture: req.query.reqfurniture,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulectureroomscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulecturerooms.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulectureroomsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulecturerooms.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuavailclsroombyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuavailclsroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuavailclsroombydep = async (req, res) => {
  try {
    const lcat1233 = await ppuavailclsroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuavailclsroombyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuavailclsroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuavailclsroomdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuavailclsroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuavailclsroomlinks = async (req, res) => {
  try {
    const lcat1233 = await ppuavailclsroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuavailclsroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuavailclsroom.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifroomavl: req.query.ifroomavl,
      planroom: req.query.planroom,
      floorspcefurn: req.query.floorspcefurn,
      funds: req.query.funds,
      reason: req.query.reason,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuavailclsroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuavailclsroom.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifroomavl: req.query.ifroomavl,
      planroom: req.query.planroom,
      floorspcefurn: req.query.floorspcefurn,
      funds: req.query.funds,
      reason: req.query.reason,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuavailclsroomcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuavailclsroom.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuavailclsroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuavailclsroom.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppunetworkbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppunetwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppunetworkbydep = async (req, res) => {
  try {
    const lcat1233 = await ppunetwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppunetworkbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppunetwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppunetworkdocs = async (req, res) => {
  try {
    const lcat1233 = await ppunetwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppunetworklinks = async (req, res) => {
  try {
    const lcat1233 = await ppunetwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppunetworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppunetwork.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      bandwidth: req.query.bandwidth,
      noofterm: req.query.noofterm,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppunetworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppunetwork.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      bandwidth: req.query.bandwidth,
      noofterm: req.query.noofterm,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppunetworkcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppunetwork.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppunetworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppunetwork.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucompfacibyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucompfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompfacibydep = async (req, res) => {
  try {
    const lcat1233 = await ppucompfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompfacibyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucompfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompfacidocs = async (req, res) => {
  try {
    const lcat1233 = await ppucompfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompfacilinks = async (req, res) => {
  try {
    const lcat1233 = await ppucompfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucompfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucompfaci.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      sancstrngth: req.query.sancstrngth,
      noofterminals: req.query.noofterminals,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucompfaci.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      program: req.query.program,
      sancstrngth: req.query.sancstrngth,
      noofterminals: req.query.noofterminals,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompfacicomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucompfaci.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucompfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucompfaci.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucompsoftwarebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucompsoftware.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompsoftwarebydep = async (req, res) => {
  try {
    const lcat1233 = await ppucompsoftware.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompsoftwarebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucompsoftware.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompsoftwaredocs = async (req, res) => {
  try {
    const lcat1233 = await ppucompsoftware.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompsoftwarelinks = async (req, res) => {
  try {
    const lcat1233 = await ppucompsoftware.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucompsoftwarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucompsoftware.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      typeoflicense: req.query.typeoflicense,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompsoftwarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucompsoftware.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      typeoflicense: req.query.typeoflicense,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompsoftwarecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucompsoftware.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucompsoftwarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucompsoftware.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucompaddinfobyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddinfobydep = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddinfobyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddinfodocs = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddinfolinks = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucompaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucompaddinfo.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifupdates: req.query.ifupdates,
      ifaddcomp: req.query.ifaddcomp,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucompaddinfo.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifupdates: req.query.ifupdates,
      ifaddcomp: req.query.ifaddcomp,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompaddinfocomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucompaddinfo.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucompaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucompaddinfo.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucompaddsoftbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddsoft.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddsoftbydep = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddsoft.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddsoftbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddsoft.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddsoftdocs = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddsoft.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucompaddsoftlinks = async (req, res) => {
  try {
    const lcat1233 = await ppucompaddsoft.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucompaddsoftbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucompaddsoft.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      typeoflicense: req.query.typeoflicense,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompaddsoftbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucompaddsoft.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      typeoflicense: req.query.typeoflicense,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucompaddsoftcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucompaddsoft.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucompaddsoftbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucompaddsoft.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibrarybyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibrarybydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibrarybyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibrarydocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibrarylinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibrary.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      totalarea: req.query.totalarea,
      librarian: req.query.librarian,
      qualiexp: req.query.qualiexp,
      spclfaci: req.query.spclfaci,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibrary.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      totalarea: req.query.totalarea,
      librarian: req.query.librarian,
      qualiexp: req.query.qualiexp,
      spclfaci: req.query.spclfaci,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibrarycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibrary.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibrary.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibstaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibstaffbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibstaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibstaffdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibstafflinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibstaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibstaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibstaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibstaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibstaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibbooksbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibbooks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibbooksbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibbooks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibbooksbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibbooks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibbooksdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibbooks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibbookslinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibbooks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibbooksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibbooks.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      noofbooks: req.query.noofbooks,
      noofrefbooks: req.query.noofrefbooks,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibbooksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibbooks.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      noofbooks: req.query.noofbooks,
      noofrefbooks: req.query.noofrefbooks,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibbookscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibbooks.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibbooksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibbooks.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibindjrnlbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibindjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibindjrnlbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibindjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibindjrnlbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibindjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibindjrnldocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibindjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibindjrnllinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibindjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibindjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibindjrnl.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      title: req.query.title,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibindjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibindjrnl.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      title: req.query.title,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibindjrnlcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibindjrnl.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibindjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibindjrnl.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibforgjrnlbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibforgjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibforgjrnlbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibforgjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibforgjrnlbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibforgjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibforgjrnldocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibforgjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibforgjrnllinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibforgjrnl.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibforgjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibforgjrnl.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      title: req.query.title,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibforgjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibforgjrnl.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      coursename: req.query.coursename,
      title: req.query.title,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibforgjrnlcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibforgjrnl.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibforgjrnlbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibforgjrnl.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibautomationbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibautomation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibautomationbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibautomation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibautomationbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibautomation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibautomationdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibautomation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibautomationlinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibautomation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibautomationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibautomation.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      isautomated: req.query.isautomated,
      system: req.query.system,
      catlgsystem: req.query.catlgsystem,
      facility: req.query.facility,
      libtime: req.query.libtime,
      holiday: req.query.holiday,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibautomationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibautomation.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      isautomated: req.query.isautomated,
      system: req.query.system,
      catlgsystem: req.query.catlgsystem,
      facility: req.query.facility,
      libtime: req.query.libtime,
      holiday: req.query.holiday,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibautomationcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibautomation.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibautomationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibautomation.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibprocurebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibprocurebydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibprocurebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibprocuredocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibprocurelinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibprocure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibprocure.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifprocured: req.query.ifprocured,
      dop: req.query.dop,
      ordercopy: req.query.ordercopy,
      noofcopy: req.query.noofcopy,
      noofaddbook: req.query.noofaddbook,
      noofaddjournal: req.query.noofaddjournal,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibprocure.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ifprocured: req.query.ifprocured,
      dop: req.query.dop,
      ordercopy: req.query.ordercopy,
      noofcopy: req.query.noofcopy,
      noofaddbook: req.query.noofaddbook,
      noofaddjournal: req.query.noofaddjournal,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibprocurecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibprocure.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibprocurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibprocure.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppulibexpbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppulibexp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibexpbydep = async (req, res) => {
  try {
    const lcat1233 = await ppulibexp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibexpbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppulibexp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibexpdocs = async (req, res) => {
  try {
    const lcat1233 = await ppulibexp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppulibexplinks = async (req, res) => {
  try {
    const lcat1233 = await ppulibexp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppulibexpbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppulibexp.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      propexp: req.query.propexp,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibexpbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppulibexp.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      propexp: req.query.propexp,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppulibexpcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppulibexp.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppulibexpbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppulibexp.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppustudfacibyfac = async (req, res) => {
  try {
    const lcat1233 = await ppustudfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustudfacibydep = async (req, res) => {
  try {
    const lcat1233 = await ppustudfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustudfacibyprog = async (req, res) => {
  try {
    const lcat1233 = await ppustudfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustudfacidocs = async (req, res) => {
  try {
    const lcat1233 = await ppustudfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppustudfacilinks = async (req, res) => {
  try {
    const lcat1233 = await ppustudfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppustudfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppustudfaci.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifavlboys: req.query.ifavlboys,
      ifavlgirls: req.query.ifavlgirls,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustudfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppustudfaci.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifavlboys: req.query.ifavlboys,
      ifavlgirls: req.query.ifavlgirls,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppustudfacicomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppustudfaci.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppustudfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppustudfaci.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuotherfacibyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuotherfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuotherfacibydep = async (req, res) => {
  try {
    const lcat1233 = await ppuotherfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuotherfacibyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuotherfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuotherfacidocs = async (req, res) => {
  try {
    const lcat1233 = await ppuotherfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuotherfacilinks = async (req, res) => {
  try {
    const lcat1233 = await ppuotherfaci.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuotherfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuotherfaci.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuotherfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuotherfaci.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuotherfacicomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuotherfaci.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuotherfacibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuotherfaci.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppumedservicebyfac = async (req, res) => {
  try {
    const lcat1233 = await ppumedservice.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumedservicebydep = async (req, res) => {
  try {
    const lcat1233 = await ppumedservice.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumedservicebyprog = async (req, res) => {
  try {
    const lcat1233 = await ppumedservice.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumedservicedocs = async (req, res) => {
  try {
    const lcat1233 = await ppumedservice.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppumedservicelinks = async (req, res) => {
  try {
    const lcat1233 = await ppumedservice.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppumedservicebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppumedservice.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      doctorname: req.query.doctorname,
      qualification: req.query.qualification,
      spclz: req.query.spclz,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppumedservicebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppumedservice.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      doctorname: req.query.doctorname,
      qualification: req.query.qualification,
      spclz: req.query.spclz,
      address: req.query.address,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppumedservicecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppumedservice.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppumedservicebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppumedservice.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaudvidequipbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaudvidequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaudvidequipbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaudvidequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaudvidequipbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaudvidequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaudvidequipdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaudvidequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaudvidequiplinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaudvidequip.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaudvidequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaudvidequip.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      equipname: req.query.equipname,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaudvidequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaudvidequip.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      equipname: req.query.equipname,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaudvidequipcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaudvidequip.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaudvidequipbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaudvidequip.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuclubsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuclubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclubsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuclubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclubsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuclubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclubsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuclubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuclubslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuclubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuclubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuclubs.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clubname: req.query.clubname,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuclubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuclubs.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clubname: req.query.clubname,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuclubscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuclubs.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuclubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuclubs.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpputechstaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await pputechstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputechstaffbydep = async (req, res) => {
  try {
    const lcat1233 = await pputechstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputechstaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await pputechstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputechstaffdocs = async (req, res) => {
  try {
    const lcat1233 = await pputechstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pputechstafflinks = async (req, res) => {
  try {
    const lcat1233 = await pputechstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpputechstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pputechstaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      eduqualif: req.query.eduqualif,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      emoluments: req.query.emoluments,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputechstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pputechstaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      eduqualif: req.query.eduqualif,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      emoluments: req.query.emoluments,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepputechstaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pputechstaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepputechstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pputechstaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuminststaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuminststaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuminststaffbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuminststaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuminststaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuminststaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuminststaffdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuminststaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuminststafflinks = async (req, res) => {
  try {
    const lcat1233 = await ppuminststaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuminststaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuminststaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      eduqualif: req.query.eduqualif,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      emoluments: req.query.emoluments,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuminststaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuminststaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      staffname: req.query.staffname,
      designation: req.query.designation,
      eduqualif: req.query.eduqualif,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      emoluments: req.query.emoluments,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuminststaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuminststaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuminststaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuminststaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfobyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfobydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfobyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfodocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfolinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfo.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfo.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfo.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfocomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfo.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfo.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppudeclarationbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppudeclaration.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppudeclarationbydep = async (req, res) => {
  try {
    const lcat1233 = await ppudeclaration.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppudeclarationbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppudeclaration.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppudeclarationdocs = async (req, res) => {
  try {
    const lcat1233 = await ppudeclaration.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppudeclarationlinks = async (req, res) => {
  try {
    const lcat1233 = await ppudeclaration.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppudeclarationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppudeclaration.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      declaration: req.query.declaration,
      place: req.query.place,
      dod: req.query.dod,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppudeclarationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppudeclaration.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      declaration: req.query.declaration,
      place: req.query.place,
      dod: req.query.dod,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppudeclarationcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppudeclaration.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppudeclarationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppudeclaration.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppucertificatesbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppucertificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucertificatesbydep = async (req, res) => {
  try {
    const lcat1233 = await ppucertificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucertificatesbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppucertificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucertificatesdocs = async (req, res) => {
  try {
    const lcat1233 = await ppucertificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppucertificateslinks = async (req, res) => {
  try {
    const lcat1233 = await ppucertificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppucertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppucertificates.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifavl: req.query.ifavl,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppucertificates.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifavl: req.query.ifavl,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppucertificatescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppucertificates.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppucertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppucertificates.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfoprogbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfoprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfoprogbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfoprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfoprogbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfoprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfoprogdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfoprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfoproglinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfoprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfoprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfoprog.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfoprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfoprog.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfoprogcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfoprog.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfoprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfoprog.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfonocbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfonoc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfonocbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfonoc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfonocbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfonoc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfonocdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfonoc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfonoclinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfonoc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfonocbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfonoc.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      daterefno: req.query.daterefno,
      doa: req.query.doa,
      expdate: req.query.expdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfonocbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfonoc.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      daterefno: req.query.daterefno,
      doa: req.query.doa,
      expdate: req.query.expdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfonoccomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfonoc.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfonocbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfonoc.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfopermissionbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfopermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfopermissionbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfopermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfopermissionbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfopermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfopermissiondocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfopermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfopermissionlinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfopermission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfopermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfopermission.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      daterefno: req.query.daterefno,
      doa: req.query.doa,
      expdate: req.query.expdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfopermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfopermission.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      daterefno: req.query.daterefno,
      doa: req.query.doa,
      expdate: req.query.expdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfopermissioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfopermission.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfopermissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfopermission.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfobosbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfobos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfobosbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfobos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfobosbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfobos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfobosdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfobos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfoboslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfobos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfobosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfobos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfobosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfobos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfoboscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfobos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfobosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfobos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfosyllabibyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfosyllabi.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfosyllabibydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfosyllabi.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfosyllabibyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfosyllabi.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfosyllabidocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfosyllabi.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfosyllabilinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfosyllabi.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfosyllabibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfosyllabi.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfosyllabibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfosyllabi.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfosyllabicomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfosyllabi.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfosyllabibyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfosyllabi.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfofacbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfofac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfofacbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfofac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfofacbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfofac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfofacdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfofac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfofaclinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfofac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfofacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfofac.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfofacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfofac.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      details: req.query.details,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfofaccomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfofac.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfofacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfofac.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddinfostaffdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfostaffdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfostaffdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfostaffdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfostaffdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfostaffdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfostaffdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfostaffdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddinfostaffdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddinfostaffdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddinfostaffdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddinfostaffdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      designation: req.query.designation,
      quantity: req.query.quantity,
      qualiexp: req.query.qualiexp,
      toa: req.query.toa,
      payscale: req.query.payscale,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfostaffdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddinfostaffdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      designation: req.query.designation,
      quantity: req.query.quantity,
      qualiexp: req.query.qualiexp,
      toa: req.query.toa,
      payscale: req.query.payscale,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddinfostaffdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddinfostaffdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddinfostaffdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddinfostaffdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppuaddfacdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppuaddfacdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddfacdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await ppuaddfacdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddfacdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppuaddfacdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddfacdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await ppuaddfacdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppuaddfacdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await ppuaddfacdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppuaddfacdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppuaddfacdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      faculty: req.query.faculty,
      designation: req.query.designation,
      qualification: req.query.qualification,
      marksobt: req.query.marksobt,
      degree: req.query.degree,
      spclz: req.query.spclz,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      basicpay: req.query.basicpay,
      emoluments: req.query.emoluments,
      univaprvl: req.query.univaprvl,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddfacdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppuaddfacdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      faculty: req.query.faculty,
      designation: req.query.designation,
      qualification: req.query.qualification,
      marksobt: req.query.marksobt,
      degree: req.query.degree,
      spclz: req.query.spclz,
      yearsofexpprof: req.query.yearsofexpprof,
      yearsofexpind: req.query.yearsofexpind,
      dob: req.query.dob,
      doj: req.query.doj,
      payscale: req.query.payscale,
      basicpay: req.query.basicpay,
      emoluments: req.query.emoluments,
      univaprvl: req.query.univaprvl,
      ifqualpernorms: req.query.ifqualpernorms,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppuaddfacdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppuaddfacdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppuaddfacdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppuaddfacdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getppufacworkloadbyfac = async (req, res) => {
  try {
    const lcat1233 = await ppufacworkload.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacworkloadbydep = async (req, res) => {
  try {
    const lcat1233 = await ppufacworkload.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacworkloadbyprog = async (req, res) => {
  try {
    const lcat1233 = await ppufacworkload.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacworkloaddocs = async (req, res) => {
  try {
    const lcat1233 = await ppufacworkload.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ppufacworkloadlinks = async (req, res) => {
  try {
    const lcat1233 = await ppufacworkload.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createppufacworkloadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ppufacworkload.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      workload: req.query.workload,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufacworkloadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ppufacworkload.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      workload: req.query.workload,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateppufacworkloadcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ppufacworkload.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteppufacworkloadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ppufacworkload.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 14 2023

exports.gethostelbyfac = async (req, res) => {
  try {
    const lcat1233 = await hostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.hostelbydep = async (req, res) => {
  try {
    const lcat1233 = await hostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.hostelbyprog = async (req, res) => {
  try {
    const lcat1233 = await hostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.hosteldocs = async (req, res) => {
  try {
    const lcat1233 = await hostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.hostellinks = async (req, res) => {
  try {
    const lcat1233 = await hostel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createhostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await hostel.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      building: req.query.building,
      room: req.query.room,
      type: req.query.type,
      noofbeds: req.query.noofbeds,
      fees: req.query.fees,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatehostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await hostel.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      building: req.query.building,
      room: req.query.room,
      type: req.query.type,
      noofbeds: req.query.noofbeds,
      fees: req.query.fees,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatehostelcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await hostel.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletehostelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await hostel.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 16 2023

exports.getainscombyfac = async (req, res) => {
  try {
    const lcat1233 = await ainscom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ainscombydep = async (req, res) => {
  try {
    const lcat1233 = await ainscom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ainscombyprog = async (req, res) => {
  try {
    const lcat1233 = await ainscom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ainscomdocs = async (req, res) => {
  try {
    const lcat1233 = await ainscom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ainscomlinks = async (req, res) => {
  try {
    const lcat1233 = await ainscom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createainscombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ainscom.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      designation: req.query.designation,
      name: req.query.name,
      profposition: req.query.profposition,
      department: req.query.department,
      institution: req.query.institution,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateainscombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ainscom.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      designation: req.query.designation,
      name: req.query.name,
      profposition: req.query.profposition,
      department: req.query.department,
      institution: req.query.institution,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateainscomcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ainscom.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteainscombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ainscom.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getafaccadrebyfac = async (req, res) => {
  try {
    const lcat1233 = await afaccadre.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.afaccadrebydep = async (req, res) => {
  try {
    const lcat1233 = await afaccadre.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.afaccadrebyprog = async (req, res) => {
  try {
    const lcat1233 = await afaccadre.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.afaccadredocs = async (req, res) => {
  try {
    const lcat1233 = await afaccadre.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.afaccadrelinks = async (req, res) => {
  try {
    const lcat1233 = await afaccadre.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createafaccadrebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await afaccadre.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      level: req.query.level,
      cadre: req.query.cadre,
      required: req.query.required,
      available: req.query.available,
      deficiency: req.query.deficiency,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateafaccadrebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await afaccadre.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      level: req.query.level,
      cadre: req.query.cadre,
      required: req.query.required,
      available: req.query.available,
      deficiency: req.query.deficiency,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateafaccadrecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await afaccadre.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteafaccadrebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await afaccadre.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaequipmentsbyfac = async (req, res) => {
  try {
    const lcat1233 = await aequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aequipmentsbydep = async (req, res) => {
  try {
    const lcat1233 = await aequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aequipmentsbyprog = async (req, res) => {
  try {
    const lcat1233 = await aequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aequipmentsdocs = async (req, res) => {
  try {
    const lcat1233 = await aequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aequipmentslinks = async (req, res) => {
  try {
    const lcat1233 = await aequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aequipments.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      equipment: req.query.equipment,
      type: req.query.type,
      required: req.query.required,
      available: req.query.available,
      deficiency: req.query.deficiency,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aequipments.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      equipment: req.query.equipment,
      type: req.query.type,
      required: req.query.required,
      available: req.query.available,
      deficiency: req.query.deficiency,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaequipmentscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aequipments.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aequipments.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getawardsbyfac = async (req, res) => {
  try {
    const lcat1233 = await awards.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsbydep = async (req, res) => {
  try {
    const lcat1233 = await awards.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsbyprog = async (req, res) => {
  try {
    const lcat1233 = await awards.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsdocs = async (req, res) => {
  try {
    const lcat1233 = await awards.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardslinks = async (req, res) => {
  try {
    const lcat1233 = await awards.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createawardsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await awards.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      awarddate: req.query.awarddate,
      awardname: req.query.awardname,
      engagementtype: req.query.engagementtype,
      level: req.query.level,
      eventname: req.query.eventname,
      studentname: req.query.studentname,
      regno: req.query.regno,
      activitytype: req.query.activitytype,
      position: req.query.position,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawardsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await awards.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      awarddate: req.query.awarddate,
      awardname: req.query.awardname,
      engagementtype: req.query.engagementtype,
      level: req.query.level,
      eventname: req.query.eventname,
      studentname: req.query.studentname,
      regno: req.query.regno,
      activitytype: req.query.activitytype,
      position: req.query.position,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawardscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await awards.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteawardsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await awards.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getawardsnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await awardsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsnewbydep = async (req, res) => {
  try {
    const lcat1233 = await awardsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await awardsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsnewdocs = async (req, res) => {
  try {
    const lcat1233 = await awardsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awardsnewlinks = async (req, res) => {
  try {
    const lcat1233 = await awardsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createawardsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await awardsnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      awarddate: req.query.awarddate,
      awardname: req.query.awardname,
      type: req.query.type,
      level: req.query.level,
      eventname: req.query.eventname,
      studentname: req.query.studentname,
      regno: req.query.regno,
      activitytype: req.query.activitytype,
      position: req.query.position,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawardsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await awardsnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      awarddate: req.query.awarddate,
      awardname: req.query.awardname,
      type: req.query.type,
      level: req.query.level,
      eventname: req.query.eventname,
      studentname: req.query.studentname,
      regno: req.query.regno,
      activitytype: req.query.activitytype,
      position: req.query.position,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawardsnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await awardsnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteawardsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await awardsnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 16 2023 1

exports.getanlibjournalsbyfac = async (req, res) => {
  try {
    const lcat1233 = await anlibjournals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anlibjournalsbydep = async (req, res) => {
  try {
    const lcat1233 = await anlibjournals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anlibjournalsbyprog = async (req, res) => {
  try {
    const lcat1233 = await anlibjournals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anlibjournalsdocs = async (req, res) => {
  try {
    const lcat1233 = await anlibjournals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anlibjournalslinks = async (req, res) => {
  try {
    const lcat1233 = await anlibjournals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createanlibjournalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await anlibjournals.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      natreq: req.query.natreq,
      natavail: req.query.natavail,
      interreq: req.query.interreq,
      interavail: req.query.interavail,
      natdef: req.query.natdef,
      interdef: req.query.interdef,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateanlibjournalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await anlibjournals.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      natreq: req.query.natreq,
      natavail: req.query.natavail,
      interreq: req.query.interreq,
      interavail: req.query.interavail,
      natdef: req.query.natdef,
      interdef: req.query.interdef,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateanlibjournalscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await anlibjournals.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteanlibjournalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await anlibjournals.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 18 2023

exports.getvacstudentsbyfac = async (req, res) => {
  try {
    const lcat1233 = await vacstudents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudentsbydep = async (req, res) => {
  try {
    const lcat1233 = await vacstudents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudentsbyprog = async (req, res) => {
  try {
    const lcat1233 = await vacstudents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudentsdocs = async (req, res) => {
  try {
    const lcat1233 = await vacstudents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudentslinks = async (req, res) => {
  try {
    const lcat1233 = await vacstudents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createvacstudentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await vacstudents.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      admissionyear: req.query.admissionyear,
      ifcompleted: req.query.ifcompleted,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacstudentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await vacstudents.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      admissionyear: req.query.admissionyear,
      ifcompleted: req.query.ifcompleted,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacstudentscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await vacstudents.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletevacstudentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await vacstudents.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 21 2023

exports.getninvoicenewbyfac = async (req, res) => {
  try {
    const lcat1233 = await ninvoicenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenewbydep = async (req, res) => {
  try {
    const lcat1233 = await ninvoicenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenewbyprog = async (req, res) => {
  try {
    const lcat1233 = await ninvoicenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenewdocs = async (req, res) => {
  try {
    const lcat1233 = await ninvoicenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenewlinks = async (req, res) => {
  try {
    const lcat1233 = await ninvoicenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createninvoicenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ninvoicenew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      gst: req.query.gst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ninvoicenew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      gst: req.query.gst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicenewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ninvoicenew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteninvoicenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ninvoicenew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getninvoiceitemsbyfac = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getninvoiceitemsbyinv = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          invoiceid: req.query.invoiceid,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoiceitemsbydep = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoiceitemsbyprog = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoiceitemsdocs = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoiceitemslinks = async (req, res) => {
  try {
    const lcat1233 = await ninvoiceitems.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createninvoiceitemsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ninvoiceitems.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      invoiceid: req.query.invoiceid,
      item: req.query.item,
      hsnsac: req.query.hsnsac,
      sale: req.query.sale,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      samestate: req.query.samestate,
      total: req.query.total,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoiceitemsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ninvoiceitems.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      invoiceid: req.query.invoiceid,
      item: req.query.item,
      hsnsac: req.query.hsnsac,
      sale: req.query.sale,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      samestate: req.query.samestate,
      total: req.query.total,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoiceitemscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ninvoiceitems.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteninvoiceitemsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ninvoiceitems.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 21 2023 1

exports.getninvoicenbyfac = async (req, res) => {
  try {
    const lcat1233 = await ninvoicen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenbydep = async (req, res) => {
  try {
    const lcat1233 = await ninvoicen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenbyprog = async (req, res) => {
  try {
    const lcat1233 = await ninvoicen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicendocs = async (req, res) => {
  try {
    const lcat1233 = await ninvoicen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicenlinks = async (req, res) => {
  try {
    const lcat1233 = await ninvoicen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createninvoicenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ninvoicen.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ninvoicen.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicencomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ninvoicen.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteninvoicenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ninvoicen.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 21 2023 2

exports.getninvoicefinalbyfac = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefinal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getninvoicefinalbyid = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await ninvoicefinal
      .find()
      .where("_id")
      .equals(req.query.id);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefinalbydep = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefinal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefinalbyprog = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefinal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefinaldocs = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefinal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefinallinks = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefinal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createninvoicefinalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ninvoicefinal.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      received: req.query.received,
      tds: req.query.tds,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicefinalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ninvoicefinal.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      received: req.query.received,
      tds: req.query.tds,
      project: req.query.project,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicefinalcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ninvoicefinal.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteninvoicefinalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ninvoicefinal.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

//  mar 23 2023

exports.getninvoicefnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getninvoicefnewbyid = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await ninvoicefnew
      .find()
      .where("_id")
      .equals(req.query.id);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefnewbydep = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefnewdocs = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ninvoicefnewlinks = async (req, res) => {
  try {
    const lcat1233 = await ninvoicefnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createninvoicefnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ninvoicefnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      orgid: req.query.orgid,
      orgname: req.query.orgname,
      invno: req.query.invno,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      acholder: req.query.acholder,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      received: req.query.received,
      tds: req.query.tds,
      project: req.query.project,
      invstatus: req.query.invstatus,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicefnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ninvoicefnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      orgid: req.query.orgid,
      orgname: req.query.orgname,
      invno: req.query.invno,
      clientid: req.query.clientid,
      client: req.query.client,
      amount: req.query.amount,
      cgst: req.query.cgst,
      sgst: req.query.sgst,
      igst: req.query.igst,
      total: req.query.total,
      duedate: req.query.duedate,
      bank: req.query.bank,
      acholder: req.query.acholder,
      account: req.query.account,
      ifsc: req.query.ifsc,
      paybank: req.query.paybank,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      received: req.query.received,
      tds: req.query.tds,
      project: req.query.project,
      invstatus: req.query.invstatus,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateninvoicefnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ninvoicefnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteninvoicefnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ninvoicefnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnorgdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await norgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnorgdetailsbyid = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await norgdetails.find().where("_id").equals(req.query.id);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.norgdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await norgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.norgdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await norgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.norgdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await norgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.norgdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await norgdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnorgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await norgdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      organization: req.query.organization,
      address: req.query.address,
      state: req.query.state,
      country: req.query.country,
      pin: req.query.pin,
      pan: req.query.pan,
      gst: req.query.gst,
      tan: req.query.tan,
      gstapplicable: req.query.gstapplicable,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenorgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await norgdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      organization: req.query.organization,
      address: req.query.address,
      state: req.query.state,
      country: req.query.country,
      pin: req.query.pin,
      pan: req.query.pan,
      gst: req.query.gst,
      tan: req.query.tan,
      gstapplicable: req.query.gstapplicable,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenorgdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await norgdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenorgdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await norgdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 26 2023

exports.getnstatusbyfac = async (req, res) => {
  try {
    const lcat1233 = await nstatus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nstatusbydep = async (req, res) => {
  try {
    const lcat1233 = await nstatus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nstatusbyprog = async (req, res) => {
  try {
    const lcat1233 = await nstatus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nstatusdocs = async (req, res) => {
  try {
    const lcat1233 = await nstatus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nstatuslinks = async (req, res) => {
  try {
    const lcat1233 = await nstatus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnstatusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nstatus.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      criteria: req.query.criteria,
      metric: req.query.metric,
      department: req.query.department,
      lastchecked: req.query.lastchecked,
      status: req.query.status,
      issues: req.query.issues,
      nextct: req.query.nextct,
      nextins: req.query.nextins,
      targetct: req.query.targetct,
      targetins: req.query.targetins,
      plandate: req.query.plandate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenstatusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nstatus.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      criteria: req.query.criteria,
      metric: req.query.metric,
      department: req.query.department,
      lastchecked: req.query.lastchecked,
      status: req.query.status,
      issues: req.query.issues,
      nextct: req.query.nextct,
      nextins: req.query.nextins,
      targetct: req.query.targetct,
      targetins: req.query.targetins,
      plandate: req.query.plandate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenstatuscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nstatus.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenstatusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nstatus.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnprojectsbyfac = async (req, res) => {
  try {
    const lcat1233 = await nprojects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsbydep = async (req, res) => {
  try {
    const lcat1233 = await nprojects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsbyprog = async (req, res) => {
  try {
    const lcat1233 = await nprojects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsdocs = async (req, res) => {
  try {
    const lcat1233 = await nprojects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectslinks = async (req, res) => {
  try {
    const lcat1233 = await nprojects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nprojects.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      project: req.query.project,
      task: req.query.task,
      subtask: req.query.subtask,
      duedate: req.query.duedate,
      assignedto: req.query.assignedto,
      status: req.query.status,
      issues: req.query.issues,
      dependencyid: req.query.dependencyid,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nprojects.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      project: req.query.project,
      task: req.query.task,
      subtask: req.query.subtask,
      duedate: req.query.duedate,
      assignedto: req.query.assignedto,
      status: req.query.status,
      issues: req.query.issues,
      dependencyid: req.query.dependencyid,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenprojectscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nprojects.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nprojects.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 26 2023 1

exports.getnprojectsnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await nprojectsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsnewbydep = async (req, res) => {
  try {
    const lcat1233 = await nprojectsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await nprojectsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsnewdocs = async (req, res) => {
  try {
    const lcat1233 = await nprojectsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nprojectsnewlinks = async (req, res) => {
  try {
    const lcat1233 = await nprojectsnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnprojectsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nprojectsnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      project: req.query.project,
      task: req.query.task,
      subtask: req.query.subtask,
      startdate: req.query.startdate,
      duedate: req.query.duedate,
      assignedto: req.query.assignedto,
      status: req.query.status,
      percent: req.query.percent,
      issues: req.query.issues,
      dependencyid: req.query.dependencyid,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenprojectsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nprojectsnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      project: req.query.project,
      task: req.query.task,
      subtask: req.query.subtask,
      startdate: req.query.startdate,
      duedate: req.query.duedate,
      assignedto: req.query.assignedto,
      status: req.query.status,
      percent: req.query.percent,
      issues: req.query.issues,
      dependencyid: req.query.dependencyid,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenprojectsnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nprojectsnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenprojectsnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nprojectsnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 29 2023

exports.getinnovationnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await innovationnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.innovationnewbydep = async (req, res) => {
  try {
    const lcat1233 = await innovationnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.innovationnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await innovationnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.innovationnewdocs = async (req, res) => {
  try {
    const lcat1233 = await innovationnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.innovationnewlinks = async (req, res) => {
  try {
    const lcat1233 = await innovationnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createinnovationnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await innovationnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      year: req.query.year,
      title: req.query.title,
      awardee: req.query.awardee,
      agency: req.query.agency,
      category: req.query.category,
      designation: req.query.designation,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateinnovationnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await innovationnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      year: req.query.year,
      title: req.query.title,
      awardee: req.query.awardee,
      agency: req.query.agency,
      category: req.query.category,
      designation: req.query.designation,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateinnovationnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await innovationnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteinnovationnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await innovationnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getbooknewbyfac = async (req, res) => {
  try {
    const lcat1233 = await booknew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.booknewbydep = async (req, res) => {
  try {
    const lcat1233 = await booknew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.booknewbyprog = async (req, res) => {
  try {
    const lcat1233 = await booknew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.booknewdocs = async (req, res) => {
  try {
    const lcat1233 = await booknew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.booknewlinks = async (req, res) => {
  try {
    const lcat1233 = await booknew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createbooknewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await booknew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      booktitle: req.query.booktitle,
      papertitle: req.query.papertitle,
      proceeding: req.query.proceeding,
      yop: req.query.yop,
      issn: req.query.issn,
      publisher: req.query.publisher,
      affiliated: req.query.affiliated,
      conferencename: req.query.conferencename,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatebooknewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await booknew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      booktitle: req.query.booktitle,
      papertitle: req.query.papertitle,
      proceeding: req.query.proceeding,
      yop: req.query.yop,
      issn: req.query.issn,
      publisher: req.query.publisher,
      affiliated: req.query.affiliated,
      conferencename: req.query.conferencename,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatebooknewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await booknew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletebooknewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await booknew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getexpenditurenewbyfac = async (req, res) => {
  try {
    const lcat1233 = await expenditurenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.expenditurenewbydep = async (req, res) => {
  try {
    const lcat1233 = await expenditurenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.expenditurenewbyprog = async (req, res) => {
  try {
    const lcat1233 = await expenditurenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.expenditurenewdocs = async (req, res) => {
  try {
    const lcat1233 = await expenditurenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.expenditurenewlinks = async (req, res) => {
  try {
    const lcat1233 = await expenditurenew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createexpenditurenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await expenditurenew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      totalexp: req.query.totalexp,
      budget: req.query.budget,
      infraexp: req.query.infraexp,
      booksexp: req.query.booksexp,
      physicalexp: req.query.physicalexp,
      academicexp: req.query.academicexp,
      otherexp: req.query.otherexp,
      acchead: req.query.acchead,
      expitem: req.query.expitem,
      salary: req.query.salary,
      allother: req.query.allother,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateexpenditurenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await expenditurenew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      totalexp: req.query.totalexp,
      budget: req.query.budget,
      infraexp: req.query.infraexp,
      booksexp: req.query.booksexp,
      physicalexp: req.query.physicalexp,
      academicexp: req.query.academicexp,
      otherexp: req.query.otherexp,
      acchead: req.query.acchead,
      expitem: req.query.expitem,
      salary: req.query.salary,
      allother: req.query.allother,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateexpenditurenewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await expenditurenew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteexpenditurenewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await expenditurenew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getqualitynewbyfac = async (req, res) => {
  try {
    const lcat1233 = await qualitynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.qualitynewbydep = async (req, res) => {
  try {
    const lcat1233 = await qualitynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.qualitynewbyprog = async (req, res) => {
  try {
    const lcat1233 = await qualitynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.qualitynewdocs = async (req, res) => {
  try {
    const lcat1233 = await qualitynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.qualitynewlinks = async (req, res) => {
  try {
    const lcat1233 = await qualitynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createqualitynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await qualitynew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      action: req.query.action,
      instname: req.query.instname,
      activity: req.query.activity,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      partstatus: req.query.partstatus,
      other: req.query.other,
      meetings: req.query.meetings,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatequalitynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await qualitynew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      action: req.query.action,
      instname: req.query.instname,
      activity: req.query.activity,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      partstatus: req.query.partstatus,
      other: req.query.other,
      meetings: req.query.meetings,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatequalitynewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await qualitynew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletequalitynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await qualitynew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getlqualitybyfac = async (req, res) => {
  try {
    const lcat1233 = await lquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lqualitybydep = async (req, res) => {
  try {
    const lcat1233 = await lquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lqualitybyprog = async (req, res) => {
  try {
    const lcat1233 = await lquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lqualitydocs = async (req, res) => {
  try {
    const lcat1233 = await lquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lqualitylinks = async (req, res) => {
  try {
    const lcat1233 = await lquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createlqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await lquality.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      auditaction: req.query.auditaction,
      conference: req.query.conference,
      instnameact: req.query.instnameact,
      orientact: req.query.orientact,
      partstatus: req.query.partstatus,
      other: req.query.other,
      disableaudit: req.query.disableaudit,
      scholarname: req.query.scholarname,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatelqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await lquality.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      auditaction: req.query.auditaction,
      conference: req.query.conference,
      instnameact: req.query.instnameact,
      orientact: req.query.orientact,
      partstatus: req.query.partstatus,
      other: req.query.other,
      disableaudit: req.query.disableaudit,
      scholarname: req.query.scholarname,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatelqualitycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await lquality.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletelqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await lquality.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getuqualitybyfac = async (req, res) => {
  try {
    const lcat1233 = await uquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.uqualitybydep = async (req, res) => {
  try {
    const lcat1233 = await uquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.uqualitybyprog = async (req, res) => {
  try {
    const lcat1233 = await uquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.uqualitydocs = async (req, res) => {
  try {
    const lcat1233 = await uquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.uqualitylinks = async (req, res) => {
  try {
    const lcat1233 = await uquality.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createuqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await uquality.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifadopt: req.query.ifadopt,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateuqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await uquality.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      ifadopt: req.query.ifadopt,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateuqualitycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await uquality.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteuqualitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await uquality.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getstudschspnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await studschspnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studschspnewbydep = async (req, res) => {
  try {
    const lcat1233 = await studschspnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studschspnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await studschspnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studschspnewdocs = async (req, res) => {
  try {
    const lcat1233 = await studschspnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studschspnewlinks = async (req, res) => {
  try {
    const lcat1233 = await studschspnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createstudschspnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await studschspnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      scheme: req.query.scheme,
      noofgovstud: req.query.noofgovstud,
      amountgov: req.query.amountgov,
      noofinststud: req.query.noofinststud,
      amountinst: req.query.amountinst,
      noofngostud: req.query.noofngostud,
      amountngo: req.query.amountngo,
      ngoagencyname: req.query.ngoagencyname,
      noofinsdustrystud: req.query.noofinsdustrystud,
      amountindustry: req.query.amountindustry,
      industry: req.query.industry,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudschspnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await studschspnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      scheme: req.query.scheme,
      noofgovstud: req.query.noofgovstud,
      amountgov: req.query.amountgov,
      noofinststud: req.query.noofinststud,
      amountinst: req.query.amountinst,
      noofngostud: req.query.noofngostud,
      amountngo: req.query.amountngo,
      ngoagencyname: req.query.ngoagencyname,
      noofinsdustrystud: req.query.noofinsdustrystud,
      amountindustry: req.query.amountindustry,
      industry: req.query.industry,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudschspnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await studschspnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletestudschspnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await studschspnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getustudschspbyfac = async (req, res) => {
  try {
    const lcat1233 = await ustudschsp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ustudschspbydep = async (req, res) => {
  try {
    const lcat1233 = await ustudschsp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ustudschspbyprog = async (req, res) => {
  try {
    const lcat1233 = await ustudschsp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ustudschspdocs = async (req, res) => {
  try {
    const lcat1233 = await ustudschsp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ustudschsplinks = async (req, res) => {
  try {
    const lcat1233 = await ustudschsp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createustudschspbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ustudschsp.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      title: req.query.title,
      sname: req.query.sname,
      regno: req.query.regno,
      amount: req.query.amount,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateustudschspbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ustudschsp.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      title: req.query.title,
      sname: req.query.sname,
      regno: req.query.regno,
      amount: req.query.amount,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateustudschspcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ustudschsp.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteustudschspbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ustudschsp.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasteranamoly = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await studmasterall.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          // _id:['$regno','$name'],
          // _id:['$regno','$name'],
          _id: {
            student: "$student",
            regno: "$regno",
            admissionyear: "$admissionyear",
          },
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasteranamoly1 = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await studmasterall.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          // _id:['$regno','$name'],
          // _id:['$regno','$name'],
          _id: {
            student: "$student",
            regno: "$regno",
          },
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 20 2023 1

exports.getstudmasterallbyfac = async (req, res) => {
  try {
    const lcat1233 = await studmasterall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasterallbydep = async (req, res) => {
  try {
    const lcat1233 = await studmasterall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasterallbyprog = async (req, res) => {
  try {
    const lcat1233 = await studmasterall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasteralldocs = async (req, res) => {
  try {
    const lcat1233 = await studmasterall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmasteralllinks = async (req, res) => {
  try {
    const lcat1233 = await studmasterall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createstudmasterallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await studmasterall.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      programname: req.query.programname,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      admissionyear: req.query.admissionyear,
      isfinalyear: req.query.isfinalyear,
      repeat: req.query.repeat,
      gender: req.query.gender,
      category1: req.query.category1,
      category2: req.query.category2,
      pwd: req.query.pwd,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudmasterallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await studmasterall.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      programname: req.query.programname,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      admissionyear: req.query.admissionyear,
      isfinalyear: req.query.isfinalyear,
      repeat: req.query.repeat,
      gender: req.query.gender,
      category1: req.query.category1,
      category2: req.query.category2,
      pwd: req.query.pwd,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudmasterallcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await studmasterall.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletestudmasterallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await studmasterall.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// mar 31 2023

exports.getamprogramsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogramsbydep = async (req, res) => {
  try {
    const lcat1233 = await amprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogramsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogramsdocs = async (req, res) => {
  try {
    const lcat1233 = await amprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogramslinks = async (req, res) => {
  try {
    const lcat1233 = await amprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amprograms.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      nature: req.query.nature,
      subject: req.query.subject,
      fees: req.query.fees,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amprograms.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      nature: req.query.nature,
      subject: req.query.subject,
      fees: req.query.fees,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamprogramscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amprograms.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amprograms.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamclassroombyfac = async (req, res) => {
  try {
    const lcat1233 = await amclassroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amclassroombydep = async (req, res) => {
  try {
    const lcat1233 = await amclassroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amclassroombyprog = async (req, res) => {
  try {
    const lcat1233 = await amclassroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amclassroomdocs = async (req, res) => {
  try {
    const lcat1233 = await amclassroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amclassroomlinks = async (req, res) => {
  try {
    const lcat1233 = await amclassroom.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamclassroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amclassroom.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      code: req.query.code,
      carpetarea: req.query.carpetarea,
      allotment: req.query.allotment,
      rooftype: req.query.rooftype,
      furniture: req.query.furniture,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamclassroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amclassroom.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      code: req.query.code,
      carpetarea: req.query.carpetarea,
      allotment: req.query.allotment,
      rooftype: req.query.rooftype,
      furniture: req.query.furniture,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamclassroomcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amclassroom.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamclassroombyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amclassroom.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamequipmentsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amequipmentsbydep = async (req, res) => {
  try {
    const lcat1233 = await amequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amequipmentsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amequipmentsdocs = async (req, res) => {
  try {
    const lcat1233 = await amequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amequipmentslinks = async (req, res) => {
  try {
    const lcat1233 = await amequipments.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amequipments.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      equipment: req.query.equipment,
      category: req.query.category,
      make: req.query.make,
      modelno: req.query.modelno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amequipments.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      equipment: req.query.equipment,
      category: req.query.category,
      make: req.query.make,
      modelno: req.query.modelno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamequipmentscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amequipments.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamequipmentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amequipments.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamlibrarybyfac = async (req, res) => {
  try {
    const lcat1233 = await amlibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibrarybydep = async (req, res) => {
  try {
    const lcat1233 = await amlibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibrarybyprog = async (req, res) => {
  try {
    const lcat1233 = await amlibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibrarydocs = async (req, res) => {
  try {
    const lcat1233 = await amlibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibrarylinks = async (req, res) => {
  try {
    const lcat1233 = await amlibrary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamlibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amlibrary.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      engbooks: req.query.engbooks,
      tamilbooks: req.query.tamilbooks,
      otherbooks: req.query.otherbooks,
      engjournal: req.query.engjournal,
      tamiljournal: req.query.tamiljournal,
      otherjournal: req.query.otherjournal,
      engnews: req.query.engnews,
      tamilnews: req.query.tamilnews,
      othernews: req.query.othernews,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamlibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amlibrary.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      engbooks: req.query.engbooks,
      tamilbooks: req.query.tamilbooks,
      otherbooks: req.query.otherbooks,
      engjournal: req.query.engjournal,
      tamiljournal: req.query.tamiljournal,
      otherjournal: req.query.otherjournal,
      engnews: req.query.engnews,
      tamilnews: req.query.tamilnews,
      othernews: req.query.othernews,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamlibrarycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amlibrary.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamlibrarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amlibrary.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamlibdetailsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amlibdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibdetailsbydep = async (req, res) => {
  try {
    const lcat1233 = await amlibdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibdetailsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amlibdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibdetailsdocs = async (req, res) => {
  try {
    const lcat1233 = await amlibdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amlibdetailslinks = async (req, res) => {
  try {
    const lcat1233 = await amlibdetails.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamlibdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amlibdetails.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      author: req.query.author,
      publisher: req.query.publisher,
      type: req.query.type,
      language: req.query.language,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamlibdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amlibdetails.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      author: req.query.author,
      publisher: req.query.publisher,
      type: req.query.type,
      language: req.query.language,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamlibdetailscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amlibdetails.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamlibdetailsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amlibdetails.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamfacultiesbyfac = async (req, res) => {
  try {
    const lcat1233 = await amfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacultiesbydep = async (req, res) => {
  try {
    const lcat1233 = await amfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacultiesbyprog = async (req, res) => {
  try {
    const lcat1233 = await amfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacultiesdocs = async (req, res) => {
  try {
    const lcat1233 = await amfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacultieslinks = async (req, res) => {
  try {
    const lcat1233 = await amfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amfaculties.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      phdmonyr: req.query.phdmonyr,
      isqualified: req.query.isqualified,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amfaculties.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      phdmonyr: req.query.phdmonyr,
      isqualified: req.query.isqualified,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamfacultiescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amfaculties.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amfaculties.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamadminstaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await amadminstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amadminstaffbydep = async (req, res) => {
  try {
    const lcat1233 = await amadminstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amadminstaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await amadminstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amadminstaffdocs = async (req, res) => {
  try {
    const lcat1233 = await amadminstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amadminstafflinks = async (req, res) => {
  try {
    const lcat1233 = await amadminstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamadminstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amadminstaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Staff: req.query.Staff,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamadminstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amadminstaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Staff: req.query.Staff,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamadminstaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amadminstaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamadminstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amadminstaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaminfsuffbyfac = async (req, res) => {
  try {
    const lcat1233 = await aminfsuff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aminfsuffbydep = async (req, res) => {
  try {
    const lcat1233 = await aminfsuff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aminfsuffbyprog = async (req, res) => {
  try {
    const lcat1233 = await aminfsuff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aminfsuffdocs = async (req, res) => {
  try {
    const lcat1233 = await aminfsuff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aminfsufflinks = async (req, res) => {
  try {
    const lcat1233 = await aminfsuff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaminfsuffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aminfsuff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      item: req.query.item,
      ifsufficient: req.query.ifsufficient,
      observations: req.query.observations,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaminfsuffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aminfsuff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      item: req.query.item,
      ifsufficient: req.query.ifsufficient,
      observations: req.query.observations,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaminfsuffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aminfsuff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaminfsuffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aminfsuff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamimprovementsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amimprovements.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amimprovementsbydep = async (req, res) => {
  try {
    const lcat1233 = await amimprovements.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amimprovementsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amimprovements.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amimprovementsdocs = async (req, res) => {
  try {
    const lcat1233 = await amimprovements.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amimprovementslinks = async (req, res) => {
  try {
    const lcat1233 = await amimprovements.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamimprovementsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amimprovements.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      observations: req.query.observations,
      suggestion: req.query.suggestion,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamimprovementsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amimprovements.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      observations: req.query.observations,
      suggestion: req.query.suggestion,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamimprovementscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amimprovements.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamimprovementsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amimprovements.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamrecommendationbyfac = async (req, res) => {
  try {
    const lcat1233 = await amrecommendation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amrecommendationbydep = async (req, res) => {
  try {
    const lcat1233 = await amrecommendation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amrecommendationbyprog = async (req, res) => {
  try {
    const lcat1233 = await amrecommendation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amrecommendationdocs = async (req, res) => {
  try {
    const lcat1233 = await amrecommendation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amrecommendationlinks = async (req, res) => {
  try {
    const lcat1233 = await amrecommendation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamrecommendationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amrecommendation.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      ifok: req.query.ifok,
      recommendations: req.query.recommendations,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamrecommendationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amrecommendation.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      ifok: req.query.ifok,
      recommendations: req.query.recommendations,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamrecommendationcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amrecommendation.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamrecommendationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amrecommendation.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamchemicalsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amchemicals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amchemicalsbydep = async (req, res) => {
  try {
    const lcat1233 = await amchemicals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amchemicalsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amchemicals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amchemicalsdocs = async (req, res) => {
  try {
    const lcat1233 = await amchemicals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amchemicalslinks = async (req, res) => {
  try {
    const lcat1233 = await amchemicals.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamchemicalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amchemicals.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      subject: req.query.subject,
      type: req.query.type,
      chemical: req.query.chemical,
      lab: req.query.lab,
      total: req.query.total,
      purchasedate: req.query.purchasedate,
      ifexcess: req.query.ifexcess,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamchemicalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amchemicals.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      subject: req.query.subject,
      type: req.query.type,
      chemical: req.query.chemical,
      lab: req.query.lab,
      total: req.query.total,
      purchasedate: req.query.purchasedate,
      ifexcess: req.query.ifexcess,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamchemicalscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amchemicals.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamchemicalsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amchemicals.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamprogfacultiesbyfac = async (req, res) => {
  try {
    const lcat1233 = await amprogfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogfacultiesbydep = async (req, res) => {
  try {
    const lcat1233 = await amprogfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogfacultiesbyprog = async (req, res) => {
  try {
    const lcat1233 = await amprogfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogfacultiesdocs = async (req, res) => {
  try {
    const lcat1233 = await amprogfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amprogfacultieslinks = async (req, res) => {
  try {
    const lcat1233 = await amprogfaculties.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamprogfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amprogfaculties.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      faculty: req.query.faculty,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      phdmonyr: req.query.phdmonyr,
      isqualified: req.query.isqualified,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamprogfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amprogfaculties.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      faculty: req.query.faculty,
      dob: req.query.dob,
      doj: req.query.doj,
      designation: req.query.designation,
      qualification: req.query.qualification,
      salary: req.query.salary,
      phdmonyr: req.query.phdmonyr,
      isqualified: req.query.isqualified,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamprogfacultiescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amprogfaculties.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamprogfacultiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amprogfaculties.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 6 2023

exports.getstudmentorbyfac = async (req, res) => {
  try {
    const lcat1233 = await studmentor.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmentorbydep = async (req, res) => {
  try {
    const lcat1233 = await studmentor.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmentorbyprog = async (req, res) => {
  try {
    const lcat1233 = await studmentor.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmentordocs = async (req, res) => {
  try {
    const lcat1233 = await studmentor.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.studmentorlinks = async (req, res) => {
  try {
    const lcat1233 = await studmentor.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createstudmentorbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await studmentor.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      programname: req.query.programname,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudmentorbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await studmentor.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      programname: req.query.programname,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatestudmentorcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await studmentor.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletestudmentorbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await studmentor.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getlphdfacbyfac = async (req, res) => {
  try {
    const lcat1233 = await lphdfac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lphdfacbydep = async (req, res) => {
  try {
    const lcat1233 = await lphdfac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lphdfacbyprog = async (req, res) => {
  try {
    const lcat1233 = await lphdfac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lphdfacdocs = async (req, res) => {
  try {
    const lcat1233 = await lphdfac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.lphdfaclinks = async (req, res) => {
  try {
    const lcat1233 = await lphdfac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createlphdfacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await lphdfac.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      yearofaward: req.query.yearofaward,
      university: req.query.university,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatelphdfacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await lphdfac.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      yearofaward: req.query.yearofaward,
      university: req.query.university,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatelphdfaccomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await lphdfac.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletelphdfacbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await lphdfac.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Apr 8 2023

exports.getalumniusersbyfac = async (req, res) => {
  try {
    const lcat1233 = await alumniusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniusersbydep = async (req, res) => {
  try {
    const lcat1233 = await alumniusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniusersbyprog = async (req, res) => {
  try {
    const lcat1233 = await alumniusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniusersdocs = async (req, res) => {
  try {
    const lcat1233 = await alumniusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniuserslinks = async (req, res) => {
  try {
    const lcat1233 = await alumniusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumniusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumniusers.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      alumni: req.query.alumni,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      program: req.query.program,
      regno: req.query.regno,
      batch: req.query.batch,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumniusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumniusers.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      alumni: req.query.alumni,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      program: req.query.program,
      regno: req.query.regno,
      batch: req.query.batch,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumniuserscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumniusers.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumniusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumniusers.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumniworkbyfac = async (req, res) => {
  try {
    const lcat1233 = await alumniwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniworkbydep = async (req, res) => {
  try {
    const lcat1233 = await alumniwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniworkbyprog = async (req, res) => {
  try {
    const lcat1233 = await alumniwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniworkdocs = async (req, res) => {
  try {
    const lcat1233 = await alumniwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumniworklinks = async (req, res) => {
  try {
    const lcat1233 = await alumniwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumniworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumniwork.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumniworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumniwork.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumniworkcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumniwork.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumniworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumniwork.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumnihigheredbyfac = async (req, res) => {
  try {
    const lcat1233 = await alumnihighered.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnihigheredbydep = async (req, res) => {
  try {
    const lcat1233 = await alumnihighered.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnihigheredbyprog = async (req, res) => {
  try {
    const lcat1233 = await alumnihighered.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnihighereddocs = async (req, res) => {
  try {
    const lcat1233 = await alumnihighered.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnihigheredlinks = async (req, res) => {
  try {
    const lcat1233 = await alumnihighered.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumnihigheredbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumnihighered.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institute: req.query.institute,
      doj: req.query.doj,
      hprogram: req.query.hprogram,
      hregno: req.query.hregno,
      dol: req.query.dol,
      instaddress: req.query.instaddress,
      instcountry: req.query.instcountry,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnihigheredbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumnihighered.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institute: req.query.institute,
      doj: req.query.doj,
      hprogram: req.query.hprogram,
      hregno: req.query.hregno,
      dol: req.query.dol,
      instaddress: req.query.instaddress,
      instcountry: req.query.instcountry,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnihigheredcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumnihighered.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumnihigheredbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumnihighered.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumnicontributebyfac = async (req, res) => {
  try {
    const lcat1233 = await alumnicontribute.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnicontributebydep = async (req, res) => {
  try {
    const lcat1233 = await alumnicontribute.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnicontributebyprog = async (req, res) => {
  try {
    const lcat1233 = await alumnicontribute.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnicontributedocs = async (req, res) => {
  try {
    const lcat1233 = await alumnicontribute.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnicontributelinks = async (req, res) => {
  try {
    const lcat1233 = await alumnicontribute.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumnicontributebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumnicontribute.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      amount: req.query.amount,
      purpose: req.query.purpose,
      refid: req.query.refid,
      bank: req.query.bank,
      tdate: req.query.tdate,
      description: req.query.description,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnicontributebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumnicontribute.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      amount: req.query.amount,
      purpose: req.query.purpose,
      refid: req.query.refid,
      bank: req.query.bank,
      tdate: req.query.tdate,
      description: req.query.description,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnicontributecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumnicontribute.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumnicontributebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumnicontribute.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumnijobsbyfac = async (req, res) => {
  try {
    const lcat1233 = await alumnijobs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnijobsbydep = async (req, res) => {
  try {
    const lcat1233 = await alumnijobs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnijobsbyprog = async (req, res) => {
  try {
    const lcat1233 = await alumnijobs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnijobsdocs = async (req, res) => {
  try {
    const lcat1233 = await alumnijobs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnijobslinks = async (req, res) => {
  try {
    const lcat1233 = await alumnijobs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumnijobsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumnijobs.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      title: req.query.title,
      role: req.query.role,
      description: req.query.description,
      location: req.query.location,
      description: req.query.description,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      contact: req.query.contact,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnijobsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumnijobs.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      title: req.query.title,
      role: req.query.role,
      description: req.query.description,
      location: req.query.location,
      description: req.query.description,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      contact: req.query.contact,
      programname: req.query.programname,
      batch: req.query.batch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnijobscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumnijobs.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumnijobsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumnijobs.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumnieventsbyfac = async (req, res) => {
  try {
    const lcat1233 = await alumnievents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnieventsbydep = async (req, res) => {
  try {
    const lcat1233 = await alumnievents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnieventsbyprog = async (req, res) => {
  try {
    const lcat1233 = await alumnievents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnieventsdocs = async (req, res) => {
  try {
    const lcat1233 = await alumnievents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnieventslinks = async (req, res) => {
  try {
    const lcat1233 = await alumnievents.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumnieventsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumnievents.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      event: req.query.event,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      description: req.query.description,
      location: req.query.location,
      registration: req.query.registration,
      mode: req.query.mode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnieventsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumnievents.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      event: req.query.event,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      description: req.query.description,
      location: req.query.location,
      registration: req.query.registration,
      mode: req.query.mode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnieventscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumnievents.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumnieventsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumnievents.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.loginalumni = async (req, res) => {
  try {
    const username = req.query.username;
    const password = req.query.password;
    alumniusers.findOne(
      { username: username, password: password, status1: "Accepted" },
      (err, role) => {
        if (err) {
          res.status(201).json({
            status: "Error",
          });
        }
        if (role) {
          // res.cookie("user",String([role.email]));
          // res.cookie("name",String([role.name]));
          // res.cookie("department",String([role.department]));
          // res.cookie("colid",String([role.colid]));
          // res.cookie("role",String([role.role]));
          const token = jwt.sign(
            { user: username, colid: String([role.colid]) },
            process.env.JWT_SECRET,
            {
              expiresIn: process.env.JWT_EXPIRES_IN,
            }
          );
          res.status(200).json({
            status: "Success",
            user: String([role.username]),
            role: "Alumni",
            name: String([role.alumni]),
            colid: String([role.colid]),
            regno: String([role.regno]),
            program: String([role.program]),
            batch: String([role.batch]),
            token: token,
          });
        } else {
          res.status(201).json({
            status: "Invalid username or password",
          });
        }
      }
    );
  } catch (err) {
    res.status(201).json({
      status: "Error " + err,
    });
  }
};

exports.updatealumniphoto = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    // const lcat1= await user.findByIdAndUpdate( req.query.id,{
    //     status1: req.query.status1,
    //     comments: req.query.comments

    // });

    const lcat1 = await alumniusers.updateMany(
      { username: req.query.user },
      {
        photo: req.query.photo,
      }
    );

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getphotoofalumni = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await alumniusers
      .find()
      .where("username")
      .equals(req.query.username);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.registeralumni = async (req, res) => {
  try {
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    const pub1 = await alumniusers.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      alumni: req.query.alumni,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      program: req.query.program,
      regno: req.query.regno,
      batch: req.query.batch,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 14 2023

exports.getpfilesbyfac = async (req, res) => {
  try {
    const lcat1233 = await pfiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfilesbydep = async (req, res) => {
  try {
    const lcat1233 = await pfiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfilesbyprog = async (req, res) => {
  try {
    const lcat1233 = await pfiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfilesdocs = async (req, res) => {
  try {
    const lcat1233 = await pfiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfileslinks = async (req, res) => {
  try {
    const lcat1233 = await pfiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpfilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pfiles.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      metric: req.query.metric,
      topic: req.query.topic,
      description: req.query.description,
      source: req.query.source,
      datereceived: req.query.datereceived,
      accreditation: req.query.accreditation,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepfilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pfiles.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      metric: req.query.metric,
      topic: req.query.topic,
      description: req.query.description,
      source: req.query.source,
      datereceived: req.query.datereceived,
      accreditation: req.query.accreditation,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepfilescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pfiles.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepfilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pfiles.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpdeliverablesbyfac = async (req, res) => {
  try {
    const lcat1233 = await pdeliverables.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pdeliverablesbydep = async (req, res) => {
  try {
    const lcat1233 = await pdeliverables.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pdeliverablesbyprog = async (req, res) => {
  try {
    const lcat1233 = await pdeliverables.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pdeliverablesdocs = async (req, res) => {
  try {
    const lcat1233 = await pdeliverables.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pdeliverableslinks = async (req, res) => {
  try {
    const lcat1233 = await pdeliverables.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpdeliverablesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pdeliverables.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      accreditation: req.query.accreditation,
      year: req.query.year,
      topic: req.query.topic,
      description: req.query.description,
      metric: req.query.metric,
      dateuploaded: req.query.dateuploaded,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepdeliverablesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pdeliverables.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      accreditation: req.query.accreditation,
      year: req.query.year,
      topic: req.query.topic,
      description: req.query.description,
      metric: req.query.metric,
      dateuploaded: req.query.dateuploaded,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepdeliverablescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pdeliverables.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepdeliverablesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pdeliverables.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 16 2023

exports.getcnewfeedbackbyfac = async (req, res) => {
  try {
    const lcat1233 = await cnewfeedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cnewfeedbackbydep = async (req, res) => {
  try {
    const lcat1233 = await cnewfeedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cnewfeedbackbyprog = async (req, res) => {
  try {
    const lcat1233 = await cnewfeedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cnewfeedbackdocs = async (req, res) => {
  try {
    const lcat1233 = await cnewfeedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          meetingid: req.query.meetingid,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cnewfeedbacklinks = async (req, res) => {
  try {
    const lcat1233 = await cnewfeedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcnewfeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cnewfeedback.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      presenter: req.query.presenter,
      pemail: req.query.pemail,
      meetingid: req.query.meetingid,
      respondent: req.query.respondent,
      remail: req.query.remail,
      rphone: req.query.rphone,
      submitteddate: req.query.submitteddate,
      knowledge: req.query.knowledge,
      communication: req.query.communication,
      confidence: req.query.confidence,
      understood: req.query.understood,
      satisfied: req.query.satisfied,
      response: req.query.response,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecnewfeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cnewfeedback.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      presenter: req.query.presenter,
      pemail: req.query.pemail,
      meetingid: req.query.meetingid,
      respondent: req.query.respondent,
      remail: req.query.remail,
      rphone: req.query.rphone,
      submitteddate: req.query.submitteddate,
      knowledge: req.query.knowledge,
      communication: req.query.communication,
      confidence: req.query.confidence,
      understood: req.query.understood,
      satisfied: req.query.satisfied,
      response: req.query.response,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecnewfeedbackcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cnewfeedback.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecnewfeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cnewfeedback.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 16 2023 1

exports.deleteallnprojectsnew = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    await nprojectsnew.deleteMany({ colid: req.query.colid });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    res.status(200).json({
      status: "Error",
      message: err,
    });
  }
};

// apr 19 2023

exports.getsssstudbyfac = async (req, res) => {
  try {
    const lcat1233 = await sssstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.sssstudbydep = async (req, res) => {
  try {
    const lcat1233 = await sssstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.sssstudbyprog = async (req, res) => {
  try {
    const lcat1233 = await sssstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.sssstuddocs = async (req, res) => {
  try {
    const lcat1233 = await sssstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.sssstudlinks = async (req, res) => {
  try {
    const lcat1233 = await sssstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createsssstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await sssstud.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      domicile: req.query.domicile,
      nationality: req.query.nationality,
      email: req.query.email,
      level: req.query.level,
      discipline: req.query.discipline,
      department: req.query.department,
      course: req.query.course,
      regno: req.query.regno,
      mobile: req.query.mobile,
      joinyear: req.query.joinyear,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatesssstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await sssstud.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      domicile: req.query.domicile,
      nationality: req.query.nationality,
      email: req.query.email,
      level: req.query.level,
      discipline: req.query.discipline,
      department: req.query.department,
      course: req.query.course,
      regno: req.query.regno,
      mobile: req.query.mobile,
      joinyear: req.query.joinyear,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatesssstudcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await sssstud.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletesssstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await sssstud.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Apr 28 2023

exports.updateadmphoto = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    // const lcat1= await user.findByIdAndUpdate( req.query.id,{
    //     status1: req.query.status1,
    //     comments: req.query.comments

    // });

    const lcat1 = await admusers.updateMany(
      { username: req.query.user },
      {
        photo: req.query.photo,
      }
    );

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getphotoofadm = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await admusers
      .find()
      .where("username")
      .equals(req.query.username);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmusersbyfac = async (req, res) => {
  try {
    const lcat1233 = await admusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admusersbydep = async (req, res) => {
  try {
    const lcat1233 = await admusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admusersbyprog = async (req, res) => {
  try {
    const lcat1233 = await admusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admusersdocs = async (req, res) => {
  try {
    const lcat1233 = await admusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admuserslinks = async (req, res) => {
  try {
    const lcat1233 = await admusers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admusers.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      refer: req.query.refer,
      referuser: req.query.referuser,
      username: req.query.username,
      password: req.query.password,
      photo: req.query.photo,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admusers.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      refer: req.query.refer,
      referuser: req.query.referuser,
      username: req.query.username,
      password: req.query.password,
      photo: req.query.photo,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmuserscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admusers.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmusersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admusers.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmedubyfac = async (req, res) => {
  try {
    const lcat1233 = await admedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admedubydep = async (req, res) => {
  try {
    const lcat1233 = await admedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admedubyprog = async (req, res) => {
  try {
    const lcat1233 = await admedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admedudocs = async (req, res) => {
  try {
    const lcat1233 = await admedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admedulinks = async (req, res) => {
  try {
    const lcat1233 = await admedu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admedu.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      level: req.query.level,
      institution: req.query.institution,
      degree: req.query.degree,
      marks: req.query.marks,
      grade: req.query.grade,
      year: req.query.year,
      university: req.query.university,
      location: req.query.location,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admedu.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      level: req.query.level,
      institution: req.query.institution,
      degree: req.query.degree,
      marks: req.query.marks,
      grade: req.query.grade,
      year: req.query.year,
      university: req.query.university,
      location: req.query.location,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmeducomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admedu.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmedubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admedu.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmworkbyfac = async (req, res) => {
  try {
    const lcat1233 = await admwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admworkbydep = async (req, res) => {
  try {
    const lcat1233 = await admwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admworkbyprog = async (req, res) => {
  try {
    const lcat1233 = await admwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admworkdocs = async (req, res) => {
  try {
    const lcat1233 = await admwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admworklinks = async (req, res) => {
  try {
    const lcat1233 = await admwork.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admwork.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admwork.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmworkcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admwork.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmworkbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admwork.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmprogramsbyfac = async (req, res) => {
  try {
    const lcat1233 = await admprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admprogramsbydep = async (req, res) => {
  try {
    const lcat1233 = await admprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admprogramsbyprog = async (req, res) => {
  try {
    const lcat1233 = await admprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admprogramsdocs = async (req, res) => {
  try {
    const lcat1233 = await admprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admprogramslinks = async (req, res) => {
  try {
    const lcat1233 = await admprograms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admprograms.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admprograms.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmprogramscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admprograms.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmprogramsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admprograms.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadminternbyfac = async (req, res) => {
  try {
    const lcat1233 = await admintern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.adminternbydep = async (req, res) => {
  try {
    const lcat1233 = await admintern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.adminternbyprog = async (req, res) => {
  try {
    const lcat1233 = await admintern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.adminterndocs = async (req, res) => {
  try {
    const lcat1233 = await admintern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.adminternlinks = async (req, res) => {
  try {
    const lcat1233 = await admintern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadminternbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admintern.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadminternbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admintern.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      org: req.query.org,
      doj: req.query.doj,
      dol: req.query.dol,
      designation: req.query.designation,
      description: req.query.description,
      salary: req.query.salary,
      orgaddress: req.query.orgaddress,
      orgcontact: req.query.orgcontact,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadminterncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admintern.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadminternbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admintern.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmextrabyfac = async (req, res) => {
  try {
    const lcat1233 = await admextra.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admextrabydep = async (req, res) => {
  try {
    const lcat1233 = await admextra.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admextrabyprog = async (req, res) => {
  try {
    const lcat1233 = await admextra.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admextradocs = async (req, res) => {
  try {
    const lcat1233 = await admextra.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admextralinks = async (req, res) => {
  try {
    const lcat1233 = await admextra.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmextrabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admextra.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      activity: req.query.activity,
      year: req.query.year,
      activitydate: req.query.activitydate,
      description: req.query.description,
      org: req.query.org,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmextrabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admextra.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      activity: req.query.activity,
      year: req.query.year,
      activitydate: req.query.activitydate,
      description: req.query.description,
      org: req.query.org,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmextracomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admextra.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmextrabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admextra.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmlanguagesbyfac = async (req, res) => {
  try {
    const lcat1233 = await admlanguages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admlanguagesbydep = async (req, res) => {
  try {
    const lcat1233 = await admlanguages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admlanguagesbyprog = async (req, res) => {
  try {
    const lcat1233 = await admlanguages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admlanguagesdocs = async (req, res) => {
  try {
    const lcat1233 = await admlanguages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admlanguageslinks = async (req, res) => {
  try {
    const lcat1233 = await admlanguages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmlanguagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admlanguages.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      language: req.query.language,
      readskills: req.query.readskills,
      writeskills: req.query.writeskills,
      speakskills: req.query.speakskills,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmlanguagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admlanguages.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      language: req.query.language,
      readskills: req.query.readskills,
      writeskills: req.query.writeskills,
      speakskills: req.query.speakskills,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmlanguagescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admlanguages.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmlanguagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admlanguages.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmfacilitiesbyfac = async (req, res) => {
  try {
    const lcat1233 = await admfacilities.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admfacilitiesbydep = async (req, res) => {
  try {
    const lcat1233 = await admfacilities.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admfacilitiesbyprog = async (req, res) => {
  try {
    const lcat1233 = await admfacilities.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admfacilitiesdocs = async (req, res) => {
  try {
    const lcat1233 = await admfacilities.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admfacilitieslinks = async (req, res) => {
  try {
    const lcat1233 = await admfacilities.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmfacilitiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admfacilities.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      hostel: req.query.hostel,
      scholarship: req.query.scholarship,
      visa: req.query.visa,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmfacilitiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admfacilities.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      hostel: req.query.hostel,
      scholarship: req.query.scholarship,
      visa: req.query.visa,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmfacilitiescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admfacilities.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmfacilitiesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admfacilities.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getadmmarksbyfac = async (req, res) => {
  try {
    const lcat1233 = await admmarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admmarksbydep = async (req, res) => {
  try {
    const lcat1233 = await admmarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admmarksbyprog = async (req, res) => {
  try {
    const lcat1233 = await admmarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admmarksdocs = async (req, res) => {
  try {
    const lcat1233 = await admmarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admmarkslinks = async (req, res) => {
  try {
    const lcat1233 = await admmarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmmarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admmarks.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      subject: req.query.subject,
      type: req.query.type,
      marks: req.query.marks,
      grade: req.query.grade,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmmarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admmarks.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      degree: req.query.degree,
      subject: req.query.subject,
      type: req.query.type,
      marks: req.query.marks,
      grade: req.query.grade,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmmarkscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admmarks.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmmarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admmarks.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// May 11 2023

exports.getassignmentbyfac = async (req, res) => {
  try {
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignmentbydep = async (req, res) => {
  try {
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignmentbyprog = async (req, res) => {
  try {
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignmentdocs = async (req, res) => {
  try {
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignmentlinks = async (req, res) => {
  try {
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createassignmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await assignment.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      course: req.query.course,
      classdate: req.query.classdate,
      topic: req.query.topic,
      link: req.query.link,
      status1: "Submitted",
      status: 1,
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateassignmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await assignment.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      course: req.query.course,
      classdate: req.query.classdate,
      topic: req.query.topic,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateassignmentcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await assignment.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteassignmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await assignment.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcoursefilesbyfac = async (req, res) => {
  try {
    const lcat1233 = await coursefiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.coursefilesbydep = async (req, res) => {
  try {
    const lcat1233 = await coursefiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.coursefilesbyprog = async (req, res) => {
  try {
    const lcat1233 = await coursefiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.coursefilesdocs = async (req, res) => {
  try {
    const lcat1233 = await coursefiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.coursefileslinks = async (req, res) => {
  try {
    const lcat1233 = await coursefiles.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcoursefilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await coursefiles.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      filename: req.query.filename,
      link: req.query.link,
      status: req.query.status,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecoursefilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await coursefiles.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      filename: req.query.filename,
      link: req.query.link,
      status: req.query.status,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecoursefilescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await coursefiles.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecoursefilesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await coursefiles.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 2 2023 1

exports.getaffassignbyfac = async (req, res) => {
  try {
    const lcat1233 = await affassign.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affassignbydep = async (req, res) => {
  try {
    const lcat1233 = await affassign.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affassignbyprog = async (req, res) => {
  try {
    const lcat1233 = await affassign.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affassigndocs = async (req, res) => {
  try {
    const lcat1233 = await affassign.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affassignlinks = async (req, res) => {
  try {
    const lcat1233 = await affassign.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaffassignbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await affassign.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institutionid: req.query.institutionid,
      institution: req.query.institution,
      insname: req.query.insname,
      insuser: req.query.insuser,
      role: req.query.role,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffassignbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await affassign.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institutionid: req.query.institutionid,
      institution: req.query.institution,
      insname: req.query.insname,
      insuser: req.query.insuser,
      role: req.query.role,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffassigncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await affassign.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaffassignbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await affassign.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 5 2023

exports.deleteallcocal = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    await cocal.deleteMany({ colid: req.query.colid });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    res.status(200).json({
      status: "Error",
      message: err,
    });
  }
};

// Jun 9 2023

exports.getamcpdetails3byfac = async (req, res) => {
  try {
    const lcat1233 = await amcpdetails3.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpdetails3bydep = async (req, res) => {
  try {
    const lcat1233 = await amcpdetails3.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpdetails3byprog = async (req, res) => {
  try {
    const lcat1233 = await amcpdetails3.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpdetails3docs = async (req, res) => {
  try {
    const lcat1233 = await amcpdetails3.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpdetails3links = async (req, res) => {
  try {
    const lcat1233 = await amcpdetails3.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamcpdetails3byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amcpdetails3.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compstatus: req.query.compstatus,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamcpdetails3byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amcpdetails3.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compstatus: req.query.compstatus,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamcpdetails3comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amcpdetails3.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamcpdetails3byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amcpdetails3.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamcpobservationsbyfac = async (req, res) => {
  try {
    const lcat1233 = await amcpobservations.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpobservationsbydep = async (req, res) => {
  try {
    const lcat1233 = await amcpobservations.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpobservationsbyprog = async (req, res) => {
  try {
    const lcat1233 = await amcpobservations.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpobservationsdocs = async (req, res) => {
  try {
    const lcat1233 = await amcpobservations.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amcpobservationslinks = async (req, res) => {
  try {
    const lcat1233 = await amcpobservations.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamcpobservationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amcpobservations.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegeid: req.query.collegeid,
      college: req.query.college,
      year: req.query.year,
      program: req.query.program,
      fiveyear: req.query.fiveyear,
      qualification: req.query.qualification,
      classrooms: req.query.classrooms,
      laboratory: req.query.laboratory,
      labequipments: req.query.labequipments,
      labbooks: req.query.labbooks,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamcpobservationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amcpobservations.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegeid: req.query.collegeid,
      college: req.query.college,
      year: req.query.year,
      program: req.query.program,
      fiveyear: req.query.fiveyear,
      qualification: req.query.qualification,
      classrooms: req.query.classrooms,
      laboratory: req.query.laboratory,
      labequipments: req.query.labequipments,
      labbooks: req.query.labbooks,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamcpobservationscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amcpobservations.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamcpobservationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amcpobservations.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getammember1byfac = async (req, res) => {
  try {
    const lcat1233 = await ammember1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammember1bydep = async (req, res) => {
  try {
    const lcat1233 = await ammember1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammember1byprog = async (req, res) => {
  try {
    const lcat1233 = await ammember1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammember1docs = async (req, res) => {
  try {
    const lcat1233 = await ammember1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammember1links = async (req, res) => {
  try {
    const lcat1233 = await ammember1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createammember1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ammember1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammember1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ammember1.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammember1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ammember1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteammember1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ammember1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getammbr2compbyfac = async (req, res) => {
  try {
    const lcat1233 = await ammbr2comp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2compbydep = async (req, res) => {
  try {
    const lcat1233 = await ammbr2comp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2compbyprog = async (req, res) => {
  try {
    const lcat1233 = await ammbr2comp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2compdocs = async (req, res) => {
  try {
    const lcat1233 = await ammbr2comp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2complinks = async (req, res) => {
  try {
    const lcat1233 = await ammbr2comp.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createammbr2compbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ammbr2comp.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammbr2compbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ammbr2comp.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammbr2compcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ammbr2comp.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteammbr2compbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ammbr2comp.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getammbr2detbyfac = async (req, res) => {
  try {
    const lcat1233 = await ammbr2det.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2detbydep = async (req, res) => {
  try {
    const lcat1233 = await ammbr2det.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2detbyprog = async (req, res) => {
  try {
    const lcat1233 = await ammbr2det.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2detdocs = async (req, res) => {
  try {
    const lcat1233 = await ammbr2det.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ammbr2detlinks = async (req, res) => {
  try {
    const lcat1233 = await ammbr2det.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createammbr2detbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ammbr2det.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammbr2detbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ammbr2det.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      collegeid: req.query.collegeid,
      college: req.query.college,
      item: req.query.item,
      compliance: req.query.compliance,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateammbr2detcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ammbr2det.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteammbr2detbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ammbr2det.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 10 2023

exports.getmkustudbyfac = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getmkustudbyregno = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          regno: req.query.regno,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkustudbydep = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkustudbyprog = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkustuddocs = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkustudlinks = async (req, res) => {
  try {
    const lcat1233 = await mkustud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmkustudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await mkustud.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      deptcode: req.query.deptcode,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      studenttamil: req.query.studenttamil,
      regno: req.query.regno,
      dob: req.query.dob,
      sex: req.query.sex,
      pwd: req.query.pwd,
      community: req.query.community,
      comcert: req.query.comcert,
      aadhar: req.query.aadhar,
      aspdistrict: req.query.aspdistrict,
      rp: req.query.rp,
      nri: req.query.nri,
      mobile: req.query.mobile,
      email: req.query.email,
      scholarship: req.query.scholarship,
      fellowship: req.query.fellowship,
      internship: req.query.internship,
      selfcourse: req.query.selfcourse,
      guardian: req.query.guardian,
      guardoccu: req.query.guardoccu,
      mother: req.query.mother,
      address: req.query.address,
      guardmob: req.query.guardmob,
      guardemail: req.query.guardemail,
      anyother: req.query.anyother,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemkustudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await mkustud.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      deptcode: req.query.deptcode,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      studenttamil: req.query.studenttamil,
      regno: req.query.regno,
      dob: req.query.dob,
      sex: req.query.sex,
      pwd: req.query.pwd,
      community: req.query.community,
      comcert: req.query.comcert,
      aadhar: req.query.aadhar,
      aspdistrict: req.query.aspdistrict,
      rp: req.query.rp,
      nri: req.query.nri,
      mobile: req.query.mobile,
      email: req.query.email,
      scholarship: req.query.scholarship,
      fellowship: req.query.fellowship,
      internship: req.query.internship,
      selfcourse: req.query.selfcourse,
      guardian: req.query.guardian,
      guardoccu: req.query.guardoccu,
      mother: req.query.mother,
      address: req.query.address,
      guardmob: req.query.guardmob,
      guardemail: req.query.guardemail,
      anyother: req.query.anyother,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemkustudcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await mkustud.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemkustudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await mkustud.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getmkumarksbyfac = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getmkumarksbyregno = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          regno: req.query.regno,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkumarksbydep = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkumarksbyprog = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkumarksdocs = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.mkumarkslinks = async (req, res) => {
  try {
    const lcat1233 = await mkumarks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmkumarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await mkumarks.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      deptcode: req.query.deptcode,
      student: req.query.student,
      regno: req.query.regno,
      exam: req.query.exam,
      pubdate: req.query.pubdate,
      coursecode: req.query.coursecode,
      course: req.query.course,
      credit: req.query.credit,
      maxia: req.query.maxia,
      maxes: req.query.maxes,
      maxtot: req.query.maxtot,
      marksia: req.query.marksia,
      markses: req.query.markses,
      markstot: req.query.markstot,
      gp: req.query.gp,
      lg: req.query.lg,
      nstatus: req.query.nstatus,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemkumarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await mkumarks.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      deptcode: req.query.deptcode,
      student: req.query.student,
      regno: req.query.regno,
      exam: req.query.exam,
      pubdate: req.query.pubdate,
      coursecode: req.query.coursecode,
      course: req.query.course,
      credit: req.query.credit,
      maxia: req.query.maxia,
      maxes: req.query.maxes,
      maxtot: req.query.maxtot,
      marksia: req.query.marksia,
      markses: req.query.markses,
      markstot: req.query.markstot,
      gp: req.query.gp,
      lg: req.query.lg,
      nstatus: req.query.nstatus,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemkumarkscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await mkumarks.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemkumarksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await mkumarks.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 21 2023

exports.getanmstudnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anmstudnewbydep = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anmstudnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anmstudnewbyproguniv = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          univid: parseInt(req.query.univid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anmstudnewdocs = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.anmstudnewlinks = async (req, res) => {
  try {
    const lcat1233 = await anmstudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createanmstudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await anmstudnew.create({
      name: req.query.name,
      colid: req.query.colid,
      univid: req.query.univid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      college: req.query.college,
      coldistrict: req.query.coldistrict,
      coltype: req.query.coltype,
      admissionyear: req.query.admissionyear,
      photo: req.query.photo,
      email: req.query.email,
      regno: req.query.regno,
      rollno: req.query.rollno,
      student: req.query.student,
      dateofbirth: req.query.dateofbirth,
      gender: req.query.gender,
      religion: req.query.religion,
      category: req.query.category,
      caste: req.query.caste,
      state: req.query.state,
      nationality: req.query.nationality,
      mobile: req.query.mobile,
      aadhar: req.query.aadhar,
      blood: req.query.blood,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      duration: req.query.duration,
      stream: req.query.stream,
      medium: req.query.medium,
      shift: req.query.shift,
      section: req.query.section,
      admissiondate: req.query.admissiondate,
      joiningdate: req.query.joiningdate,
      counselling: req.query.counselling,
      studstatus: req.query.studstatus,
      admmode: req.query.admmode,
      lateral: req.query.lateral,
      father: req.query.father,
      fincome: req.query.fincome,
      foccu: req.query.foccu,
      mother: req.query.mother,
      mincome: req.query.mincome,
      moccu: req.query.moccu,
      guardian: req.query.guardian,
      pmobile: req.query.pmobile,
      orphan: req.query.orphan,
      annualinc: req.query.annualinc,
      cardtype: req.query.cardtype,
      cardno: req.query.cardno,
      diffable: req.query.diffable,
      diffabtype: req.query.diffabtype,
      diffpercent: req.query.diffpercent,
      udidno: req.query.udidno,
      firstgrad: req.query.firstgrad,
      spcat: req.query.spcat,
      emisno: req.query.emisno,
      hscboard: req.query.hscboard,
      hscregno: req.query.hscregno,
      language: req.query.language,
      hscmarks: req.query.hscmarks,
      hscscholarship: req.query.hscscholarship,
      lastschol: req.query.lastschol,
      school: req.query.school,
      govtschool: req.query.govtschool,
      tamil: req.query.tamil,
      address: req.query.address,
      village: req.query.village,
      studdistrict: req.query.studdistrict,
      pin: req.query.pin,
      prevprog: req.query.prevprog,
      lastyear: req.query.lastyear,
      prevregn: req.query.prevregn,
      prevyear: req.query.prevyear,
      prevpercent: req.query.prevpercent,
      previnscode: req.query.previnscode,
      previnscode: req.query.previnscode,
      qualmode: req.query.qualmode,
      hostel: req.query.hostel,
      hjoindate: req.query.hjoindate,
      hleavedate: req.query.hleavedate,
      hosteltype: req.query.hosteltype,
      bank: req.query.bank,
      account: req.query.account,
      accname: req.query.accname,
      acctype: req.query.acctype,
      ifsc: req.query.ifsc,
      branch: req.query.branch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateanmstudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await anmstudnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      college: req.query.college,
      coldistrict: req.query.coldistrict,
      coltype: req.query.coltype,
      admissionyear: req.query.admissionyear,
      photo: req.query.photo,
      email: req.query.email,
      regno: req.query.regno,
      rollno: req.query.rollno,
      student: req.query.student,
      dateofbirth: req.query.dateofbirth,
      gender: req.query.gender,
      religion: req.query.religion,
      category: req.query.category,
      caste: req.query.caste,
      state: req.query.state,
      nationality: req.query.nationality,
      mobile: req.query.mobile,
      aadhar: req.query.aadhar,
      blood: req.query.blood,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      duration: req.query.duration,
      stream: req.query.stream,
      medium: req.query.medium,
      shift: req.query.shift,
      section: req.query.section,
      admissiondate: req.query.admissiondate,
      joiningdate: req.query.joiningdate,
      counselling: req.query.counselling,
      studstatus: req.query.studstatus,
      admmode: req.query.admmode,
      lateral: req.query.lateral,
      father: req.query.father,
      fincome: req.query.fincome,
      foccu: req.query.foccu,
      mother: req.query.mother,
      mincome: req.query.mincome,
      moccu: req.query.moccu,
      guardian: req.query.guardian,
      pmobile: req.query.pmobile,
      orphan: req.query.orphan,
      annualinc: req.query.annualinc,
      cardtype: req.query.cardtype,
      cardno: req.query.cardno,
      diffable: req.query.diffable,
      diffabtype: req.query.diffabtype,
      diffpercent: req.query.diffpercent,
      udidno: req.query.udidno,
      firstgrad: req.query.firstgrad,
      spcat: req.query.spcat,
      emisno: req.query.emisno,
      hscboard: req.query.hscboard,
      hscregno: req.query.hscregno,
      language: req.query.language,
      hscmarks: req.query.hscmarks,
      hscscholarship: req.query.hscscholarship,
      lastschol: req.query.lastschol,
      school: req.query.school,
      govtschool: req.query.govtschool,
      tamil: req.query.tamil,
      address: req.query.address,
      village: req.query.village,
      studdistrict: req.query.studdistrict,
      pin: req.query.pin,
      prevprog: req.query.prevprog,
      lastyear: req.query.lastyear,
      prevregn: req.query.prevregn,
      prevyear: req.query.prevyear,
      prevpercent: req.query.prevpercent,
      previnscode: req.query.previnscode,
      previnscode: req.query.previnscode,
      qualmode: req.query.qualmode,
      hostel: req.query.hostel,
      hjoindate: req.query.hjoindate,
      hleavedate: req.query.hleavedate,
      hosteltype: req.query.hosteltype,
      bank: req.query.bank,
      account: req.query.account,
      accname: req.query.accname,
      acctype: req.query.acctype,
      ifsc: req.query.ifsc,
      branch: req.query.branch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateanmstudnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await anmstudnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteanmstudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await anmstudnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 22 2023

exports.getamastudnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getamastudnewbyunivid = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amastudnewbydep = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amastudnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amastudnewdocs = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amastudnewlinks = async (req, res) => {
  try {
    const lcat1233 = await amastudnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamastudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amastudnew.create({
      name: req.query.name,
      colid: req.query.colid,
      univid: req.query.univid,
      user: req.query.user,
      studbatch: req.query.studbatch,
      collegecode: req.query.collegecode,
      college: req.query.college,
      coldistrict: req.query.coldistrict,
      coltype: req.query.coltype,
      admissionyear: req.query.admissionyear,
      photo: req.query.photo,
      email: req.query.email,
      regno: req.query.regno,
      rollno: req.query.rollno,
      student: req.query.student,
      dateofbirth: req.query.dateofbirth,
      gender: req.query.gender,
      religion: req.query.religion,
      category: req.query.category,
      caste: req.query.caste,
      state: req.query.state,
      nationality: req.query.nationality,
      mobile: req.query.mobile,
      aadhar: req.query.aadhar,
      blood: req.query.blood,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      duration: req.query.duration,
      stream: req.query.stream,
      medium: req.query.medium,
      shift: req.query.shift,
      section: req.query.section,
      admissiondate: req.query.admissiondate,
      joiningdate: req.query.joiningdate,
      counselling: req.query.counselling,
      studstatus: req.query.studstatus,
      admmode: req.query.admmode,
      lateral: req.query.lateral,
      father: req.query.father,
      fincome: req.query.fincome,
      foccu: req.query.foccu,
      mother: req.query.mother,
      mincome: req.query.mincome,
      moccu: req.query.moccu,
      guardian: req.query.guardian,
      pmobile: req.query.pmobile,
      orphan: req.query.orphan,
      annualinc: req.query.annualinc,
      cardtype: req.query.cardtype,
      cardno: req.query.cardno,
      diffable: req.query.diffable,
      diffabtype: req.query.diffabtype,
      diffpercent: req.query.diffpercent,
      udidno: req.query.udidno,
      firstgrad: req.query.firstgrad,
      spcat: req.query.spcat,
      emisno: req.query.emisno,
      hscboard: req.query.hscboard,
      hscregno: req.query.hscregno,
      language: req.query.language,
      hscmarks: req.query.hscmarks,
      hscscholarship: req.query.hscscholarship,
      lastschol: req.query.lastschol,
      school: req.query.school,
      govtschool: req.query.govtschool,
      tamil: req.query.tamil,
      address: req.query.address,
      village: req.query.village,
      studdistrict: req.query.studdistrict,
      pin: req.query.pin,
      prevprog: req.query.prevprog,
      lastyear: req.query.lastyear,
      prevregn: req.query.prevregn,
      prevyear: req.query.prevyear,
      prevpercent: req.query.prevpercent,
      previnscode: req.query.previnscode,
      previnsname: req.query.previnsname,
      qualmode: req.query.qualmode,
      hostel: req.query.hostel,
      hjoindate: req.query.hjoindate,
      hleavedate: req.query.hleavedate,
      hosteltype: req.query.hosteltype,
      bank: req.query.bank,
      account: req.query.account,
      accname: req.query.accname,
      acctype: req.query.acctype,
      ifsc: req.query.ifsc,
      branch: req.query.branch,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamastudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amastudnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      college: req.query.college,
      coldistrict: req.query.coldistrict,
      coltype: req.query.coltype,
      admissionyear: req.query.admissionyear,
      photo: req.query.photo,
      email: req.query.email,
      regno: req.query.regno,
      rollno: req.query.rollno,
      student: req.query.student,
      dateofbirth: req.query.dateofbirth,
      gender: req.query.gender,
      religion: req.query.religion,
      category: req.query.category,
      caste: req.query.caste,
      state: req.query.state,
      nationality: req.query.nationality,
      mobile: req.query.mobile,
      aadhar: req.query.aadhar,
      blood: req.query.blood,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      duration: req.query.duration,
      stream: req.query.stream,
      medium: req.query.medium,
      shift: req.query.shift,
      section: req.query.section,
      admissiondate: req.query.admissiondate,
      joiningdate: req.query.joiningdate,
      counselling: req.query.counselling,
      studstatus: req.query.studstatus,
      admmode: req.query.admmode,
      lateral: req.query.lateral,
      father: req.query.father,
      fincome: req.query.fincome,
      foccu: req.query.foccu,
      mother: req.query.mother,
      mincome: req.query.mincome,
      moccu: req.query.moccu,
      guardian: req.query.guardian,
      pmobile: req.query.pmobile,
      orphan: req.query.orphan,
      annualinc: req.query.annualinc,
      cardtype: req.query.cardtype,
      cardno: req.query.cardno,
      diffable: req.query.diffable,
      diffabtype: req.query.diffabtype,
      diffpercent: req.query.diffpercent,
      udidno: req.query.udidno,
      firstgrad: req.query.firstgrad,
      spcat: req.query.spcat,
      emisno: req.query.emisno,
      hscboard: req.query.hscboard,
      hscregno: req.query.hscregno,
      language: req.query.language,
      hscmarks: req.query.hscmarks,
      hscscholarship: req.query.hscscholarship,
      lastschol: req.query.lastschol,
      school: req.query.school,
      govtschool: req.query.govtschool,
      tamil: req.query.tamil,
      address: req.query.address,
      village: req.query.village,
      studdistrict: req.query.studdistrict,
      pin: req.query.pin,
      prevprog: req.query.prevprog,
      lastyear: req.query.lastyear,
      prevregn: req.query.prevregn,
      prevyear: req.query.prevyear,
      prevpercent: req.query.prevpercent,
      previnscode: req.query.previnscode,
      previnsname: req.query.previnsname,
      qualmode: req.query.qualmode,
      hostel: req.query.hostel,
      hjoindate: req.query.hjoindate,
      hleavedate: req.query.hleavedate,
      hosteltype: req.query.hosteltype,
      bank: req.query.bank,
      account: req.query.account,
      accname: req.query.accname,
      acctype: req.query.acctype,
      ifsc: req.query.ifsc,
      branch: req.query.branch,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamastudnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amastudnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamastudnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amastudnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 22 2023 1

exports.getaffcolprogbyfac = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affcolprogbycollege = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          collegecode: req.query.collegecode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affcolprogbydep = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affcolprogbyprog = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affcolprogdocs = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affcolproglinks = async (req, res) => {
  try {
    const lcat1233 = await affcolprog.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaffcolprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await affcolprog.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      college: req.query.college,
      collegeid: req.query.collegeid,
      department: req.query.department,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffcolprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await affcolprog.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      college: req.query.college,
      collegeid: req.query.collegeid,
      department: req.query.department,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffcolprogcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await affcolprog.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaffcolprogbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await affcolprog.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaffproglistbyfac = async (req, res) => {
  try {
    const lcat1233 = await affproglist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affproglistbydep = async (req, res) => {
  try {
    const lcat1233 = await affproglist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affproglistbyprog = async (req, res) => {
  try {
    const lcat1233 = await affproglist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affproglistdocs = async (req, res) => {
  try {
    const lcat1233 = await affproglist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.affproglistlinks = async (req, res) => {
  try {
    const lcat1233 = await affproglist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaffproglistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await affproglist.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      stream: req.query.stream,
      department: req.query.department,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffproglistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await affproglist.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      stream: req.query.stream,
      department: req.query.department,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaffproglistcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await affproglist.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaffproglistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await affproglist.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getInstitutionsbyfac = async (req, res) => {
  try {
    const lcat1233 = await Institutions.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.Institutionsbydep = async (req, res) => {
  try {
    const lcat1233 = await Institutions.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.Institutionsbyprog = async (req, res) => {
  try {
    const lcat1233 = await Institutions.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.Institutionsdocs = async (req, res) => {
  try {
    const lcat1233 = await Institutions.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          admincolid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.Institutionslinks = async (req, res) => {
  try {
    const lcat1233 = await Institutions.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createInstitutionsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await Institutions.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institutionname: req.query.institutionname,
      institutioncode: req.query.institutioncode,
      address: req.query.address,
      state: req.query.state,
      district: req.query.district,
      type: req.query.type,
      logo: req.query.logo,
      status: req.query.status,
      admincolid: req.query.admincolid,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateInstitutionsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await Institutions.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institutionname: req.query.institutionname,
      institutioncode: req.query.institutioncode,
      address: req.query.address,
      state: req.query.state,
      district: req.query.district,
      type: req.query.type,
      logo: req.query.logo,
      status: req.query.status,
      admincolid: req.query.admincolid,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateInstitutionscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await Institutions.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteInstitutionsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await Institutions.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 29 2023

exports.getrmsucoldetabyfac = async (req, res) => {
  try {
    const lcat1233 = await rmsucoldeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoldetabydep = async (req, res) => {
  try {
    const lcat1233 = await rmsucoldeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoldetabyprog = async (req, res) => {
  try {
    const lcat1233 = await rmsucoldeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoldetadocs = async (req, res) => {
  try {
    const lcat1233 = await rmsucoldeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoldetalinks = async (req, res) => {
  try {
    const lcat1233 = await rmsucoldeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatermsucoldetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rmsucoldeta.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      col_name: req.query.col_name,
      address: req.query.address,
      pincode: req.query.pincode,
      estab_year: req.query.estab_year,
      instu_type: req.query.instu_type,
      instu_type_code: req.query.instu_type_code,
      isInsti_auto: req.query.isInsti_auto,
      isInsti_approved: req.query.isInsti_approved,
      ref: req.query.ref,
      minority: req.query.minority,
      tele_no: req.query.tele_no,
      mob_no: req.query.mob_no,
      fax_no: req.query.fax_no,
      email: req.query.email,
      web_add: req.query.web_add,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsucoldetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rmsucoldeta.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      col_name: req.query.col_name,
      address: req.query.address,
      pincode: req.query.pincode,
      estab_year: req.query.estab_year,
      instu_type: req.query.instu_type,
      instu_type_code: req.query.instu_type_code,
      isInsti_auto: req.query.isInsti_auto,
      isInsti_approved: req.query.isInsti_approved,
      ref: req.query.ref,
      minority: req.query.minority,
      tele_no: req.query.tele_no,
      mob_no: req.query.mob_no,
      fax_no: req.query.fax_no,
      email: req.query.email,
      web_add: req.query.web_add,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsucoldetacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rmsucoldeta.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletermsucoldetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rmsucoldeta.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrmsunirfbyfac = async (req, res) => {
  try {
    const lcat1233 = await rmsunirf.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsunirfbydep = async (req, res) => {
  try {
    const lcat1233 = await rmsunirf.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsunirfbyprog = async (req, res) => {
  try {
    const lcat1233 = await rmsunirf.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsunirfdocs = async (req, res) => {
  try {
    const lcat1233 = await rmsunirf.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsunirflinks = async (req, res) => {
  try {
    const lcat1233 = await rmsunirf.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatermsunirfbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rmsunirf.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      academicyear: req.query.academicyear,
      type: req.query.type,
      grade: req.query.grade,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsunirfbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rmsunirf.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      academicyear: req.query.academicyear,
      type: req.query.type,
      grade: req.query.grade,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsunirfcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rmsunirf.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletermsunirfbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rmsunirf.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuaddetabyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetabydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetabyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetadocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetalinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuaddetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuaddeta.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuaddetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuaddeta.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuaddetacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuaddeta.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuaddetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuaddeta.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmucoldetaexbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaex.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaexbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaex.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaexbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaex.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaexdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaex.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaexlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaex.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmucoldetaexbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmucoldetaex.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      inclusec: req.query.inclusec,
      letno: req.query.letno,
      entdate: req.query.entdate,
      inclusec12: req.query.inclusec12,
      letno2: req.query.letno2,
      entdate2: req.query.entdate2,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmucoldetaexbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmucoldetaex.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      inclusec: req.query.inclusec,
      letno: req.query.letno,
      entdate: req.query.entdate,
      inclusec12: req.query.inclusec12,
      letno2: req.query.letno2,
      entdate2: req.query.entdate2,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmucoldetaexcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmucoldetaex.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmucoldetaexbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmucoldetaex.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuprincdetabyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuprincdeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprincdetabydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuprincdeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprincdetabyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuprincdeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprincdetadocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuprincdeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprincdetalinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuprincdeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuprincdetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuprincdeta.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      prinname: req.query.prinname,
      bday: req.query.bday,
      age: req.query.age,
      fatherName: req.query.fatherName,
      address: req.query.address,
      district: req.query.district,
      officeno: req.query.officeno,
      faxno: req.query.faxno,
      mobno: req.query.mobno,
      email: req.query.email,
      ugprogram: req.query.ugprogram,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuprincdetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuprincdeta.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      prinname: req.query.prinname,
      bday: req.query.bday,
      age: req.query.age,
      fatherName: req.query.fatherName,
      address: req.query.address,
      district: req.query.district,
      officeno: req.query.officeno,
      faxno: req.query.faxno,
      mobno: req.query.mobno,
      email: req.query.email,
      ugprogram: req.query.ugprogram,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuprincdetacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuprincdeta.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuprincdetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuprincdeta.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmugovcouncilbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmugovcouncil.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmugovcouncilbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmugovcouncil.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmugovcouncilbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmugovcouncil.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmugovcouncildocs = async (req, res) => {
  try {
    const lcat1233 = await rsmugovcouncil.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmugovcouncillinks = async (req, res) => {
  try {
    const lcat1233 = await rsmugovcouncil.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmugovcouncilbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmugovcouncil.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      email: req.query.email,
      mobile: req.query.mobile,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmugovcouncilbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmugovcouncil.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      email: req.query.email,
      mobile: req.query.mobile,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmugovcouncilcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmugovcouncil.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmugovcouncilbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmugovcouncil.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuragcomtbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuragcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragcomtbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuragcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragcomtbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuragcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragcomtdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuragcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragcomtlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuragcomt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuragcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuragcomt.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      designation: req.query.designation,
      email: req.query.email,
      mobile: req.query.mobile,
      telephone: req.query.telephone,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuragcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuragcomt.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      designation: req.query.designation,
      email: req.query.email,
      mobile: req.query.mobile,
      telephone: req.query.telephone,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuragcomtcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuragcomt.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuragcomtbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuragcomt.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuragsquadbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuragsquad.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragsquadbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuragsquad.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragsquadbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuragsquad.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragsquaddocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuragsquad.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuragsquadlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuragsquad.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuragsquadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuragsquad.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      designation: req.query.designation,
      email: req.query.email,
      mobile: req.query.mobile,
      telephone: req.query.telephone,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuragsquadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuragsquad.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      position: req.query.position,
      title: req.query.title,
      name: req.query.name,
      designation: req.query.designation,
      email: req.query.email,
      mobile: req.query.mobile,
      telephone: req.query.telephone,
      address: req.query.address,
      address2: req.query.address2,
      district: req.query.district,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuragsquadcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuragsquad.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuragsquadbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuragsquad.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmubankacntsbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmubankacnts.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubankacntsbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmubankacnts.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubankacntsbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmubankacnts.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubankacntsdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmubankacnts.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubankacntslinks = async (req, res) => {
  try {
    const lcat1233 = await rsmubankacnts.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmubankacntsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmubankacnts.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      accountype: req.query.accountype,
      bankname: req.query.bankname,
      branch: req.query.branch,
      accountno: req.query.accountno,
      isfc: req.query.isfc,
      lastbalance: req.query.lastbalance,
      lastacademic: req.query.lastacademic,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmubankacntsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmubankacnts.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      accountype: req.query.accountype,
      bankname: req.query.bankname,
      branch: req.query.branch,
      accountno: req.query.accountno,
      isfc: req.query.isfc,
      lastbalance: req.query.lastbalance,
      lastacademic: req.query.lastacademic,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmubankacntscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmubankacnts.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmubankacntsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmubankacnts.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmudepositbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmudeposit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmudepositbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmudeposit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmudepositbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmudeposit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmudepositdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmudeposit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmudepositlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmudeposit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmudepositbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmudeposit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      deposits: req.query.deposits,
      holderName: req.query.holderName,
      intiName: req.query.intiName,
      brancg: req.query.brancg,
      refno: req.query.refno,
      amount: req.query.amount,
      maturityDate: req.query.maturityDate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmudepositbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmudeposit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      deposits: req.query.deposits,
      holderName: req.query.holderName,
      intiName: req.query.intiName,
      brancg: req.query.brancg,
      refno: req.query.refno,
      amount: req.query.amount,
      maturityDate: req.query.maturityDate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmudepositcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmudeposit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmudepositbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmudeposit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuendowmentbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuendowmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuendowment.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amount: req.query.amount,
      program: req.query.program,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuendowment.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amount: req.query.amount,
      program: req.query.program,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowmentcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuendowment.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuendowmentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuendowment.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmubuildetabyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmubuildeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubuildetabydep = async (req, res) => {
  try {
    const lcat1233 = await rsmubuildeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubuildetabyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmubuildeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubuildetadocs = async (req, res) => {
  try {
    const lcat1233 = await rsmubuildeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmubuildetalinks = async (req, res) => {
  try {
    const lcat1233 = await rsmubuildeta.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmubuildetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmubuildeta.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      floor: req.query.floor,
      room: req.query.room,
      size: req.query.size,
      assigned: req.query.assigned,
      classroom: req.query.classroom,
      classroom2: req.query.classroom2,
      lab: req.query.lab,
      lab2: req.query.lab2,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmubuildetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmubuildeta.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      name: req.query.name,
      floor: req.query.floor,
      room: req.query.room,
      size: req.query.size,
      assigned: req.query.assigned,
      classroom: req.query.classroom,
      classroom2: req.query.classroom2,
      lab: req.query.lab,
      lab2: req.query.lab2,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmubuildetacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmubuildeta.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmubuildetabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmubuildeta.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmufeduqualifbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmufeduqualif.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufeduqualifbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmufeduqualif.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufeduqualifbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmufeduqualif.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufeduqualifdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmufeduqualif.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufeduqualiflinks = async (req, res) => {
  try {
    const lcat1233 = await rsmufeduqualif.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmufeduqualifbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmufeduqualif.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Fact_name: req.query.Fact_name,
      mail: req.query.mail,
      mob: req.query.mob,
      sslc: req.query.sslc,
      hsc: req.query.hsc,
      dip: req.query.dip,
      degree: req.query.degree,
      ug_special: req.query.ug_special,
      college: req.query.college,
      Yop_ug: req.query.Yop_ug,
      Percentage_UG: req.query.Percentage_UG,
      Pg_special: req.query.Pg_special,
      university: req.query.university,
      Yop_pg: req.query.Yop_pg,
      Percentage_PG: req.query.Percentage_PG,
      Phd_Date_Awarded: req.query.Phd_Date_Awarded,
      Mphill_Date_Awarded: req.query.Mphill_Date_Awarded,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufeduqualifbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmufeduqualif.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Fact_name: req.query.Fact_name,
      mail: req.query.mail,
      mob: req.query.mob,
      sslc: req.query.sslc,
      hsc: req.query.hsc,
      dip: req.query.dip,
      degree: req.query.degree,
      ug_special: req.query.ug_special,
      college: req.query.college,
      Yop_ug: req.query.Yop_ug,
      Percentage_UG: req.query.Percentage_UG,
      Pg_special: req.query.Pg_special,
      university: req.query.university,
      Yop_pg: req.query.Yop_pg,
      Percentage_PG: req.query.Percentage_PG,
      Phd_Date_Awarded: req.query.Phd_Date_Awarded,
      Mphill_Date_Awarded: req.query.Mphill_Date_Awarded,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufeduqualifcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmufeduqualif.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmufeduqualifbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmufeduqualif.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmufacnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewlinks = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmufacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmufacnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      sex: req.query.sex,
      grossPay: req.query.grossPay,
      dep_name: req.query.dep_name,
      fact_name: req.query.fact_name,
      add1: req.query.add1,
      add2: req.query.add2,
      dist: req.query.dist,
      mob_num: req.query.mob_num,
      email: req.query.email,
      community: req.query.community,
      pan_no: req.query.pan_no,
      pass_no: req.query.pass_no,
      aadh_no: req.query.aadh_no,
      dob: req.query.dob,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmufacnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      sex: req.query.sex,
      grossPay: req.query.grossPay,
      dep_name: req.query.dep_name,
      fact_name: req.query.fact_name,
      add1: req.query.add1,
      add2: req.query.add2,
      dist: req.query.dist,
      mob_num: req.query.mob_num,
      email: req.query.email,
      community: req.query.community,
      pan_no: req.query.pan_no,
      pass_no: req.query.pass_no,
      aadh_no: req.query.aadh_no,
      dob: req.query.dob,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmufacnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmufacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmufacnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuontstaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuontstaffbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuontstaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuontstaffdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuontstafflinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuontstaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuontstaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuontstaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuontstaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuontstaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrmsucoursebyfac = async (req, res) => {
  try {
    const lcat1233 = await rmsucourse.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoursebydep = async (req, res) => {
  try {
    const lcat1233 = await rmsucourse.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoursebyprog = async (req, res) => {
  try {
    const lcat1233 = await rmsucourse.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucoursedocs = async (req, res) => {
  try {
    const lcat1233 = await rmsucourse.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsucourselinks = async (req, res) => {
  try {
    const lcat1233 = await rmsucourse.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatermsucoursebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rmsucourse.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      category: req.query.category,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsucoursebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rmsucourse.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      category: req.query.category,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsucoursecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rmsucourse.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletermsucoursebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rmsucourse.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsunontstaffbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsunontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsunontstaffbydep = async (req, res) => {
  try {
    const lcat1233 = await rsunontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsunontstaffbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsunontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsunontstaffdocs = async (req, res) => {
  try {
    const lcat1233 = await rsunontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsunontstafflinks = async (req, res) => {
  try {
    const lcat1233 = await rsunontstaff.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersunontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsunontstaff.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      category: req.query.category,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersunontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsunontstaff.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      category: req.query.category,
      dept: req.query.dept,
      title: req.query.title,
      fname: req.query.fname,
      lname: req.query.lname,
      dsgntn: req.query.dsgntn,
      degree: req.query.degree,
      doj: req.query.doj,
      Experience: req.query.Experience,
      dob: req.query.dob,
      age: req.query.age,
      pay_scale: req.query.pay_scale,
      basic_pay: req.query.basic_pay,
      gross_pay: req.query.gross_pay,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersunontstaffcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsunontstaff.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersunontstaffbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsunontstaff.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 30 2023

exports.getrsmuaddetacngbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetacngbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetacngbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetacngdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuaddetacnglinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuaddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuaddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuaddetacng.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuaddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuaddetacng.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuaddetacngcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuaddetacng.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuaddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuaddetacng.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrmsutrustdatacngbyfac = async (req, res) => {
  try {
    const lcat1233 = await rmsutrustdatacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsutrustdatacngbydep = async (req, res) => {
  try {
    const lcat1233 = await rmsutrustdatacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsutrustdatacngbyprog = async (req, res) => {
  try {
    const lcat1233 = await rmsutrustdatacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsutrustdatacngdocs = async (req, res) => {
  try {
    const lcat1233 = await rmsutrustdatacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rmsutrustdatacnglinks = async (req, res) => {
  try {
    const lcat1233 = await rmsutrustdatacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatermsutrustdatacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rmsutrustdatacng.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trusthead: req.query.trusthead,
      trustname: req.query.trustname,
      address: req.query.address,
      address2: req.query.address2,
      regno: req.query.regno,
      dateofreg: req.query.dateofreg,
      chairmanname: req.query.chairmanname,
      fathername: req.query.fathername,
      email: req.query.email,
      mobno: req.query.mobno,
      restelno: req.query.restelno,
      trustemail: req.query.trustemail,
      trustno: req.query.trustno,
      offtelno: req.query.offtelno,
      faxno: req.query.faxno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsutrustdatacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rmsutrustdatacng.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trusthead: req.query.trusthead,
      trustname: req.query.trustname,
      address: req.query.address,
      address2: req.query.address2,
      regno: req.query.regno,
      dateofreg: req.query.dateofreg,
      chairmanname: req.query.chairmanname,
      fathername: req.query.fathername,
      email: req.query.email,
      mobno: req.query.mobno,
      restelno: req.query.restelno,
      trustemail: req.query.trustemail,
      trustno: req.query.trustno,
      offtelno: req.query.offtelno,
      faxno: req.query.faxno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatermsutrustdatacngcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rmsutrustdatacng.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletermsutrustdatacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rmsutrustdatacng.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmufacnewcngbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewcngbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewcngbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewcngdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewcnglinks = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmufacnewcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmufacnewcng.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      sex: req.query.sex,
      grosspay: req.query.grosspay,
      depname: req.query.depname,
      factname: req.query.factname,
      add1: req.query.add1,
      add2: req.query.add2,
      dist: req.query.dist,
      mobnum: req.query.mobnum,
      email: req.query.email,
      community: req.query.community,
      panno: req.query.panno,
      passno: req.query.passno,
      aadhno: req.query.aadhno,
      dob: req.query.dob,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmufacnewcng.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      sex: req.query.sex,
      grosspay: req.query.grosspay,
      depname: req.query.depname,
      factname: req.query.factname,
      add1: req.query.add1,
      add2: req.query.add2,
      dist: req.query.dist,
      mobnum: req.query.mobnum,
      email: req.query.email,
      community: req.query.community,
      panno: req.query.panno,
      passno: req.query.passno,
      aadhno: req.query.aadhno,
      dob: req.query.dob,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewcngcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmufacnewcng.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmufacnewcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmufacnewcng.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuendowmentcngbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowmentcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentcngbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowmentcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentcngbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowmentcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentcngdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowmentcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowmentcnglinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowmentcng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuendowmentcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuendowmentcng.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amountrs: req.query.amountrs,
      program: req.query.program,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowmentcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuendowmentcng.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amountrs: req.query.amountrs,
      program: req.query.program,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowmentcngcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuendowmentcng.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuendowmentcngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuendowmentcng.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmulanddetacngbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmulanddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmulanddetacngbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmulanddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmulanddetacngbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmulanddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmulanddetacngdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmulanddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmulanddetacnglinks = async (req, res) => {
  try {
    const lcat1233 = await rsmulanddetacng.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmulanddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmulanddetacng.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      location: req.query.location,
      location2: req.query.location2,
      disctict: req.query.disctict,
      taluk: req.query.taluk,
      village: req.query.village,
      place: req.query.place,
      pincode: req.query.pincode,
      documentno: req.query.documentno,
      datea: req.query.datea,
      survery: req.query.survery,
      builtarea: req.query.builtarea,
      landmark: req.query.landmark,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmulanddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmulanddetacng.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      location: req.query.location,
      location2: req.query.location2,
      disctict: req.query.disctict,
      taluk: req.query.taluk,
      village: req.query.village,
      place: req.query.place,
      pincode: req.query.pincode,
      documentno: req.query.documentno,
      datea: req.query.datea,
      survery: req.query.survery,
      builtarea: req.query.builtarea,
      landmark: req.query.landmark,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmulanddetacngcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmulanddetacng.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmulanddetacngbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmulanddetacng.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jul 2 2023

exports.getuserbyfac = async (req, res) => {
  try {
    const lcat1233 = await user.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.userbydep = async (req, res) => {
  try {
    const lcat1233 = await user.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.userbyprog = async (req, res) => {
  try {
    const lcat1233 = await user.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.userdocs = async (req, res) => {
  try {
    const lcat1233 = await user.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.userlinks = async (req, res) => {
  try {
    const lcat1233 = await user.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createuserbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await user.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      email: req.query.email,
      phone: req.query.phone,
      password: req.query.password,
      role: req.query.role,
      regno: req.query.regno,
      programcode: req.query.programcode,
      admissionyear: req.query.admissionyear,
      semester: req.query.semester,
      section: req.query.section,
      gender: req.query.gender,
      department: req.query.department,
      category: req.query.category,
      status: req.query.status,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateuserbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await user.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      email: req.query.email,
      phone: req.query.phone,
      password: req.query.password,
      role: req.query.role,
      regno: req.query.regno,
      programcode: req.query.programcode,
      admissionyear: req.query.admissionyear,
      semester: req.query.semester,
      section: req.query.section,
      gender: req.query.gender,
      department: req.query.department,
      category: req.query.category,
      status: req.query.status,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateusercomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await user.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteuserbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await user.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jul 3 2023 1

exports.getrsmuadmupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuadmup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadmupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuadmup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadmupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuadmup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadmupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuadmup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadmuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuadmup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuadmupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuadmup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      progcode: req.query.progcode,
      prognature: req.query.prognature,
      batch: req.query.batch,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuadmupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuadmup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      progcode: req.query.progcode,
      prognature: req.query.prognature,
      batch: req.query.batch,
      acayear: req.query.acayear,
      currfstyrStudent: req.query.currfstyrStudent,
      currscndyrstu: req.query.currscndyrstu,
      currthrdyrstu: req.query.currthrdyrstu,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuadmupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuadmup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuadmupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuadmup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmucoldetaupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetaupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmucoldetauplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmucoldetaup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmucoldetaupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmucoldetaup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      col_name: req.query.col_name,
      address: req.query.address,
      pincode: req.query.pincode,
      estab_year: req.query.estab_year,
      instu_type: req.query.instu_type,
      instu_type_code: req.query.instu_type_code,
      isInsti_auto: req.query.isInsti_auto,
      isInsti_approved: req.query.isInsti_approved,
      ref: req.query.ref,
      minority: req.query.minority,
      tele_no: req.query.tele_no,
      mob_no: req.query.mob_no,
      fax_no: req.query.fax_no,
      email: req.query.email,
      web_add: req.query.web_add,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmucoldetaupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmucoldetaup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      col_name: req.query.col_name,
      address: req.query.address,
      pincode: req.query.pincode,
      estab_year: req.query.estab_year,
      instu_type: req.query.instu_type,
      instu_type_code: req.query.instu_type_code,
      isInsti_auto: req.query.isInsti_auto,
      isInsti_approved: req.query.isInsti_approved,
      ref: req.query.ref,
      minority: req.query.minority,
      tele_no: req.query.tele_no,
      mob_no: req.query.mob_no,
      fax_no: req.query.fax_no,
      email: req.query.email,
      web_add: req.query.web_add,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmucoldetaupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmucoldetaup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmucoldetaupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmucoldetaup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmutrustupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmutrustup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmutrustupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmutrustup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmutrustupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmutrustup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmutrustupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmutrustup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmutrustuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmutrustup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmutrustupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmutrustup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustname: req.query.trustname,
      address: req.query.address,
      district: req.query.district,
      regno: req.query.regno,
      dateofreg: req.query.dateofreg,
      chairmanname: req.query.chairmanname,
      fathername: req.query.fathername,
      chairemail: req.query.chairemail,
      mobno: req.query.mobno,
      restelno: req.query.restelno,
      trustemail: req.query.trustemail,
      trustno: req.query.trustno,
      offtelno: req.query.offtelno,
      faxno: req.query.faxno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmutrustupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmutrustup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      trustname: req.query.trustname,
      address: req.query.address,
      district: req.query.district,
      regno: req.query.regno,
      dateofreg: req.query.dateofreg,
      chairmanname: req.query.chairmanname,
      fathername: req.query.fathername,
      chairemail: req.query.chairemail,
      mobno: req.query.mobno,
      restelno: req.query.restelno,
      trustemail: req.query.trustemail,
      trustno: req.query.trustno,
      offtelno: req.query.offtelno,
      faxno: req.query.faxno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmutrustupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmutrustup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmutrustupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmutrustup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuprinupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuprinup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprinupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuprinup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprinupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuprinup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprinupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuprinup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuprinuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuprinup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuprinupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuprinup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      prinname: req.query.prinname,
      bday: req.query.bday,
      age: req.query.age,
      fatherName: req.query.fatherName,
      address: req.query.address,
      district: req.query.district,
      officeno: req.query.officeno,
      faxno: req.query.faxno,
      mobno: req.query.mobno,
      email: req.query.email,
      ugprogram: req.query.ugprogram,
      pgdegree: req.query.pgdegree,
      ugmarks: req.query.ugmarks,
      pgmarks: req.query.pgmarks,
      phddate: req.query.phddate,
      joinDate: req.query.joinDate,
      panno: req.query.panno,
      bankno: req.query.bankno,
      adharno: req.query.adharno,
      ifsccode: req.query.ifsccode,
      qualifyapproval: req.query.qualifyapproval,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuprinupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuprinup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      prinname: req.query.prinname,
      bday: req.query.bday,
      age: req.query.age,
      fatherName: req.query.fatherName,
      address: req.query.address,
      district: req.query.district,
      officeno: req.query.officeno,
      faxno: req.query.faxno,
      mobno: req.query.mobno,
      email: req.query.email,
      ugprogram: req.query.ugprogram,
      pgdegree: req.query.pgdegree,
      ugmarks: req.query.ugmarks,
      pgmarks: req.query.pgmarks,
      phddate: req.query.phddate,
      joinDate: req.query.joinDate,
      panno: req.query.panno,
      bankno: req.query.bankno,
      adharno: req.query.adharno,
      ifsccode: req.query.ifsccode,
      qualifyapproval: req.query.qualifyapproval,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuprinupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuprinup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuprinupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuprinup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuendowupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuendowuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuendowup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuendowupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuendowup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amountrs: req.query.amountrs,
      program: req.query.program,
      batch: req.query.batch,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuendowup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      createdwith: req.query.createdwith,
      depointbank: req.query.depointbank,
      branchname: req.query.branchname,
      amountrs: req.query.amountrs,
      program: req.query.program,
      batch: req.query.batch,
      instrument: req.query.instrument,
      instrumentDate: req.query.instrumentDate,
      expirydate: req.query.expirydate,
      finanreserve: req.query.finanreserve,
      manddexp: req.query.manddexp,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuendowupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuendowup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuendowupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuendowup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmuadcourupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmuadcourup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadcourupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmuadcourup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadcourupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmuadcourup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadcourupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmuadcourup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmuadcouruplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmuadcourup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmuadcourupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmuadcourup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      batch: req.query.batch,
      introduction: req.query.introduction,
      accredation: req.query.accredation,
      affiliation: req.query.affiliation,
      sanctioned: req.query.sanctioned,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuadcourupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmuadcourup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      degree: req.query.degree,
      batch: req.query.batch,
      introduction: req.query.introduction,
      accredation: req.query.accredation,
      affiliation: req.query.affiliation,
      sanctioned: req.query.sanctioned,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmuadcourupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmuadcourup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmuadcourupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmuadcourup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmufacnewupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacnewuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmufacnewup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmufacnewupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmufacnewup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      fname: req.query.fname,
      sex: req.query.sex,
      dob: req.query.dob,
      depname: req.query.depname,
      resadd: req.query.resadd,
      ressaddd: req.query.ressaddd,
      dist: req.query.dist,
      mobnum: req.query.mobnum,
      email: req.query.email,
      com: req.query.com,
      panno: req.query.panno,
      aadhno: req.query.aadhno,
      ifsccode: req.query.ifsccode,
      acnum: req.query.acnum,
      grosspay: req.query.grosspay,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmufacnewup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      fname: req.query.fname,
      sex: req.query.sex,
      dob: req.query.dob,
      depname: req.query.depname,
      resadd: req.query.resadd,
      ressaddd: req.query.ressaddd,
      dist: req.query.dist,
      mobnum: req.query.mobnum,
      email: req.query.email,
      com: req.query.com,
      panno: req.query.panno,
      aadhno: req.query.aadhno,
      ifsccode: req.query.ifsccode,
      acnum: req.query.acnum,
      grosspay: req.query.grosspay,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacnewupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmufacnewup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmufacnewupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmufacnewup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmufacqualifupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmufacqualifup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacqualifupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmufacqualifup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacqualifupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmufacqualifup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacqualifupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmufacqualifup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmufacqualifuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmufacqualifup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmufacqualifupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmufacqualifup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      fname: req.query.fname,
      sslcyop: req.query.sslcyop,
      hscyop: req.query.hscyop,
      dipyop: req.query.dipyop,
      ugyop: req.query.ugyop,
      ugspecial: req.query.ugspecial,
      pgyop: req.query.pgyop,
      pgspecial: req.query.pgspecial,
      awardmphill: req.query.awardmphill,
      awardphd: req.query.awardphd,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacqualifupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmufacqualifup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      fname: req.query.fname,
      sslcyop: req.query.sslcyop,
      hscyop: req.query.hscyop,
      dipyop: req.query.dipyop,
      ugyop: req.query.ugyop,
      ugspecial: req.query.ugspecial,
      pgyop: req.query.pgyop,
      pgspecial: req.query.pgspecial,
      awardmphill: req.query.awardmphill,
      awardphd: req.query.awardphd,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmufacqualifupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmufacqualifup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmufacqualifupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmufacqualifup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getrsmunontechupbyfac = async (req, res) => {
  try {
    const lcat1233 = await rsmunontechup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmunontechupbydep = async (req, res) => {
  try {
    const lcat1233 = await rsmunontechup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmunontechupbyprog = async (req, res) => {
  try {
    const lcat1233 = await rsmunontechup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmunontechupdocs = async (req, res) => {
  try {
    const lcat1233 = await rsmunontechup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.rsmunontechuplinks = async (req, res) => {
  try {
    const lcat1233 = await rsmunontechup.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creatersmunontechupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await rsmunontechup.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ctg: req.query.ctg,
      dept: req.query.dept,
      dob: req.query.dob,
      sex: req.query.sex,
      doj: req.query.doj,
      edqual: req.query.edqual,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmunontechupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await rsmunontechup.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      ctg: req.query.ctg,
      dept: req.query.dept,
      dob: req.query.dob,
      sex: req.query.sex,
      doj: req.query.doj,
      edqual: req.query.edqual,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatersmunontechupcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await rsmunontechup.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletersmunontechupbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await rsmunontechup.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jul 11 2023

exports.getnlibtable1byfac = async (req, res) => {
  try {
    const lcat1233 = await nlibtable1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable1bydep = async (req, res) => {
  try {
    const lcat1233 = await nlibtable1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable1byprog = async (req, res) => {
  try {
    const lcat1233 = await nlibtable1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable1docs = async (req, res) => {
  try {
    const lcat1233 = await nlibtable1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable1links = async (req, res) => {
  try {
    const lcat1233 = await nlibtable1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnlibtable1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nlibtable1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      yrBudget: req.query.yrBudget,
      totArea: req.query.totArea,
      arReadingRoom: req.query.arReadingRoom,
      noOfRacks: req.query.noOfRacks,
      noOfComp: req.query.noOfComp,
      noOfCompWithInternet: req.query.noOfCompWithInternet,
      internetCon: req.query.internetCon,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenlibtable1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nlibtable1.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      yrBudget: req.query.yrBudget,
      totArea: req.query.totArea,
      arReadingRoom: req.query.arReadingRoom,
      noOfRacks: req.query.noOfRacks,
      noOfComp: req.query.noOfComp,
      noOfCompWithInternet: req.query.noOfCompWithInternet,
      internetCon: req.query.internetCon,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenlibtable1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nlibtable1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenlibtable1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nlibtable1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnlibtable2byfac = async (req, res) => {
  try {
    const lcat1233 = await nlibtable2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable2bydep = async (req, res) => {
  try {
    const lcat1233 = await nlibtable2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable2byprog = async (req, res) => {
  try {
    const lcat1233 = await nlibtable2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable2docs = async (req, res) => {
  try {
    const lcat1233 = await nlibtable2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nlibtable2links = async (req, res) => {
  try {
    const lcat1233 = await nlibtable2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnlibtable2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nlibtable2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      noOfTitles: req.query.noOfTitles,
      noOfBooks: req.query.noOfBooks,
      noOfBooksForRef: req.query.noOfBooksForRef,
      noOfEbooks: req.query.noOfEbooks,
      noOfJournals: req.query.noOfJournals,
      place: req.query.place,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenlibtable2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nlibtable2.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      noOfTitles: req.query.noOfTitles,
      noOfBooks: req.query.noOfBooks,
      noOfBooksForRef: req.query.noOfBooksForRef,
      noOfEbooks: req.query.noOfEbooks,
      noOfJournals: req.query.noOfJournals,
      place: req.query.place,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenlibtable2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nlibtable2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenlibtable2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nlibtable2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnofficefacilitybyfac = async (req, res) => {
  try {
    const lcat1233 = await nofficefacility.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nofficefacilitybydep = async (req, res) => {
  try {
    const lcat1233 = await nofficefacility.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nofficefacilitybyprog = async (req, res) => {
  try {
    const lcat1233 = await nofficefacility.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nofficefacilitydocs = async (req, res) => {
  try {
    const lcat1233 = await nofficefacility.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nofficefacilitylinks = async (req, res) => {
  try {
    const lcat1233 = await nofficefacility.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnofficefacilitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nofficefacility.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      natureOfwork: req.query.natureOfwork,
      noOfEmp: req.query.noOfEmp,
      noOfComp: req.query.noOfComp,
      noOfPrinters: req.query.noOfPrinters,
      repFacility: req.query.repFacility,
      noOfSafetyLocker: req.query.noOfSafetyLocker,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenofficefacilitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nofficefacility.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      natureOfwork: req.query.natureOfwork,
      noOfEmp: req.query.noOfEmp,
      noOfComp: req.query.noOfComp,
      noOfPrinters: req.query.noOfPrinters,
      repFacility: req.query.repFacility,
      noOfSafetyLocker: req.query.noOfSafetyLocker,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenofficefacilitycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nofficefacility.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenofficefacilitybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nofficefacility.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteallaffprog = async (req, res) => {
  try {
    //const token=req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    await affcolprog.deleteMany({ colid: req.query.colid });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    res.status(200).json({
      status: "Error",
      message: err,
    });
  }
};

// Jul 30 2023

exports.getmsusancseatnbyfac = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msusancseatnbyunivid = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          univid: parseInt(req.query.univid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msusancseatnbydep = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msusancseatnbyprog = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msusancseatndocs = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msusancseatnlinks = async (req, res) => {
  try {
    const lcat1233 = await msusancseatn.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmsusancseatnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await msusancseatn.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      univid: req.query.univid,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      sanc: req.query.sanc,
      admitted: req.query.admitted,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemsusancseatnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await msusancseatn.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      univid: req.query.univid,
      program: req.query.program,
      programcode: req.query.programcode,
      year: req.query.year,
      sanc: req.query.sanc,
      admitted: req.query.admitted,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemsusancseatncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await msusancseatn.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemsusancseatnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await msusancseatn.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 1 2023

exports.updatemsusancseatadm = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await msusancseatn.findByIdAndUpdate(req.query.id, {
      admitted: req.query.admitted,
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 1 2023 1

exports.getmsuallfacnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await msuallfacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msuallfacnewbydep = async (req, res) => {
  try {
    const lcat1233 = await msuallfacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msuallfacnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await msuallfacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msuallfacnewdocs = async (req, res) => {
  try {
    const lcat1233 = await msuallfacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.msuallfacnewlinks = async (req, res) => {
  try {
    const lcat1233 = await msuallfacnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmsuallfacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await msuallfacnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      faculty: req.query.faculty,
      sex: req.query.sex,
      address1: req.query.address1,
      address2: req.query.address2,
      district: req.query.district,
      pin: req.query.pin,
      mobile: req.query.mobile,
      email: req.query.email,
      community: req.query.community,
      pan: req.query.pan,
      aadhar: req.query.aadhar,
      dateofbirth: req.query.dateofbirth,
      salary: req.query.salary,
      bank: req.query.bank,
      account: req.query.account,
      accountno: req.query.accountno,
      ifsc: req.query.ifsc,
      accounttype: req.query.accounttype,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemsuallfacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await msuallfacnew.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      faculty: req.query.faculty,
      sex: req.query.sex,
      address1: req.query.address1,
      address2: req.query.address2,
      district: req.query.district,
      pin: req.query.pin,
      mobile: req.query.mobile,
      email: req.query.email,
      community: req.query.community,
      pan: req.query.pan,
      aadhar: req.query.aadhar,
      dateofbirth: req.query.dateofbirth,
      salary: req.query.salary,
      bank: req.query.bank,
      account: req.query.account,
      accountno: req.query.accountno,
      ifsc: req.query.ifsc,
      accounttype: req.query.accounttype,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemsuallfacnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await msuallfacnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemsuallfacnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await msuallfacnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 1 2023 1

exports.getawsconfigbyfac = async (req, res) => {
  try {
    const lcat1233 = await awsconfig.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awsconfigbydep = async (req, res) => {
  try {
    const lcat1233 = await awsconfig.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awsconfigbyprog = async (req, res) => {
  try {
    const lcat1233 = await awsconfig.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awsconfigdocs = async (req, res) => {
  try {
    const lcat1233 = await awsconfig.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.awsconfiglinks = async (req, res) => {
  try {
    const lcat1233 = await awsconfig.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createawsconfigbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await awsconfig.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      username: req.query.username,
      password: req.query.password,
      bucket: req.query.bucket,
      region: req.query.region,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawsconfigbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await awsconfig.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      username: req.query.username,
      password: req.query.password,
      bucket: req.query.bucket,
      region: req.query.region,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateawsconfigcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await awsconfig.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteawsconfigbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await awsconfig.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 2 2023

exports.loginadmusers = async (req, res) => {
  try {
    const username = req.query.username;
    const password = req.query.password;
    admusers.findOne(
      { username: username, password: password, status1: "Accepted" },
      (err, role) => {
        if (err) {
          res.status(201).json({
            status: "Error",
          });
        }
        if (role) {
          // res.cookie("user",String([role.email]));
          // res.cookie("name",String([role.name]));
          // res.cookie("department",String([role.department]));
          // res.cookie("colid",String([role.colid]));
          // res.cookie("role",String([role.role]));
          const token = jwt.sign(
            { user: username, colid: String([role.colid]) },
            process.env.JWT_SECRET,
            {
              expiresIn: process.env.JWT_EXPIRES_IN,
            }
          );
          res.status(200).json({
            status: "Success",
            user: String([role.username]),
            role: "Admission",
            name: String([role.student]),
            colid: String([role.colid]),
            regno: String([role.username]),
            email: String([role.email]),
            phone: String([role.phone]),
            token: token,
          });
        } else {
          res.status(201).json({
            status: "Invalid username or password",
          });
        }
      }
    );
  } catch (err) {
    res.status(201).json({
      status: "Error " + err,
    });
  }
};

exports.updateadmphoto = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    // const lcat1= await user.findByIdAndUpdate( req.query.id,{
    //     status1: req.query.status1,
    //     comments: req.query.comments

    // });

    const lcat1 = await admusers.updateMany(
      { username: req.query.user },
      {
        photo: req.query.photo,
      }
    );

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getphotoofadm = async (req, res) => {
  //res.cookie("user","Akshata");

  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const user1 = req.query.user;
    const colid = req.query.colid;
    const lcat1233 = await admusers
      .find()
      .where("username")
      .equals(req.query.username);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.registeradm = async (req, res) => {
  try {
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";

    const pub1 = await admusers.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      alumni: req.query.alumni,
      address: req.query.address,
      city: req.query.city,
      country: req.query.country,
      email: req.query.email,
      phone: req.query.phone,
      program: req.query.program,
      regno: req.query.regno,
      batch: req.query.batch,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 6 2023

exports.getbookbyfac = async (req, res) => {
  try {
    const lcat1233 = await book.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.bookbydep = async (req, res) => {
  try {
    const lcat1233 = await book.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.bookbyprog = async (req, res) => {
  try {
    const lcat1233 = await book.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.bookdocs = async (req, res) => {
  try {
    const lcat1233 = await book.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.booklinks = async (req, res) => {
  try {
    const lcat1233 = await book.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createbookbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await book.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      booktitle: req.query.booktitle,
      papertitle: req.query.papertitle,
      proceeding: req.query.proceeding,
      yop: req.query.yop,
      issn: req.query.issn,
      publisher: req.query.publisher,
      conferencename: req.query.conferencename,
      level: req.query.level,
      affiliated: req.query.affiliated,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatebookbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await book.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      booktitle: req.query.booktitle,
      papertitle: req.query.papertitle,
      proceeding: req.query.proceeding,
      yop: req.query.yop,
      issn: req.query.issn,
      publisher: req.query.publisher,
      conferencename: req.query.conferencename,
      level: req.query.level,
      affiliated: req.query.affiliated,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatebookcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await book.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletebookbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await book.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 10 2023

exports.getfeedbackbyfac = async (req, res) => {
  try {
    const lcat1233 = await feedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.feedbackbydep = async (req, res) => {
  try {
    const lcat1233 = await feedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.feedbackbyprog = async (req, res) => {
  try {
    const lcat1233 = await feedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.feedbackdocs = async (req, res) => {
  try {
    const lcat1233 = await feedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.feedbacklinks = async (req, res) => {
  try {
    const lcat1233 = await feedback.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createfeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await feedback.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      regno: req.query.regno,
      coursecode: req.query.coursecode,
      faculty: req.query.faculty,
      facultyemail: req.query.facultyemail,
      semester: req.query.semester,
      section: req.query.section,
      feedbackdate: req.query.feedbackdate,
      type: req.query.type,
      question: req.query.question,
      option: req.query.option,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatefeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await feedback.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      regno: req.query.regno,
      coursecode: req.query.coursecode,
      faculty: req.query.faculty,
      facultyemail: req.query.facultyemail,
      semester: req.query.semester,
      section: req.query.section,
      feedbackdate: req.query.feedbackdate,
      type: req.query.type,
      question: req.query.question,
      option: req.query.option,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatefeedbackcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await feedback.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletefeedbackbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await feedback.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 17 2023

exports.getcocalbyfac = async (req, res) => {
  try {
    const lcat1233 = await cocal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cocalbydep = async (req, res) => {
  try {
    const lcat1233 = await cocal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cocalbyprog = async (req, res) => {
  try {
    const lcat1233 = await cocal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cocaldocs = async (req, res) => {
  try {
    const lcat1233 = await cocal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cocallinks = async (req, res) => {
  try {
    const lcat1233 = await cocal.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcocalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cocal.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      course: req.query.course,
      programcode: req.query.programcode,
      program: req.query.program,
      examcode: req.query.examcode,
      examname: req.query.examname,
      semester: req.query.semester,
      regno: req.query.regno,
      student: req.query.student,
      iamarks: req.query.iamarks,
      extmarks: req.query.extmarks,
      totalmarks: req.query.totalmarks,
      co1: req.query.co1,
      co2: req.query.co2,
      co3: req.query.co3,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecocalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cocal.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursecode: req.query.coursecode,
      course: req.query.course,
      programcode: req.query.programcode,
      program: req.query.program,
      examcode: req.query.examcode,
      examname: req.query.examname,
      semester: req.query.semester,
      regno: req.query.regno,
      student: req.query.student,
      iamarks: req.query.iamarks,
      extmarks: req.query.extmarks,
      totalmarks: req.query.totalmarks,
      co1: req.query.co1,
      co2: req.query.co2,
      co3: req.query.co3,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecocalcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cocal.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecocalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cocal.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 26 2023

exports.getpayimagesbyfac = async (req, res) => {
  try {
    const lcat1233 = await payimages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.payimagesbydep = async (req, res) => {
  try {
    const lcat1233 = await payimages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.payimagesbyprog = async (req, res) => {
  try {
    const lcat1233 = await payimages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.payimagesdocs = async (req, res) => {
  try {
    const lcat1233 = await payimages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.payimageslinks = async (req, res) => {
  try {
    const lcat1233 = await payimages.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpayimagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await payimages.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      description: req.query.description,
      link: req.query.link,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepayimagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await payimages.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      description: req.query.description,
      link: req.query.link,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepayimagescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await payimages.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepayimagesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await payimages.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getalumnipaybyfac = async (req, res) => {
  try {
    const lcat1233 = await alumnipay.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnipaybydep = async (req, res) => {
  try {
    const lcat1233 = await alumnipay.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnipaybyprog = async (req, res) => {
  try {
    const lcat1233 = await alumnipay.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnipaydocs = async (req, res) => {
  try {
    const lcat1233 = await alumnipay.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.alumnipaylinks = async (req, res) => {
  try {
    const lcat1233 = await alumnipay.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createalumnipaybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await alumnipay.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      amount: req.query.amount,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      source: req.query.source,
      sourcedetails: req.query.sourcedetails,
      purpose: req.query.purpose,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnipaybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await alumnipay.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      amount: req.query.amount,
      paydate: req.query.paydate,
      refno: req.query.refno,
      mode: req.query.mode,
      source: req.query.source,
      sourcedetails: req.query.sourcedetails,
      purpose: req.query.purpose,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatealumnipaycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await alumnipay.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletealumnipaybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await alumnipay.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 27 2023

exports.getamfacallnbyfac = async (req, res) => {
  try {
    const lcat1233 = await amfacalln.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacallnbydep = async (req, res) => {
  try {
    const lcat1233 = await amfacalln.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacallnbyprog = async (req, res) => {
  try {
    const lcat1233 = await amfacalln.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacallndocs = async (req, res) => {
  try {
    const lcat1233 = await amfacalln.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.amfacallnlinks = async (req, res) => {
  try {
    const lcat1233 = await amfacalln.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createamfacallnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await amfacalln.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facid: req.query.facid,
      inscode: req.query.inscode,
      institution: req.query.institution,
      faculty: req.query.faculty,
      designation: req.query.designation,
      department: req.query.department,
      qualification: req.query.qualification,
      mphildate: req.query.mphildate,
      phddate: req.query.phddate,
      netdate: req.query.netdate,
      eligdate: req.query.eligdate,
      dateofbirth: req.query.dateofbirth,
      type: req.query.type,
      tservicedate: req.query.tservicedate,
      regservicedate: req.query.regservicedate,
      dstaffdate: req.query.dstaffdate,
      pinsdate: req.query.pinsdate,
      ifqualaff: req.query.ifqualaff,
      ifpg: req.query.ifpg,
      ugteaching: req.query.ugteaching,
      pgteaching: req.query.pgteaching,
      email: req.query.email,
      mobile: req.query.mobile,
      retirementdate: req.query.retirementdate,
      account: req.query.account,
      bank: req.query.bank,
      branch: req.query.branch,
      ifsc: req.query.ifsc,
      pan: req.query.pan,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamfacallnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await amfacalln.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facid: req.query.facid,
      inscode: req.query.inscode,
      institution: req.query.institution,
      faculty: req.query.faculty,
      designation: req.query.designation,
      department: req.query.department,
      qualification: req.query.qualification,
      mphildate: req.query.mphildate,
      phddate: req.query.phddate,
      netdate: req.query.netdate,
      eligdate: req.query.eligdate,
      dateofbirth: req.query.dateofbirth,
      type: req.query.type,
      tservicedate: req.query.tservicedate,
      regservicedate: req.query.regservicedate,
      dstaffdate: req.query.dstaffdate,
      pinsdate: req.query.pinsdate,
      ifqualaff: req.query.ifqualaff,
      ifpg: req.query.ifpg,
      ugteaching: req.query.ugteaching,
      pgteaching: req.query.pgteaching,
      email: req.query.email,
      mobile: req.query.mobile,
      retirementdate: req.query.retirementdate,
      account: req.query.account,
      bank: req.query.bank,
      branch: req.query.branch,
      ifsc: req.query.ifsc,
      pan: req.query.pan,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateamfacallncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await amfacalln.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteamfacallnbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await amfacalln.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Aug 29 2023

exports.getevguestsbyfac = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getevguestsbyev = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          eventid: req.query.eventid,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.evguestsbydep = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.evguestsbyprog = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.evguestsdocs = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.evguestslinks = async (req, res) => {
  try {
    const lcat1233 = await evguests.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createevguestsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await evguests.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      eventid: req.query.eventid,
      event: req.query.event,
      guest: req.query.guest,
      email: req.query.email,
      phone: req.query.phone,
      designation: req.query.designation,
      institute: req.query.institute,
      address: req.query.address,
      country: req.query.country,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateevguestsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await evguests.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      eventid: req.query.eventid,
      event: req.query.event,
      guest: req.query.guest,
      email: req.query.email,
      phone: req.query.phone,
      designation: req.query.designation,
      institute: req.query.institute,
      address: req.query.address,
      country: req.query.country,
      username: req.query.username,
      password: req.query.password,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateevguestscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await evguests.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteevguestsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await evguests.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Sep 14 2023

exports.getgenderauditbyfac = async (req, res) => {
  try {
    const lcat1233 = await genderaudit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.genderauditbydep = async (req, res) => {
  try {
    const lcat1233 = await genderaudit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.genderauditbyprog = async (req, res) => {
  try {
    const lcat1233 = await genderaudit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.genderauditdocs = async (req, res) => {
  try {
    const lcat1233 = await genderaudit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.genderauditlinks = async (req, res) => {
  try {
    const lcat1233 = await genderaudit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.creategenderauditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await genderaudit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      regno: req.query.regno,
      filldate: req.query.filldate,
      security: req.query.security,
      common: req.query.common,
      sanitation: req.query.sanitation,
      cctv: req.query.cctv,
      classroom: req.query.classroom,
      library: req.query.library,
      timing: req.query.timing,
      daycare: req.query.daycare,
      medical: req.query.medical,
      hostel: req.query.hostel,
      icc: req.query.icc,
      seminar: req.query.seminar,
      course: req.query.course,
      icccom: req.query.icccom,
      discriminated: req.query.discriminated,
      equal: req.query.equal,
      grievance: req.query.grievance,
      safe: req.query.safe,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updategenderauditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await genderaudit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      student: req.query.student,
      regno: req.query.regno,
      filldate: req.query.filldate,
      security: req.query.security,
      common: req.query.common,
      sanitation: req.query.sanitation,
      cctv: req.query.cctv,
      classroom: req.query.classroom,
      library: req.query.library,
      timing: req.query.timing,
      daycare: req.query.daycare,
      medical: req.query.medical,
      hostel: req.query.hostel,
      icc: req.query.icc,
      seminar: req.query.seminar,
      course: req.query.course,
      icccom: req.query.icccom,
      discriminated: req.query.discriminated,
      equal: req.query.equal,
      grievance: req.query.grievance,
      safe: req.query.safe,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updategenderauditcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await genderaudit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletegenderauditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await genderaudit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Sep 28 2023

exports.getsalarypaidbyfac = async (req, res) => {
  try {
    const lcat1233 = await salarypaid.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.salarypaidbydep = async (req, res) => {
  try {
    const lcat1233 = await salarypaid.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.salarypaidbyprog = async (req, res) => {
  try {
    const lcat1233 = await salarypaid.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.salarypaiddocs = async (req, res) => {
  try {
    const lcat1233 = await salarypaid.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.salarypaidlinks = async (req, res) => {
  try {
    const lcat1233 = await salarypaid.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createsalarypaidbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await salarypaid.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      employee: req.query.employee,
      userid: req.query.userid,
      item: req.query.item,
      amount: req.query.amount,
      datepaid: req.query.datepaid,
      type: req.query.type,
      bank: req.query.bank,
      refno: req.query.refno,
      account: req.query.account,
      accountno: req.query.accountno,
      frombank: req.query.frombank,
      fromaccount: req.query.fromaccount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatesalarypaidbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await salarypaid.findByIdAndUpdate(req.query.id, {
      employee: req.query.employee,
      userid: req.query.userid,
      item: req.query.item,
      amount: req.query.amount,
      datepaid: req.query.datepaid,
      type: req.query.type,
      bank: req.query.bank,
      refno: req.query.refno,
      account: req.query.account,
      accountno: req.query.accountno,
      frombank: req.query.frombank,
      fromaccount: req.query.fromaccount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatesalarypaidcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await salarypaid.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletesalarypaidbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await salarypaid.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getemptravelbyfac = async (req, res) => {
  try {
    const lcat1233 = await emptravel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.emptravelbydep = async (req, res) => {
  try {
    const lcat1233 = await emptravel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.emptravelbyprog = async (req, res) => {
  try {
    const lcat1233 = await emptravel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.emptraveldocs = async (req, res) => {
  try {
    const lcat1233 = await emptravel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.emptravellinks = async (req, res) => {
  try {
    const lcat1233 = await emptravel.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createemptravelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await emptravel.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      employee: req.query.employee,
      userid: req.query.userid,
      item: req.query.item,
      clientid: req.query.clientid,
      client: req.query.client,
      fromdate: req.query.fromdate,
      todate: req.query.todate,
      mode: req.query.mode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateemptravelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await emptravel.findByIdAndUpdate(req.query.id, {
      employee: req.query.employee,
      userid: req.query.userid,
      item: req.query.item,
      clientid: req.query.clientid,
      client: req.query.client,
      fromdate: req.query.fromdate,
      todate: req.query.todate,
      mode: req.query.mode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateemptravelcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await emptravel.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteemptravelbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await emptravel.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 11 2023

exports.updateprofilepassword = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    // const lcat1= await user.findByIdAndUpdate( req.query.id,{
    //     status1: req.query.status1,
    //     comments: req.query.comments

    // });

    const lcat1 = await User.updateMany(
      { colid: req.query.colid },
      {
        password: req.query.password,
      }
    );

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 13 2023

exports.getprojectsbyfac = async (req, res) => {
  try {
    const lcat1233 = await projects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.projectsbydep = async (req, res) => {
  try {
    const lcat1233 = await projects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.projectsbyprog = async (req, res) => {
  try {
    const lcat1233 = await projects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.projectsdocs = async (req, res) => {
  try {
    const lcat1233 = await projects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.projectslinks = async (req, res) => {
  try {
    const lcat1233 = await projects.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await projects.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      project: req.query.project,
      agency: req.query.agency,
      type: req.query.type,
      yop: req.query.yop,
      funds: req.query.funds,
      level: req.query.level,
      duration: req.query.duration,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await projects.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      project: req.query.project,
      agency: req.query.agency,
      type: req.query.type,
      yop: req.query.yop,
      funds: req.query.funds,
      level: req.query.level,
      duration: req.query.duration,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateprojectscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await projects.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteprojectsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await projects.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 14 2023

exports.getpublicationsbyfac = async (req, res) => {
  try {
    const lcat1233 = await publications.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.publicationsbydep = async (req, res) => {
  try {
    const lcat1233 = await publications.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.publicationsbyprog = async (req, res) => {
  try {
    const lcat1233 = await publications.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.publicationsdocs = async (req, res) => {
  try {
    const lcat1233 = await publications.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.publicationslinks = async (req, res) => {
  try {
    const lcat1233 = await publications.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpublicationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await publications.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      title: req.query.title,
      journal: req.query.journal,
      yop: req.query.yop,
      issn: req.query.issn,
      articlelink: req.query.articlelink,
      journallink: req.query.journallink,
      ugclisted: req.query.ugclisted,
      hindex: req.query.hindex,
      citationindex: req.query.citationindex,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepublicationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await publications.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      title: req.query.title,
      journal: req.query.journal,
      yop: req.query.yop,
      issn: req.query.issn,
      articlelink: req.query.articlelink,
      journallink: req.query.journallink,
      ugclisted: req.query.ugclisted,
      hindex: req.query.hindex,
      citationindex: req.query.citationindex,
      level: req.query.level,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepublicationscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await publications.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepublicationsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await publications.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getseminarbyfac = async (req, res) => {
  try {
    const lcat1233 = await seminar.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seminarbydep = async (req, res) => {
  try {
    const lcat1233 = await seminar.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seminarbyprog = async (req, res) => {
  try {
    const lcat1233 = await seminar.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seminardocs = async (req, res) => {
  try {
    const lcat1233 = await seminar.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seminarlinks = async (req, res) => {
  try {
    const lcat1233 = await seminar.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createseminarbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await seminar.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      duration: req.query.duration,
      yop: req.query.yop,
      membership: req.query.membership,
      amount: req.query.amount,
      paper: req.query.paper,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateseminarbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await seminar.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      title: req.query.title,
      duration: req.query.duration,
      yop: req.query.yop,
      membership: req.query.membership,
      amount: req.query.amount,
      paper: req.query.paper,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateseminarcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await seminar.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteseminarbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await seminar.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcertificatesbyfac = async (req, res) => {
  try {
    const lcat1233 = await certificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.certificatesbydep = async (req, res) => {
  try {
    const lcat1233 = await certificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.certificatesbyprog = async (req, res) => {
  try {
    const lcat1233 = await certificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.certificatesdocs = async (req, res) => {
  try {
    const lcat1233 = await certificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.certificateslinks = async (req, res) => {
  try {
    const lcat1233 = await certificates.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await certificates.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      document: req.query.document,
      refno: req.query.refno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await certificates.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      document: req.query.document,
      refno: req.query.refno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecertificatescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await certificates.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecertificatesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await certificates.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getemploymentallbyfac = async (req, res) => {
  try {
    const lcat1233 = await employmentall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.employmentallbydep = async (req, res) => {
  try {
    const lcat1233 = await employmentall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.employmentallbyprog = async (req, res) => {
  try {
    const lcat1233 = await employmentall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.employmentalldocs = async (req, res) => {
  try {
    const lcat1233 = await employmentall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.employmentalllinks = async (req, res) => {
  try {
    const lcat1233 = await employmentall.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createemploymentallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await employmentall.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      company: req.query.company,
      designation: req.query.designation,
      fromdate: req.query.fromdate,
      todate: req.query.todate,
      totalexp: req.query.totalexp,
      location: req.query.location,
      manager: req.query.manager,
      mphone: req.query.mphone,
      memail: req.query.memail,
      hr: req.query.hr,
      hremail: req.query.hremail,
      hrphone: req.query.hrphone,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateemploymentallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await employmentall.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      company: req.query.company,
      designation: req.query.designation,
      fromdate: req.query.fromdate,
      todate: req.query.todate,
      totalexp: req.query.totalexp,
      location: req.query.location,
      manager: req.query.manager,
      mphone: req.query.mphone,
      memail: req.query.memail,
      hr: req.query.hr,
      hremail: req.query.hremail,
      hrphone: req.query.hrphone,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateemploymentallcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await employmentall.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteemploymentallbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await employmentall.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 16 2023

exports.getaddoncstudbyfac = async (req, res) => {
  try {
    const lcat1233 = await addoncstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncstudbydep = async (req, res) => {
  try {
    const lcat1233 = await addoncstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncstudbyprog = async (req, res) => {
  try {
    const lcat1233 = await addoncstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncstuddocs = async (req, res) => {
  try {
    const lcat1233 = await addoncstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncstudlinks = async (req, res) => {
  try {
    const lcat1233 = await addoncstud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaddoncstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await addoncstud.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursetitle: req.query.coursetitle,
      coursecode: req.query.coursecode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaddoncstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await addoncstud.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursetitle: req.query.coursetitle,
      coursecode: req.query.coursecode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaddoncstudcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await addoncstud.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaddoncstudbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await addoncstud.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 16 2023 1

exports.getaddoncbyfac = async (req, res) => {
  try {
    const lcat1233 = await addonc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncbydep = async (req, res) => {
  try {
    const lcat1233 = await addonc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncbyprog = async (req, res) => {
  try {
    const lcat1233 = await addonc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addoncdocs = async (req, res) => {
  try {
    const lcat1233 = await addonc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.addonclinks = async (req, res) => {
  try {
    const lcat1233 = await addonc.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaddoncbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await addonc.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursetitle: req.query.coursetitle,
      coursecode: req.query.coursecode,
      coursetype: req.query.coursetype,
      year: req.query.year,
      offeredtimes: req.query.offeredtimes,
      duration: req.query.duration,
      imagelink: req.query.imagelink,
      price: req.query.price,
      category: req.query.category,
      department: req.query.department,
      coursehours: req.query.coursehours,
      totalstudents: req.query.totalstudents,
      studentscompleted: req.query.studentscompleted,
      dateadded: req.query.dateadded,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaddoncbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await addonc.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      coursetitle: req.query.coursetitle,
      coursecode: req.query.coursecode,
      coursetype: req.query.coursetype,
      year: req.query.year,
      offeredtimes: req.query.offeredtimes,
      duration: req.query.duration,
      imagelink: req.query.imagelink,
      price: req.query.price,
      category: req.query.category,
      department: req.query.department,
      coursehours: req.query.coursehours,
      totalstudents: req.query.totalstudents,
      studentscompleted: req.query.studentscompleted,
      dateadded: req.query.dateadded,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaddonccomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await addonc.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaddoncbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await addonc.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// oct 16 2023 2

exports.getnallcoursesbyfac = async (req, res) => {
  try {
    const lcat1233 = await nallcourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nallcoursesbydep = async (req, res) => {
  try {
    const lcat1233 = await nallcourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nallcoursesbyprog = async (req, res) => {
  try {
    const lcat1233 = await nallcourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nallcoursesdocs = async (req, res) => {
  try {
    const lcat1233 = await nallcourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nallcourseslinks = async (req, res) => {
  try {
    const lcat1233 = await nallcourses.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnallcoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nallcourses.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      introductionyear: req.query.introductionyear,
      discontinueyear: req.query.discontinueyear,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      coursetype: req.query.coursetype,
      lecture: req.query.lecture,
      theory: req.query.theory,
      practical: req.query.practical,
      total: req.query.total,
      documentlink: req.query.documentlink,
      credits: req.query.credits,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenallcoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nallcourses.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      introductionyear: req.query.introductionyear,
      discontinueyear: req.query.discontinueyear,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      coursetype: req.query.coursetype,
      lecture: req.query.lecture,
      theory: req.query.theory,
      practical: req.query.practical,
      total: req.query.total,
      credits: req.query.credits,
      documentlink: req.query.documentlink,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenallcoursescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nallcourses.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenallcoursesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nallcourses.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Oct 20 2023

exports.getdoc121acbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc121ac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121acbydep = async (req, res) => {
  try {
    const lcat1233 = await doc121ac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121acbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc121ac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121acdocs = async (req, res) => {
  try {
    const lcat1233 = await doc121ac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121aclinks = async (req, res) => {
  try {
    const lcat1233 = await doc121ac.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc121acbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc121ac.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      mdata: req.query.mdata,
      meeting: req.query.meeting,
      members: req.query.members,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc121acbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc121ac.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      mdata: req.query.mdata,
      meeting: req.query.meeting,
      members: req.query.members,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc121accomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc121ac.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc121acbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc121ac.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc121bosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc121bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121bosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc121bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121bosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc121bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121bosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc121bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc121boslinks = async (req, res) => {
  try {
    const lcat1233 = await doc121bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc121bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc121bos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      year: req.query.year,
      mdate: req.query.mdate,
      regulation: req.query.regulation,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc121bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc121bos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      year: req.query.year,
      mdate: req.query.mdate,
      regulation: req.query.regulation,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc121boscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc121bos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc121bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc121bos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc132attbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc132att.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132attbydep = async (req, res) => {
  try {
    const lcat1233 = await doc132att.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132attbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc132att.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132attdocs = async (req, res) => {
  try {
    const lcat1233 = await doc132att.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132attlinks = async (req, res) => {
  try {
    const lcat1233 = await doc132att.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc132attbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc132att.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132attbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc132att.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132attcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc132att.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc132attbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc132att.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc132brochurebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc132brochure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132brochurebydep = async (req, res) => {
  try {
    const lcat1233 = await doc132brochure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132brochurebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc132brochure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132brochuredocs = async (req, res) => {
  try {
    const lcat1233 = await doc132brochure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132brochurelinks = async (req, res) => {
  try {
    const lcat1233 = await doc132brochure.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc132brochurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc132brochure.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      coursecode: req.query.coursecode,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132brochurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc132brochure.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      coursecode: req.query.coursecode,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132brochurecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc132brochure.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc132brochurebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc132brochure.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc132certbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc132cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132certbydep = async (req, res) => {
  try {
    const lcat1233 = await doc132cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132certbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc132cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132certdocs = async (req, res) => {
  try {
    const lcat1233 = await doc132cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc132certlinks = async (req, res) => {
  try {
    const lcat1233 = await doc132cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc132certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc132cert.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      courscode: req.query.courscode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc132cert.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      course: req.query.course,
      courscode: req.query.courscode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc132certcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc132cert.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc132certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc132cert.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc133internbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc133intern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133internbydep = async (req, res) => {
  try {
    const lcat1233 = await doc133intern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133internbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc133intern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133interndocs = async (req, res) => {
  try {
    const lcat1233 = await doc133intern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133internlinks = async (req, res) => {
  try {
    const lcat1233 = await doc133intern.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc133internbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc133intern.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc133internbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc133intern.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc133interncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc133intern.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc133internbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc133intern.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc133bosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc133bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133bosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc133bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133bosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc133bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133bosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc133bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc133boslinks = async (req, res) => {
  try {
    const lcat1233 = await doc133bos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc133bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc133bos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      programcode: req.query.programcode,
      bosdate: req.query.bosdate,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc133bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc133bos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      department: req.query.department,
      program: req.query.program,
      programcode: req.query.programcode,
      bosdate: req.query.bosdate,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc133boscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc133bos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc133bosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc133bos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc141fsubmitbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc141fsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141fsubmitbydep = async (req, res) => {
  try {
    const lcat1233 = await doc141fsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141fsubmitbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc141fsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141fsubmitdocs = async (req, res) => {
  try {
    const lcat1233 = await doc141fsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141fsubmitlinks = async (req, res) => {
  try {
    const lcat1233 = await doc141fsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc141fsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc141fsubmit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      feedback: req.query.feedback,
      submittedto: req.query.submittedto,
      submitdate: req.query.submitdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141fsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc141fsubmit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      feedback: req.query.feedback,
      submittedto: req.query.submittedto,
      submitdate: req.query.submitdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141fsubmitcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc141fsubmit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc141fsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc141fsubmit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc141samplebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc141sample.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141samplebydep = async (req, res) => {
  try {
    const lcat1233 = await doc141sample.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141samplebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc141sample.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141sampledocs = async (req, res) => {
  try {
    const lcat1233 = await doc141sample.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141samplelinks = async (req, res) => {
  try {
    const lcat1233 = await doc141sample.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc141samplebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc141sample.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      feedback: req.query.feedback,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141samplebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc141sample.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      feedback: req.query.feedback,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141samplecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc141sample.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc141samplebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc141sample.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc141actionbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc141action.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141actionbydep = async (req, res) => {
  try {
    const lcat1233 = await doc141action.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141actionbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc141action.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141actiondocs = async (req, res) => {
  try {
    const lcat1233 = await doc141action.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc141actionlinks = async (req, res) => {
  try {
    const lcat1233 = await doc141action.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc141actionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc141action.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      feedback: req.query.feedback,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141actionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc141action.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      feedback: req.query.feedback,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc141actioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc141action.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc141actionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc141action.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdod211intakebyfac = async (req, res) => {
  try {
    const lcat1233 = await dod211intake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod211intakebydep = async (req, res) => {
  try {
    const lcat1233 = await dod211intake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod211intakebyprog = async (req, res) => {
  try {
    const lcat1233 = await dod211intake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod211intakedocs = async (req, res) => {
  try {
    const lcat1233 = await dod211intake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod211intakelinks = async (req, res) => {
  try {
    const lcat1233 = await dod211intake.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdod211intakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await dod211intake.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedod211intakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await dod211intake.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedod211intakecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await dod211intake.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedod211intakebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await dod211intake.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc211extractbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc211extract.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc211extractbydep = async (req, res) => {
  try {
    const lcat1233 = await doc211extract.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc211extractbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc211extract.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc211extractdocs = async (req, res) => {
  try {
    const lcat1233 = await doc211extract.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc211extractlinks = async (req, res) => {
  try {
    const lcat1233 = await doc211extract.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc211extractbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc211extract.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc211extractbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc211extract.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc211extractcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc211extract.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc211extractbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc211extract.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc212finalbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc212final.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212finalbydep = async (req, res) => {
  try {
    const lcat1233 = await doc212final.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212finalbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc212final.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212finaldocs = async (req, res) => {
  try {
    const lcat1233 = await doc212final.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212finallinks = async (req, res) => {
  try {
    const lcat1233 = await doc212final.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc212finalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc212final.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc212finalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc212final.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc212finalcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc212final.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc212finalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc212final.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc212letterbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc212letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212letterbydep = async (req, res) => {
  try {
    const lcat1233 = await doc212letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212letterbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc212letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212letterdocs = async (req, res) => {
  try {
    const lcat1233 = await doc212letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc212letterlinks = async (req, res) => {
  try {
    const lcat1233 = await doc212letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc212letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc212letter.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc212letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc212letter.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc212lettercomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc212letter.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc212letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc212letter.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdod222studbyfac = async (req, res) => {
  try {
    const lcat1233 = await dod222stud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod222studbydep = async (req, res) => {
  try {
    const lcat1233 = await dod222stud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod222studbyprog = async (req, res) => {
  try {
    const lcat1233 = await dod222stud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod222studdocs = async (req, res) => {
  try {
    const lcat1233 = await dod222stud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.dod222studlinks = async (req, res) => {
  try {
    const lcat1233 = await dod222stud.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdod222studbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await dod222stud.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedod222studbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await dod222stud.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedod222studcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await dod222stud.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedod222studbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await dod222stud.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc222teachersbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc222teachers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc222teachersbydep = async (req, res) => {
  try {
    const lcat1233 = await doc222teachers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc222teachersbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc222teachers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc222teachersdocs = async (req, res) => {
  try {
    const lcat1233 = await doc222teachers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc222teacherslinks = async (req, res) => {
  try {
    const lcat1233 = await doc222teachers.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc222teachersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc222teachers.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc222teachersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc222teachers.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc222teacherscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc222teachers.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc222teachersbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc222teachers.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc241sanctionbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc241sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc241sanctionbydep = async (req, res) => {
  try {
    const lcat1233 = await doc241sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc241sanctionbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc241sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc241sanctiondocs = async (req, res) => {
  try {
    const lcat1233 = await doc241sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc241sanctionlinks = async (req, res) => {
  try {
    const lcat1233 = await doc241sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc241sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc241sanction.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc241sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc241sanction.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc241sanctioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc241sanction.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc241sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc241sanction.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc242faclistbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc242faclist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc242faclistbydep = async (req, res) => {
  try {
    const lcat1233 = await doc242faclist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc242faclistbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc242faclist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc242faclistdocs = async (req, res) => {
  try {
    const lcat1233 = await doc242faclist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc242faclistlinks = async (req, res) => {
  try {
    const lcat1233 = await doc242faclist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc242faclistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc242faclist.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      degree: req.query.degree,
      university: req.query.university,
      subject: req.query.subject,
      awardyear: req.query.awardyear,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc242faclistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc242faclist.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      degree: req.query.degree,
      university: req.query.university,
      subject: req.query.subject,
      awardyear: req.query.awardyear,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc242faclistcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc242faclist.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc242faclistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc242faclist.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc252listbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc252list.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc252listbydep = async (req, res) => {
  try {
    const lcat1233 = await doc252list.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc252listbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc252list.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc252listdocs = async (req, res) => {
  try {
    const lcat1233 = await doc252list.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc252listlinks = async (req, res) => {
  try {
    const lcat1233 = await doc252list.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc252listbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc252list.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      type: req.query.type,
      total: req.query.total,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc252listbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc252list.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      type: req.query.type,
      total: req.query.total,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc252listcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc252list.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc252listbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc252list.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc253screenshotbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc253screenshot.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253screenshotbydep = async (req, res) => {
  try {
    const lcat1233 = await doc253screenshot.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253screenshotbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc253screenshot.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253screenshotdocs = async (req, res) => {
  try {
    const lcat1233 = await doc253screenshot.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253screenshotlinks = async (req, res) => {
  try {
    const lcat1233 = await doc253screenshot.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc253screenshotbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc253screenshot.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc253screenshotbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc253screenshot.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      software: req.query.software,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc253screenshotcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc253screenshot.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc253screenshotbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc253screenshot.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc253reportbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc253report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253reportbydep = async (req, res) => {
  try {
    const lcat1233 = await doc253report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253reportbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc253report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253reportdocs = async (req, res) => {
  try {
    const lcat1233 = await doc253report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc253reportlinks = async (req, res) => {
  try {
    const lcat1233 = await doc253report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc253reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc253report.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc253reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc253report.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc253reportcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc253report.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc253reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc253report.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc261polistbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc261polist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261polistbydep = async (req, res) => {
  try {
    const lcat1233 = await doc261polist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261polistbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc261polist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261polistdocs = async (req, res) => {
  try {
    const lcat1233 = await doc261polist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261polistlinks = async (req, res) => {
  try {
    const lcat1233 = await doc261polist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc261polistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc261polist.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc261polistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc261polist.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      program: req.query.program,
      programcode: req.query.programcode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc261polistcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc261polist.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc261polistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc261polist.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc261colistbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc261colist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261colistbydep = async (req, res) => {
  try {
    const lcat1233 = await doc261colist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261colistbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc261colist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261colistdocs = async (req, res) => {
  try {
    const lcat1233 = await doc261colist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc261colistlinks = async (req, res) => {
  try {
    const lcat1233 = await doc261colist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc261colistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc261colist.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc261colistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc261colist.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc261colistcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc261colist.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc261colistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc261colist.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc262certbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc262cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262certbydep = async (req, res) => {
  try {
    const lcat1233 = await doc262cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262certbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc262cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262certdocs = async (req, res) => {
  try {
    const lcat1233 = await doc262cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262certlinks = async (req, res) => {
  try {
    const lcat1233 = await doc262cert.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc262certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc262cert.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc262certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc262cert.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc262certcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc262cert.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc262certbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc262cert.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc262annualbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc262annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262annualbydep = async (req, res) => {
  try {
    const lcat1233 = await doc262annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262annualbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc262annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262annualdocs = async (req, res) => {
  try {
    const lcat1233 = await doc262annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc262annuallinks = async (req, res) => {
  try {
    const lcat1233 = await doc262annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc262annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc262annual.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc262annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc262annual.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc262annualcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc262annual.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc262annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc262annual.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc311cobyfac = async (req, res) => {
  try {
    const lcat1233 = await doc311co.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc311cobydep = async (req, res) => {
  try {
    const lcat1233 = await doc311co.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc311cobyprog = async (req, res) => {
  try {
    const lcat1233 = await doc311co.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc311codocs = async (req, res) => {
  try {
    const lcat1233 = await doc311co.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc311colinks = async (req, res) => {
  try {
    const lcat1233 = await doc311co.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc311cobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc311co.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc311cobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc311co.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc311cocomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc311co.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc311cobyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc311co.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc312sanctionbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc312sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312sanctionbydep = async (req, res) => {
  try {
    const lcat1233 = await doc312sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312sanctionbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc312sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312sanctiondocs = async (req, res) => {
  try {
    const lcat1233 = await doc312sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312sanctionlinks = async (req, res) => {
  try {
    const lcat1233 = await doc312sanction.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc312sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc312sanction.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      project: req.query.project,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc312sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc312sanction.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      project: req.query.project,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc312sanctioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc312sanction.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc312sanctionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc312sanction.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc312financebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc312finance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312financebydep = async (req, res) => {
  try {
    const lcat1233 = await doc312finance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312financebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc312finance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312financedocs = async (req, res) => {
  try {
    const lcat1233 = await doc312finance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc312financelinks = async (req, res) => {
  try {
    const lcat1233 = await doc312finance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc312financebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc312finance.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      mapping: req.query.mapping,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc312financebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc312finance.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      mapping: req.query.mapping,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc312financecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc312finance.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc312financebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc312finance.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341syllabusbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341syllabus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341syllabusbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341syllabus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341syllabusbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341syllabus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341syllabusdocs = async (req, res) => {
  try {
    const lcat1233 = await doc341syllabus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341syllabuslinks = async (req, res) => {
  try {
    const lcat1233 = await doc341syllabus.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341syllabusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341syllabus.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341syllabusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341syllabus.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341syllabuscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341syllabus.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341syllabusbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341syllabus.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341ethicsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341ethics.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341ethics.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341ethics.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc341ethics.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicslinks = async (req, res) => {
  try {
    const lcat1233 = await doc341ethics.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341ethicsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341ethics.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      consdate: req.query.consdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341ethicsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341ethics.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      consdate: req.query.consdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341ethicscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341ethics.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341ethicsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341ethics.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341ethicsminbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341ethicsmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsminbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341ethicsmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsminbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341ethicsmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsmindocs = async (req, res) => {
  try {
    const lcat1233 = await doc341ethicsmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341ethicsminlinks = async (req, res) => {
  try {
    const lcat1233 = await doc341ethicsmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341ethicsminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341ethicsmin.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      meetingdate: req.query.meetingdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341ethicsminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341ethicsmin.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      meetingdate: req.query.meetingdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341ethicsmincomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341ethicsmin.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341ethicsminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341ethicsmin.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341researchbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341research.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341research.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341research.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchdocs = async (req, res) => {
  try {
    const lcat1233 = await doc341research.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchlinks = async (req, res) => {
  try {
    const lcat1233 = await doc341research.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341researchbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341research.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      consdate: req.query.consdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341researchbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341research.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      consdate: req.query.consdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341researchcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341research.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341researchbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341research.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341researchminbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341researchmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchminbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341researchmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchminbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341researchmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchmindocs = async (req, res) => {
  try {
    const lcat1233 = await doc341researchmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341researchminlinks = async (req, res) => {
  try {
    const lcat1233 = await doc341researchmin.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341researchminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341researchmin.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      meetingdate: req.query.meetingdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341researchminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341researchmin.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      meetingdate: req.query.meetingdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341researchmincomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341researchmin.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341researchminbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341researchmin.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc341billsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc341bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341billsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc341bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341billsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc341bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341billsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc341bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc341billslinks = async (req, res) => {
  try {
    const lcat1233 = await doc341bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc341billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc341bills.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      software: req.query.software,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc341bills.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      software: req.query.software,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc341billscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc341bills.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc341billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc341bills.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc342phdawardbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc342phdaward.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342phdawardbydep = async (req, res) => {
  try {
    const lcat1233 = await doc342phdaward.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342phdawardbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc342phdaward.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342phdawarddocs = async (req, res) => {
  try {
    const lcat1233 = await doc342phdaward.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342phdawardlinks = async (req, res) => {
  try {
    const lcat1233 = await doc342phdaward.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc342phdawardbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc342phdaward.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      program: req.query.program,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc342phdawardbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc342phdaward.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      program: req.query.program,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc342phdawardcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc342phdaward.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc342phdawardbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc342phdaward.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc342letterbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc342letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342letterbydep = async (req, res) => {
  try {
    const lcat1233 = await doc342letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342letterbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc342letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342letterdocs = async (req, res) => {
  try {
    const lcat1233 = await doc342letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc342letterlinks = async (req, res) => {
  try {
    const lcat1233 = await doc342letter.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc342letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc342letter.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      rego: req.query.rego,
      title: req.query.title,
      guide: req.query.guide,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc342letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc342letter.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      student: req.query.student,
      rego: req.query.rego,
      title: req.query.title,
      guide: req.query.guide,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc342lettercomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc342letter.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc342letterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc342letter.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc346agencybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc346agency.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346agencybydep = async (req, res) => {
  try {
    const lcat1233 = await doc346agency.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346agencybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc346agency.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346agencydocs = async (req, res) => {
  try {
    const lcat1233 = await doc346agency.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346agencylinks = async (req, res) => {
  try {
    const lcat1233 = await doc346agency.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc346agencybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc346agency.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      agency: req.query.agency,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346agencybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc346agency.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      agency: req.query.agency,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346agencycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc346agency.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc346agencybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc346agency.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc346ecbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc346ec.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346ecbydep = async (req, res) => {
  try {
    const lcat1233 = await doc346ec.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346ecbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc346ec.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346ecdocs = async (req, res) => {
  try {
    const lcat1233 = await doc346ec.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346eclinks = async (req, res) => {
  try {
    const lcat1233 = await doc346ec.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc346ecbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc346ec.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      course: req.query.course,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346ecbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc346ec.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      course: req.query.course,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346eccomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc346ec.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc346ecbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc346ec.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc346lmsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc346lms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346lmsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc346lms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346lmsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc346lms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346lmsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc346lms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc346lmslinks = async (req, res) => {
  try {
    const lcat1233 = await doc346lms.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc346lmsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc346lms.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      lms: req.query.lms,
      course: req.query.course,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346lmsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc346lms.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      faculty: req.query.faculty,
      lms: req.query.lms,
      course: req.query.course,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc346lmscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc346lms.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc346lmsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc346lms.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc351corporatebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc351corporate.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351corporatebydep = async (req, res) => {
  try {
    const lcat1233 = await doc351corporate.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351corporatebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc351corporate.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351corporatedocs = async (req, res) => {
  try {
    const lcat1233 = await doc351corporate.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351corporatelinks = async (req, res) => {
  try {
    const lcat1233 = await doc351corporate.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc351corporatebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc351corporate.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      corporate: req.query.corporate,
      training: req.query.training,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351corporatebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc351corporate.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      corporate: req.query.corporate,
      training: req.query.training,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351corporatecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc351corporate.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc351corporatebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc351corporate.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc351consultancybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc351consultancy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351consultancybydep = async (req, res) => {
  try {
    const lcat1233 = await doc351consultancy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351consultancybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc351consultancy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351consultancydocs = async (req, res) => {
  try {
    const lcat1233 = await doc351consultancy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351consultancylinks = async (req, res) => {
  try {
    const lcat1233 = await doc351consultancy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc351consultancybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc351consultancy.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      agency: req.query.agency,
      project: req.query.project,
      fee: req.query.fee,
      faculty: req.query.faculty,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351consultancybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc351consultancy.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      agency: req.query.agency,
      project: req.query.project,
      fee: req.query.fee,
      faculty: req.query.faculty,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351consultancycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc351consultancy.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc351consultancybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc351consultancy.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc351cabyfac = async (req, res) => {
  try {
    const lcat1233 = await doc351ca.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351cabydep = async (req, res) => {
  try {
    const lcat1233 = await doc351ca.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351cabyprog = async (req, res) => {
  try {
    const lcat1233 = await doc351ca.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351cadocs = async (req, res) => {
  try {
    const lcat1233 = await doc351ca.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351calinks = async (req, res) => {
  try {
    const lcat1233 = await doc351ca.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc351cabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc351ca.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351cabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc351ca.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      document: req.query.document,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351cacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc351ca.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc351cabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc351ca.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc351auditbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc351audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351auditbydep = async (req, res) => {
  try {
    const lcat1233 = await doc351audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351auditbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc351audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351auditdocs = async (req, res) => {
  try {
    const lcat1233 = await doc351audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc351auditlinks = async (req, res) => {
  try {
    const lcat1233 = await doc351audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc351auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc351audit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      audit: req.query.audit,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc351audit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      audit: req.query.audit,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc351auditcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc351audit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc351auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc351audit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc362photosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc362photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc362photosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc362photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc362photosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc362photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc362photosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc362photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc362photoslinks = async (req, res) => {
  try {
    const lcat1233 = await doc362photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc362photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc362photos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc362photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc362photos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      report: req.query.report,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc362photoscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc362photos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc362photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc362photos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc371msummarybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc371msummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc371msummarybydep = async (req, res) => {
  try {
    const lcat1233 = await doc371msummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc371msummarybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc371msummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc371msummarydocs = async (req, res) => {
  try {
    const lcat1233 = await doc371msummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc371msummarylinks = async (req, res) => {
  try {
    const lcat1233 = await doc371msummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc371msummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc371msummary.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      mou: req.query.mou,
      summary: req.query.summary,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      nature: req.query.nature,
      activities: req.query.activities,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc371msummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc371msummary.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      mou: req.query.mou,
      summary: req.query.summary,
      startdate: req.query.startdate,
      enddate: req.query.enddate,
      nature: req.query.nature,
      activities: req.query.activities,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc371msummarycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc371msummary.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc371msummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc371msummary.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc432stockbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc432stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432stockbydep = async (req, res) => {
  try {
    const lcat1233 = await doc432stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432stockbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc432stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432stockdocs = async (req, res) => {
  try {
    const lcat1233 = await doc432stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432stocklinks = async (req, res) => {
  try {
    const lcat1233 = await doc432stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc432stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc432stock.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      buydate: req.query.buydate,
      department: req.query.department,
      assetcode: req.query.assetcode,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc432stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc432stock.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      buydate: req.query.buydate,
      department: req.query.department,
      assetcode: req.query.assetcode,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc432stockcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc432stock.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc432stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc432stock.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc432billsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc432bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432billsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc432bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432billsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc432bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432billsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc432bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc432billslinks = async (req, res) => {
  try {
    const lcat1233 = await doc432bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc432billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc432bills.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      asset: req.query.asset,
      assetcode: req.query.assetcode,
      buydate: req.query.buydate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc432billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc432bills.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      asset: req.query.asset,
      assetcode: req.query.assetcode,
      buydate: req.query.buydate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc432billscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc432bills.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc432billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc432bills.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc433photosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc433photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433photosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc433photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433photosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc433photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433photosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc433photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433photoslinks = async (req, res) => {
  try {
    const lcat1233 = await doc433photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc433photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc433photos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facilty: req.query.facilty,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc433photos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facilty: req.query.facilty,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433photoscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc433photos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc433photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc433photos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc433stockbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc433stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433stockbydep = async (req, res) => {
  try {
    const lcat1233 = await doc433stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433stockbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc433stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433stockdocs = async (req, res) => {
  try {
    const lcat1233 = await doc433stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433stocklinks = async (req, res) => {
  try {
    const lcat1233 = await doc433stock.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc433stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc433stock.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      buydate: req.query.buydate,
      department: req.query.department,
      assetcode: req.query.assetcode,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc433stock.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      buydate: req.query.buydate,
      department: req.query.department,
      assetcode: req.query.assetcode,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433stockcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc433stock.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc433stockbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc433stock.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc433billsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc433bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433billsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc433bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433billsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc433bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433billsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc433bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc433billslinks = async (req, res) => {
  try {
    const lcat1233 = await doc433bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc433billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc433bills.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      asset: req.query.asset,
      assetcode: req.query.assetcode,
      buydate: req.query.buydate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc433bills.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      asset: req.query.asset,
      assetcode: req.query.assetcode,
      buydate: req.query.buydate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc433billscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc433bills.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc433billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc433bills.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc511studentsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc511students.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511studentsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc511students.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511studentsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc511students.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511studentsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc511students.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511studentslinks = async (req, res) => {
  try {
    const lcat1233 = await doc511students.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc511studentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc511students.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      scholarship: req.query.scholarship,
      type: req.query.type,
      student: req.query.student,
      regno: req.query.regno,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc511studentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc511students.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      scholarship: req.query.scholarship,
      type: req.query.type,
      student: req.query.student,
      regno: req.query.regno,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc511studentscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc511students.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc511studentsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc511students.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc511policybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc511policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511policybydep = async (req, res) => {
  try {
    const lcat1233 = await doc511policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511policybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc511policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511policydocs = async (req, res) => {
  try {
    const lcat1233 = await doc511policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc511policylinks = async (req, res) => {
  try {
    const lcat1233 = await doc511policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc511policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc511policy.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Scholarhsip: req.query.Scholarhsip,
      policy: req.query.policy,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc511policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc511policy.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      Scholarhsip: req.query.Scholarhsip,
      policy: req.query.policy,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc511policycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc511policy.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc511policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc511policy.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc513skillsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc513skills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513skillsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc513skills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513skillsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc513skills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513skillsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc513skills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513skillslinks = async (req, res) => {
  try {
    const lcat1233 = await doc513skills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc513skillsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc513skills.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513skillsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc513skills.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513skillscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc513skills.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc513skillsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc513skills.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc513lifebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc513life.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513lifebydep = async (req, res) => {
  try {
    const lcat1233 = await doc513life.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513lifebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc513life.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513lifedocs = async (req, res) => {
  try {
    const lcat1233 = await doc513life.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513lifelinks = async (req, res) => {
  try {
    const lcat1233 = await doc513life.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc513lifebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc513life.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513lifebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc513life.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513lifecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc513life.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc513lifebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc513life.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc513langbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc513lang.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513langbydep = async (req, res) => {
  try {
    const lcat1233 = await doc513lang.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513langbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc513lang.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513langdocs = async (req, res) => {
  try {
    const lcat1233 = await doc513lang.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513langlinks = async (req, res) => {
  try {
    const lcat1233 = await doc513lang.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc513langbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc513lang.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513langbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc513lang.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513langcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc513lang.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc513langbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc513lang.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc513ictbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc513ict.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513ictbydep = async (req, res) => {
  try {
    const lcat1233 = await doc513ict.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513ictbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc513ict.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513ictdocs = async (req, res) => {
  try {
    const lcat1233 = await doc513ict.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc513ictlinks = async (req, res) => {
  try {
    const lcat1233 = await doc513ict.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc513ictbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc513ict.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513ictbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc513ict.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc513ictcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc513ict.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc513ictbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc513ict.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc514awarenessbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc514awareness.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514awarenessbydep = async (req, res) => {
  try {
    const lcat1233 = await doc514awareness.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514awarenessbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc514awareness.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514awarenessdocs = async (req, res) => {
  try {
    const lcat1233 = await doc514awareness.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514awarenesslinks = async (req, res) => {
  try {
    const lcat1233 = await doc514awareness.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc514awarenessbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc514awareness.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514awarenessbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc514awareness.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514awarenesscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc514awareness.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc514awarenessbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc514awareness.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc514submissionbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc514submission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514submissionbydep = async (req, res) => {
  try {
    const lcat1233 = await doc514submission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514submissionbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc514submission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514submissiondocs = async (req, res) => {
  try {
    const lcat1233 = await doc514submission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514submissionlinks = async (req, res) => {
  try {
    const lcat1233 = await doc514submission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc514submissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc514submission.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      grievance: req.query.grievance,
      mechanism: req.query.mechanism,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514submissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc514submission.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      grievance: req.query.grievance,
      mechanism: req.query.mechanism,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514submissioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc514submission.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc514submissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc514submission.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc514implementationbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc514implementation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514implementationbydep = async (req, res) => {
  try {
    const lcat1233 = await doc514implementation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514implementationbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc514implementation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514implementationdocs = async (req, res) => {
  try {
    const lcat1233 = await doc514implementation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514implementationlinks = async (req, res) => {
  try {
    const lcat1233 = await doc514implementation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc514implementationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc514implementation.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      grievance: req.query.grievance,
      implementation: req.query.implementation,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514implementationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc514implementation.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      grievance: req.query.grievance,
      implementation: req.query.implementation,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514implementationcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc514implementation.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc514implementationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc514implementation.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc514combyfac = async (req, res) => {
  try {
    const lcat1233 = await doc514com.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514combydep = async (req, res) => {
  try {
    const lcat1233 = await doc514com.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514combyprog = async (req, res) => {
  try {
    const lcat1233 = await doc514com.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514comdocs = async (req, res) => {
  try {
    const lcat1233 = await doc514com.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514comlinks = async (req, res) => {
  try {
    const lcat1233 = await doc514com.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc514combyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc514com.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      members: req.query.members,
      contact: req.query.contact,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514combyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc514com.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      committee: req.query.committee,
      members: req.query.members,
      contact: req.query.contact,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514comcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc514com.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc514combyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc514com.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc514annualbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc514annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514annualbydep = async (req, res) => {
  try {
    const lcat1233 = await doc514annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514annualbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc514annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514annualdocs = async (req, res) => {
  try {
    const lcat1233 = await doc514annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc514annuallinks = async (req, res) => {
  try {
    const lcat1233 = await doc514annual.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc514annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc514annual.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      reportdate: req.query.reportdate,
      issues: req.query.issues,
      action: req.query.action,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc514annual.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      committee: req.query.committee,
      reportdate: req.query.reportdate,
      issues: req.query.issues,
      action: req.query.action,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc514annualcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc514annual.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc514annualbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc514annual.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc523studlistbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc523studlist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc523studlistbydep = async (req, res) => {
  try {
    const lcat1233 = await doc523studlist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc523studlistbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc523studlist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc523studlistdocs = async (req, res) => {
  try {
    const lcat1233 = await doc523studlist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc523studlistlinks = async (req, res) => {
  try {
    const lcat1233 = await doc523studlist.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc523studlistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc523studlist.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      category: req.query.category,
      exam: req.query.exam,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc523studlistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc523studlist.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      regno: req.query.regno,
      category: req.query.category,
      exam: req.query.exam,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc523studlistcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc523studlist.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc523studlistbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc523studlist.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc533festbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc533fest.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533festbydep = async (req, res) => {
  try {
    const lcat1233 = await doc533fest.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533festbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc533fest.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533festdocs = async (req, res) => {
  try {
    const lcat1233 = await doc533fest.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533festlinks = async (req, res) => {
  try {
    const lcat1233 = await doc533fest.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc533festbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc533fest.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533festbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc533fest.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533festcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc533fest.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc533festbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc533fest.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc533sportsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc533sports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533sportsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc533sports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533sportsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc533sports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533sportsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc533sports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533sportslinks = async (req, res) => {
  try {
    const lcat1233 = await doc533sports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc533sportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc533sports.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533sportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc533sports.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533sportscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc533sports.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc533sportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc533sports.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc533culturalbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc533cultural.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533culturalbydep = async (req, res) => {
  try {
    const lcat1233 = await doc533cultural.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533culturalbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc533cultural.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533culturaldocs = async (req, res) => {
  try {
    const lcat1233 = await doc533cultural.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533culturallinks = async (req, res) => {
  try {
    const lcat1233 = await doc533cultural.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc533culturalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc533cultural.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533culturalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc533cultural.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533culturalcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc533cultural.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc533culturalbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc533cultural.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc533clubsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc533clubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533clubsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc533clubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533clubsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc533clubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533clubsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc533clubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc533clubslinks = async (req, res) => {
  try {
    const lcat1233 = await doc533clubs.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc533clubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc533clubs.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533clubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc533clubs.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc533clubscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc533clubs.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc533clubsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc533clubs.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc622screenbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc622screen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622screenbydep = async (req, res) => {
  try {
    const lcat1233 = await doc622screen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622screenbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc622screen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622screendocs = async (req, res) => {
  try {
    const lcat1233 = await doc622screen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622screenlinks = async (req, res) => {
  try {
    const lcat1233 = await doc622screen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc622screenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc622screen.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      software: req.query.software,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc622screenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc622screen.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      software: req.query.software,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc622screencomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc622screen.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc622screenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc622screen.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc622egrepbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc622egrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622egrepbydep = async (req, res) => {
  try {
    const lcat1233 = await doc622egrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622egrepbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc622egrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622egrepdocs = async (req, res) => {
  try {
    const lcat1233 = await doc622egrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc622egreplinks = async (req, res) => {
  try {
    const lcat1233 = await doc622egrep.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc622egrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc622egrep.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      approvedby: req.query.approvedby,
      approveddate: req.query.approveddate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc622egrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc622egrep.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      report: req.query.report,
      approvedby: req.query.approvedby,
      approveddate: req.query.approveddate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc622egrepcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc622egrep.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc622egrepbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc622egrep.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc632policybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc632policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632policybydep = async (req, res) => {
  try {
    const lcat1233 = await doc632policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632policybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc632policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632policydocs = async (req, res) => {
  try {
    const lcat1233 = await doc632policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632policylinks = async (req, res) => {
  try {
    const lcat1233 = await doc632policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc632policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc632policy.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      policy: req.query.policy,
      approvedon: req.query.approvedon,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc632policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc632policy.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      policy: req.query.policy,
      approvedon: req.query.approvedon,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc632policycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc632policy.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc632policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc632policy.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc632auditbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc632audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632auditbydep = async (req, res) => {
  try {
    const lcat1233 = await doc632audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632auditbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc632audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632auditdocs = async (req, res) => {
  try {
    const lcat1233 = await doc632audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc632auditlinks = async (req, res) => {
  try {
    const lcat1233 = await doc632audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc632auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc632audit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc632auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc632audit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc632auditcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc632audit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc632auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc632audit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc642auditbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc642audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc642auditbydep = async (req, res) => {
  try {
    const lcat1233 = await doc642audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc642auditbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc642audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc642auditdocs = async (req, res) => {
  try {
    const lcat1233 = await doc642audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc642auditlinks = async (req, res) => {
  try {
    const lcat1233 = await doc642audit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc642auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc642audit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc642auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc642audit.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      item: req.query.item,
      type: req.query.type,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc642auditcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc642audit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc642auditbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc642audit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc652byfac = async (req, res) => {
  try {
    const lcat1233 = await doc652.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652bydep = async (req, res) => {
  try {
    const lcat1233 = await doc652.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652byprog = async (req, res) => {
  try {
    const lcat1233 = await doc652.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652docs = async (req, res) => {
  try {
    const lcat1233 = await doc652.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652links = async (req, res) => {
  try {
    const lcat1233 = await doc652.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc652byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc652.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      accreditation: req.query.accreditation,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc652.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      accreditation: req.query.accreditation,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc652.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc652byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc652.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc652orientationbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc652orientation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652orientationbydep = async (req, res) => {
  try {
    const lcat1233 = await doc652orientation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652orientationbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc652orientation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652orientationdocs = async (req, res) => {
  try {
    const lcat1233 = await doc652orientation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652orientationlinks = async (req, res) => {
  try {
    const lcat1233 = await doc652orientation.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc652orientationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc652orientation.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652orientationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc652orientation.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652orientationcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc652orientation.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc652orientationbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc652orientation.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc652workshopbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc652workshop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652workshopbydep = async (req, res) => {
  try {
    const lcat1233 = await doc652workshop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652workshopbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc652workshop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652workshopdocs = async (req, res) => {
  try {
    const lcat1233 = await doc652workshop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652workshoplinks = async (req, res) => {
  try {
    const lcat1233 = await doc652workshop.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc652workshopbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc652workshop.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652workshopbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc652workshop.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652workshopcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc652workshop.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc652workshopbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc652workshop.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc652collabbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc652collab.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652collabbydep = async (req, res) => {
  try {
    const lcat1233 = await doc652collab.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652collabbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc652collab.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652collabdocs = async (req, res) => {
  try {
    const lcat1233 = await doc652collab.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc652collablinks = async (req, res) => {
  try {
    const lcat1233 = await doc652collab.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc652collabbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc652collab.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      institution: req.query.institution,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652collabbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc652collab.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      event: req.query.event,
      eventdate: req.query.eventdate,
      institution: req.query.institution,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc652collabcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc652collab.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc652collabbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc652collab.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc712permissionbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc712permission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712permissionbydep = async (req, res) => {
  try {
    const lcat1233 = await doc712permission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712permissionbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc712permission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712permissiondocs = async (req, res) => {
  try {
    const lcat1233 = await doc712permission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712permissionlinks = async (req, res) => {
  try {
    const lcat1233 = await doc712permission.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc712permissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc712permission.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      agency: req.query.agency,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712permissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc712permission.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      agency: req.query.agency,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712permissioncomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc712permission.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc712permissionbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc712permission.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc712photosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc712photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712photosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc712photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712photosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc712photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712photosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc712photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712photoslinks = async (req, res) => {
  try {
    const lcat1233 = await doc712photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc712photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc712photos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc712photos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712photoscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc712photos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc712photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc712photos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc712billbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc712bill.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712billbydep = async (req, res) => {
  try {
    const lcat1233 = await doc712bill.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712billbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc712bill.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712billdocs = async (req, res) => {
  try {
    const lcat1233 = await doc712bill.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc712billlinks = async (req, res) => {
  try {
    const lcat1233 = await doc712bill.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc712billbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc712bill.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      facility: req.query.facility,
      buydate: req.query.buydate,
      groupbill: req.query.groupbill,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712billbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc712bill.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      facility: req.query.facility,
      buydate: req.query.buydate,
      groupbill: req.query.groupbill,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc712billcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc712bill.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc712billbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc712bill.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc714greeenbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc714greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714greeenbydep = async (req, res) => {
  try {
    const lcat1233 = await doc714greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714greeenbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc714greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714greeendocs = async (req, res) => {
  try {
    const lcat1233 = await doc714greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714greeenlinks = async (req, res) => {
  try {
    const lcat1233 = await doc714greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc714greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc714greeen.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      reportdate: req.query.reportdate,
      validtilldate: req.query.validtilldate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc714greeen.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      reportdate: req.query.reportdate,
      validtilldate: req.query.validtilldate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714greeencomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc714greeen.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc714greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc714greeen.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc714photosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc714photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714photosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc714photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714photosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc714photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714photosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc714photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714photoslinks = async (req, res) => {
  try {
    const lcat1233 = await doc714photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc714photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc714photos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc714photos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714photoscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc714photos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc714photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc714photos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc714billsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc714bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714billsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc714bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714billsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc714bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714billsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc714bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc714billslinks = async (req, res) => {
  try {
    const lcat1233 = await doc714bills.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc714billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc714bills.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      facility: req.query.facility,
      billdate: req.query.billdate,
      groupbill: req.query.groupbill,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc714bills.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      facility: req.query.facility,
      billdate: req.query.billdate,
      groupbill: req.query.groupbill,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc714billscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc714bills.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc714billsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc714bills.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc715policybyfac = async (req, res) => {
  try {
    const lcat1233 = await doc715policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715policybydep = async (req, res) => {
  try {
    const lcat1233 = await doc715policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715policybyprog = async (req, res) => {
  try {
    const lcat1233 = await doc715policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715policydocs = async (req, res) => {
  try {
    const lcat1233 = await doc715policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715policylinks = async (req, res) => {
  try {
    const lcat1233 = await doc715policy.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc715policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc715policy.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      policy: req.query.policy,
      description: req.query.description,
      approveddate: req.query.approveddate,
      approvedby: req.query.approvedby,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc715policy.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      policy: req.query.policy,
      description: req.query.description,
      approveddate: req.query.approveddate,
      approvedby: req.query.approvedby,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715policycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc715policy.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc715policybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc715policy.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc715photosbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc715photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715photosbydep = async (req, res) => {
  try {
    const lcat1233 = await doc715photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715photosbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc715photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715photosdocs = async (req, res) => {
  try {
    const lcat1233 = await doc715photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715photoslinks = async (req, res) => {
  try {
    const lcat1233 = await doc715photos.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc715photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc715photos.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc715photos.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      facility: req.query.facility,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715photoscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc715photos.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc715photosbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc715photos.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc715reportsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc715reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715reportsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc715reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715reportsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc715reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715reportsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc715reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc715reportslinks = async (req, res) => {
  try {
    const lcat1233 = await doc715reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc715reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc715reports.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc715reports.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc715reportscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc715reports.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc715reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc715reports.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc716reportsbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc716reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716reportsbydep = async (req, res) => {
  try {
    const lcat1233 = await doc716reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716reportsbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc716reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716reportsdocs = async (req, res) => {
  try {
    const lcat1233 = await doc716reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716reportslinks = async (req, res) => {
  try {
    const lcat1233 = await doc716reports.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc716reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc716reports.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc716reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc716reports.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc716reportscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc716reports.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc716reportsbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc716reports.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc716greeenbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc716greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716greeenbydep = async (req, res) => {
  try {
    const lcat1233 = await doc716greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716greeenbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc716greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716greeendocs = async (req, res) => {
  try {
    const lcat1233 = await doc716greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc716greeenlinks = async (req, res) => {
  try {
    const lcat1233 = await doc716greeen.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc716greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc716greeen.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      reportdate: req.query.reportdate,
      validtilldate: req.query.validtilldate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc716greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc716greeen.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      reportdate: req.query.reportdate,
      validtilldate: req.query.validtilldate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc716greeencomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc716greeen.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc716greeenbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc716greeen.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc7110reportbyfac = async (req, res) => {
  try {
    const lcat1233 = await doc7110report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110reportbydep = async (req, res) => {
  try {
    const lcat1233 = await doc7110report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110reportbyprog = async (req, res) => {
  try {
    const lcat1233 = await doc7110report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110reportdocs = async (req, res) => {
  try {
    const lcat1233 = await doc7110report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110reportlinks = async (req, res) => {
  try {
    const lcat1233 = await doc7110report.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc7110reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc7110report.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      attribute: req.query.attribute,
      description: req.query.description,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc7110reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc7110report.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      attribute: req.query.attribute,
      description: req.query.description,
      eventdate: req.query.eventdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc7110reportcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc7110report.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc7110reportbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc7110report.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdoc7110codebyfac = async (req, res) => {
  try {
    const lcat1233 = await doc7110code.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110codebydep = async (req, res) => {
  try {
    const lcat1233 = await doc7110code.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110codebyprog = async (req, res) => {
  try {
    const lcat1233 = await doc7110code.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110codedocs = async (req, res) => {
  try {
    const lcat1233 = await doc7110code.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.doc7110codelinks = async (req, res) => {
  try {
    const lcat1233 = await doc7110code.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdoc7110codebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await doc7110code.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      item: req.query.item,
      type: req.query.type,
      approvedby: req.query.approvedby,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc7110codebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await doc7110code.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      item: req.query.item,
      type: req.query.type,
      approvedby: req.query.approvedby,
      description: req.query.description,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedoc7110codecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await doc7110code.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedoc7110codebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await doc7110code.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Dec 14 2023

exports.getaauc1byfac = async (req, res) => {
  try {
    const lcat1233 = await aauc1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc1bydep = async (req, res) => {
  try {
    const lcat1233 = await aauc1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc1byprog = async (req, res) => {
  try {
    const lcat1233 = await aauc1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc1docs = async (req, res) => {
  try {
    const lcat1233 = await aauc1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc1links = async (req, res) => {
  try {
    const lcat1233 = await aauc1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaauc1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aauc1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institution: req.query.institution,
      address: req.query.address,
      pincode: req.query.pincode,
      phone: req.query.phone,
      fax: req.query.fax,
      website: req.query.website,
      email: req.query.email,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaauc1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aauc1.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institution: req.query.institution,
      address: req.query.address,
      pincode: req.query.pincode,
      phone: req.query.phone,
      fax: req.query.fax,
      website: req.query.website,
      email: req.query.email,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaauc1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aauc1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaauc1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aauc1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaauc2byfac = async (req, res) => {
  try {
    const lcat1233 = await aauc2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc2bydep = async (req, res) => {
  try {
    const lcat1233 = await aauc2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc2byprog = async (req, res) => {
  try {
    const lcat1233 = await aauc2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc2docs = async (req, res) => {
  try {
    const lcat1233 = await aauc2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aauc2links = async (req, res) => {
  try {
    const lcat1233 = await aauc2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaauc2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aauc2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      affiliation: req.query.affiliation,
      program: req.query.program,
      type: req.query.type,
      year: req.query.year,
      sanction: req.query.sanction,
      requested: req.query.requested,
      commno: req.query.commno,
      apptype: req.query.apptype,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaauc2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aauc2.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      affiliation: req.query.affiliation,
      program: req.query.program,
      type: req.query.type,
      year: req.query.year,
      sanction: req.query.sanction,
      requested: req.query.requested,
      commno: req.query.commno,
      apptype: req.query.apptype,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaauc2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aauc2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaauc2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aauc2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaaucotherbyfac = async (req, res) => {
  try {
    const lcat1233 = await aaucother.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucotherbydep = async (req, res) => {
  try {
    const lcat1233 = await aaucother.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucotherbyprog = async (req, res) => {
  try {
    const lcat1233 = await aaucother.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucotherdocs = async (req, res) => {
  try {
    const lcat1233 = await aaucother.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucotherlinks = async (req, res) => {
  try {
    const lcat1233 = await aaucother.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucotherbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucother.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      anybreak: req.query.anybreak,
      permanent: req.query.permanent,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucotherbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucother.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      anybreak: req.query.anybreak,
      permanent: req.query.permanent,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucothercomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucother.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucotherbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucother.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaaucfeesbyfac = async (req, res) => {
  try {
    const lcat1233 = await aaucfees.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfeesbydep = async (req, res) => {
  try {
    const lcat1233 = await aaucfees.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfeesbyprog = async (req, res) => {
  try {
    const lcat1233 = await aaucfees.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfeesdocs = async (req, res) => {
  try {
    const lcat1233 = await aaucfees.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfeeslinks = async (req, res) => {
  try {
    const lcat1233 = await aaucfees.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucfeesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucfees.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      draftno: req.query.draftno,
      draftdate: req.query.draftdate,
      bank: req.query.bank,
      purpose: req.query.purpose,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucfeesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucfees.findByIdAndUpdate(req.query.id, {
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      draftno: req.query.draftno,
      draftdate: req.query.draftdate,
      bank: req.query.bank,
      purpose: req.query.purpose,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucfeescomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucfees.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucfeesbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucfees.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// dec 19 2023

exports.getaaucn1byfac = async (req, res) => {
  try {
    const lcat1233 = await aaucn1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn1bydep = async (req, res) => {
  try {
    const lcat1233 = await aaucn1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn1byprog = async (req, res) => {
  try {
    const lcat1233 = await aaucn1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn1docs = async (req, res) => {
  try {
    const lcat1233 = await aaucn1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn1links = async (req, res) => {
  try {
    const lcat1233 = await aaucn1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucn1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucn1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      institution: req.query.institution,
      address: req.query.address,
      pincode: req.query.pincode,
      phone: req.query.phone,
      fax: req.query.fax,
      website: req.query.website,
      email: req.query.email,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucn1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucn1.findByIdAndUpdate(req.query.id, {
      institution: req.query.institution,
      address: req.query.address,
      pincode: req.query.pincode,
      phone: req.query.phone,
      fax: req.query.fax,
      website: req.query.website,
      email: req.query.email,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucn1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucn1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucn1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucn1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaaucn2byfac = async (req, res) => {
  try {
    const lcat1233 = await aaucn2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn2bydep = async (req, res) => {
  try {
    const lcat1233 = await aaucn2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn2byprog = async (req, res) => {
  try {
    const lcat1233 = await aaucn2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn2docs = async (req, res) => {
  try {
    const lcat1233 = await aaucn2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucn2links = async (req, res) => {
  try {
    const lcat1233 = await aaucn2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucn2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucn2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      program: req.query.program,
      type: req.query.type,
      requested: req.query.requested,
      applied: req.query.applied,
      medium: req.query.medium,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucn2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucn2.findByIdAndUpdate(req.query.id, {
      program: req.query.program,
      type: req.query.type,
      requested: req.query.requested,
      applied: req.query.applied,
      medium: req.query.medium,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucn2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucn2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucn2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucn2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaaucfees2byfac = async (req, res) => {
  try {
    const lcat1233 = await aaucfees2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfees2bydep = async (req, res) => {
  try {
    const lcat1233 = await aaucfees2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfees2byprog = async (req, res) => {
  try {
    const lcat1233 = await aaucfees2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfees2docs = async (req, res) => {
  try {
    const lcat1233 = await aaucfees2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucfees2links = async (req, res) => {
  try {
    const lcat1233 = await aaucfees2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucfees2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucfees2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      draftno: req.query.draftno,
      draftdate: req.query.draftdate,
      bank: req.query.bank,
      purpose: req.query.purpose,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucfees2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucfees2.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      draftno: req.query.draftno,
      draftdate: req.query.draftdate,
      bank: req.query.bank,
      purpose: req.query.purpose,
      amount: req.query.amount,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucfees2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucfees2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucfees2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucfees2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getaaucother2byfac = async (req, res) => {
  try {
    const lcat1233 = await aaucother2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucother2bydep = async (req, res) => {
  try {
    const lcat1233 = await aaucother2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucother2byprog = async (req, res) => {
  try {
    const lcat1233 = await aaucother2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucother2docs = async (req, res) => {
  try {
    const lcat1233 = await aaucother2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aaucother2links = async (req, res) => {
  try {
    const lcat1233 = await aaucother2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaaucother2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aaucother2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      permanent: req.query.permanent,
      reason: req.query.reason,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucother2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aaucother2.findByIdAndUpdate(req.query.id, {
      permanent: req.query.permanent,
      reason: req.query.reason,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaaucother2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aaucother2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaaucother2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aaucother2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Dec 22 2023

exports.getaustudubyfac = async (req, res) => {
  try {
    const lcat1233 = await austudu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudubydep = async (req, res) => {
  try {
    const lcat1233 = await austudu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudubyprog = async (req, res) => {
  try {
    const lcat1233 = await austudu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austududocs = async (req, res) => {
  try {
    const lcat1233 = await austudu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudulinks = async (req, res) => {
  try {
    const lcat1233 = await austudu.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaustudubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await austudu.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      inscode: req.query.inscode,
      institution: req.query.institution,
      admyear: req.query.admyear,
      department: req.query.department,
      programcode: req.query.programcode,
      programcode: req.query.programcode,
      lateral: req.query.lateral,
      section: req.query.section,
      rollno: req.query.rollno,
      regno: req.query.regno,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      nationality: req.query.nationality,
      studstatus: req.query.studstatus,
      medium: req.query.medium,
      aadhar: req.query.aadhar,
      email: req.query.email,
      mobile: req.query.mobile,
      emis: req.query.emis,
      hscboard: req.query.hscboard,
      uguniv: req.query.uguniv,
      diffabled: req.query.diffabled,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaustudubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await austudu.findByIdAndUpdate(req.query.id, {
      inscode: req.query.inscode,
      institution: req.query.institution,
      admyear: req.query.admyear,
      department: req.query.department,
      programcode: req.query.programcode,
      programcode: req.query.programcode,
      lateral: req.query.lateral,
      section: req.query.section,
      rollno: req.query.rollno,
      regno: req.query.regno,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      nationality: req.query.nationality,
      studstatus: req.query.studstatus,
      medium: req.query.medium,
      aadhar: req.query.aadhar,
      email: req.query.email,
      mobile: req.query.mobile,
      emis: req.query.emis,
      hscboard: req.query.hscboard,
      uguniv: req.query.uguniv,
      diffabled: req.query.diffabled,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaustuducomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await austudu.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaustudubyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await austudu.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Dec 22 2023 1

exports.getaustudu1byfac = async (req, res) => {
  try {
    const lcat1233 = await austudu1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudu1bydep = async (req, res) => {
  try {
    const lcat1233 = await austudu1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudu1byprog = async (req, res) => {
  try {
    const lcat1233 = await austudu1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudu1docs = async (req, res) => {
  try {
    const lcat1233 = await austudu1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.austudu1links = async (req, res) => {
  try {
    const lcat1233 = await austudu1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaustudu1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await austudu1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      inscode: req.query.inscode,
      institution: req.query.institution,
      admyear: req.query.admyear,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      lateral: req.query.lateral,
      section: req.query.section,
      rollno: req.query.rollno,
      regno: req.query.regno,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      nationality: req.query.nationality,
      studstatus: req.query.studstatus,
      medium: req.query.medium,
      aadhar: req.query.aadhar,
      email: req.query.email,
      mobile: req.query.mobile,
      emis: req.query.emis,
      hscboard: req.query.hscboard,
      uguniv: req.query.uguniv,
      diffabled: req.query.diffabled,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaustudu1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await austudu1.findByIdAndUpdate(req.query.id, {
      inscode: req.query.inscode,
      institution: req.query.institution,
      admyear: req.query.admyear,
      department: req.query.department,
      programcode: req.query.programcode,
      program: req.query.program,
      lateral: req.query.lateral,
      section: req.query.section,
      rollno: req.query.rollno,
      regno: req.query.regno,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      nationality: req.query.nationality,
      studstatus: req.query.studstatus,
      medium: req.query.medium,
      aadhar: req.query.aadhar,
      email: req.query.email,
      mobile: req.query.mobile,
      emis: req.query.emis,
      hscboard: req.query.hscboard,
      uguniv: req.query.uguniv,
      diffabled: req.query.diffabled,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaustudu1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await austudu1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaustudu1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await austudu1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jan 21 2024

exports.getpasspercentbyfac = async (req, res) => {
  try {
    const lcat1233 = await passpercent.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.passpercentbydep = async (req, res) => {
  try {
    const lcat1233 = await passpercent.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.passpercentbyprog = async (req, res) => {
  try {
    const lcat1233 = await passpercent.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.passpercentdocs = async (req, res) => {
  try {
    const lcat1233 = await passpercent.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.passpercentlinks = async (req, res) => {
  try {
    const lcat1233 = await passpercent.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpasspercentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await passpercent.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      programcode: req.query.programcode,
      program: req.query.program,
      student: req.query.student,
      ifpass: req.query.ifpass,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepasspercentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await passpercent.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      programcode: req.query.programcode,
      program: req.query.program,
      student: req.query.student,
      ifpass: req.query.ifpass,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepasspercentcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await passpercent.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepasspercentbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await passpercent.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getnugrievancebyfac = async (req, res) => {
  try {
    const lcat1233 = await nugrievance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nugrievancebydep = async (req, res) => {
  try {
    const lcat1233 = await nugrievance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nugrievancebyprog = async (req, res) => {
  try {
    const lcat1233 = await nugrievance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nugrievancedocs = async (req, res) => {
  try {
    const lcat1233 = await nugrievance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.nugrievancelinks = async (req, res) => {
  try {
    const lcat1233 = await nugrievance.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createnugrievancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await nugrievance.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      studentname: req.query.studentname,
      typeofgrievance: req.query.typeofgrievance,
      routcome: req.query.routcome,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenugrievancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await nugrievance.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      studentname: req.query.studentname,
      typeofgrievance: req.query.typeofgrievance,
      routcome: req.query.routcome,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatenugrievancecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await nugrievance.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletenugrievancebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await nugrievance.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 4 2024

exports.getauattbyfac = async (req, res) => {
  try {
    const lcat1233 = await auatt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattbydep = async (req, res) => {
  try {
    const lcat1233 = await auatt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattbyprog = async (req, res) => {
  try {
    const lcat1233 = await auatt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattdocs = async (req, res) => {
  try {
    const lcat1233 = await auatt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattlinks = async (req, res) => {
  try {
    const lcat1233 = await auatt.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createauattbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await auatt.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      umis: req.query.umis,
      attdate: req.query.attdate,
      attstatus: req.query.attstatus,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateauattbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await auatt.findByIdAndUpdate(req.query.id, {
      collegecode: req.query.collegecode,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      umis: req.query.umis,
      attdate: req.query.attdate,
      attstatus: req.query.attstatus,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateauattcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await auatt.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteauattbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await auatt.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getauattsummarybyfac = async (req, res) => {
  try {
    const lcat1233 = await auattsummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattsummarybydep = async (req, res) => {
  try {
    const lcat1233 = await auattsummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattsummarybyprog = async (req, res) => {
  try {
    const lcat1233 = await auattsummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattsummarydocs = async (req, res) => {
  try {
    const lcat1233 = await auattsummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.auattsummarylinks = async (req, res) => {
  try {
    const lcat1233 = await auattsummary.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createauattsummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await auattsummary.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      umis: req.query.umis,
      attpercentage: req.query.attpercentage,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateauattsummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await auattsummary.findByIdAndUpdate(req.query.id, {
      collegecode: req.query.collegecode,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      course: req.query.course,
      coursecode: req.query.coursecode,
      student: req.query.student,
      regno: req.query.regno,
      umis: req.query.umis,
      attpercentage: req.query.attpercentage,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateauattsummarycomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await auattsummary.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteauattsummarybyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await auattsummary.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 14 2024

exports.getpstatusnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await pstatusnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pstatusnewbydep = async (req, res) => {
  try {
    const lcat1233 = await pstatusnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pstatusnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await pstatusnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pstatusnewdocs = async (req, res) => {
  try {
    const lcat1233 = await pstatusnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pstatusnewlinks = async (req, res) => {
  try {
    const lcat1233 = await pstatusnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpstatusnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pstatusnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      client: req.query.client,
      criteria: req.query.criteria,
      metric: req.query.metric,
      documents: req.query.documents,
      providedby: req.query.providedby,
      docstatus: req.query.docstatus,
      remarks: req.query.remarks,
      updatedate: req.query.updatedate,
      link: req.query.link,
      owner: req.query.owner,
      email: req.query.email,
      phone: req.query.phone,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepstatusnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pstatusnew.findByIdAndUpdate(req.query.id, {
      client: req.query.client,
      criteria: req.query.criteria,
      metric: req.query.metric,
      documents: req.query.documents,
      providedby: req.query.providedby,
      docstatus: req.query.docstatus,
      remarks: req.query.remarks,
      updatedate: req.query.updatedate,
      link: req.query.link,
      owner: req.query.owner,
      email: req.query.email,
      phone: req.query.phone,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepstatusnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pstatusnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepstatusnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pstatusnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getseedaddbyfac = async (req, res) => {
  try {
    const lcat1233 = await seedadd.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seedaddbydep = async (req, res) => {
  try {
    const lcat1233 = await seedadd.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seedaddbyprog = async (req, res) => {
  try {
    const lcat1233 = await seedadd.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seedadddocs = async (req, res) => {
  try {
    const lcat1233 = await seedadd.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.seedaddlinks = async (req, res) => {
  try {
    const lcat1233 = await seedadd.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createseedaddbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await seedadd.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      project: req.query.project,
      year: req.query.year,
      disbursed: req.query.disbursed,
      sanctioned: req.query.sanctioned,
      manpower: req.query.manpower,
      equipments: req.query.equipments,
      consumables: req.query.consumables,
      contingency: req.query.contingency,
      purchased: req.query.purchased,
      refno: req.query.refno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateseedaddbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await seedadd.findByIdAndUpdate(req.query.id, {
      faculty: req.query.faculty,
      project: req.query.project,
      year: req.query.year,
      disbursed: req.query.disbursed,
      sanctioned: req.query.sanctioned,
      manpower: req.query.manpower,
      equipments: req.query.equipments,
      consumables: req.query.consumables,
      contingency: req.query.contingency,
      purchased: req.query.purchased,
      refno: req.query.refno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateseedaddcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await seedadd.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteseedaddbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await seedadd.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getphddeclarebyfac = async (req, res) => {
  try {
    const lcat1233 = await phddeclare.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.phddeclarebydep = async (req, res) => {
  try {
    const lcat1233 = await phddeclare.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.phddeclarebyprog = async (req, res) => {
  try {
    const lcat1233 = await phddeclare.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.phddeclaredocs = async (req, res) => {
  try {
    const lcat1233 = await phddeclare.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.phddeclarelinks = async (req, res) => {
  try {
    const lcat1233 = await phddeclare.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createphddeclarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await phddeclare.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      phdyear: req.query.phdyear,
      university: req.query.university,
      subject: req.query.subject,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatephddeclarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await phddeclare.findByIdAndUpdate(req.query.id, {
      faculty: req.query.faculty,
      phdyear: req.query.phdyear,
      university: req.query.university,
      subject: req.query.subject,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatephddeclarecomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await phddeclare.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletephddeclarebyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await phddeclare.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getpfacmasterbyfac = async (req, res) => {
  try {
    const lcat1233 = await pfacmaster.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfacmasterbydep = async (req, res) => {
  try {
    const lcat1233 = await pfacmaster.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfacmasterbyprog = async (req, res) => {
  try {
    const lcat1233 = await pfacmaster.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfacmasterdocs = async (req, res) => {
  try {
    const lcat1233 = await pfacmaster.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.pfacmasterlinks = async (req, res) => {
  try {
    const lcat1233 = await pfacmaster.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createpfacmasterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await pfacmaster.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      faculty: req.query.faculty,
      academicyear: req.query.academicyear,
      phd: req.query.phd,
      designation: req.query.designation,
      islatest: req.query.islatest,
      publication: req.query.publication,
      book: req.query.book,
      patent: req.query.patent,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepfacmasterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await pfacmaster.findByIdAndUpdate(req.query.id, {
      faculty: req.query.faculty,
      academicyear: req.query.academicyear,
      phd: req.query.phd,
      designation: req.query.designation,
      islatest: req.query.islatest,
      publication: req.query.publication,
      book: req.query.book,
      patent: req.query.patent,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatepfacmastercomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await pfacmaster.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletepfacmasterbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await pfacmaster.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 17

exports.getvacnew1byfac = async (req, res) => {
  try {
    const lcat1233 = await vacnew1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew1bydep = async (req, res) => {
  try {
    const lcat1233 = await vacnew1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew1byprog = async (req, res) => {
  try {
    const lcat1233 = await vacnew1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew1docs = async (req, res) => {
  try {
    const lcat1233 = await vacnew1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew1links = async (req, res) => {
  try {
    const lcat1233 = await vacnew1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createvacnew1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await vacnew1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      period: req.query.period,
      duration: req.query.duration,
      enrolled: req.query.enrolled,
      completed: req.query.completed,
      startdate: req.query.startdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacnew1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await vacnew1.findByIdAndUpdate(req.query.id, {
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      period: req.query.period,
      duration: req.query.duration,
      enrolled: req.query.enrolled,
      completed: req.query.completed,
      startdate: req.query.startdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacnew1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await vacnew1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletevacnew1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await vacnew1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getvacstudents1byfac = async (req, res) => {
  try {
    const lcat1233 = await vacstudents1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudents1bydep = async (req, res) => {
  try {
    const lcat1233 = await vacstudents1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudents1byprog = async (req, res) => {
  try {
    const lcat1233 = await vacstudents1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudents1docs = async (req, res) => {
  try {
    const lcat1233 = await vacstudents1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacstudents1links = async (req, res) => {
  try {
    const lcat1233 = await vacstudents1.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createvacstudents1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await vacstudents1.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacstudents1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await vacstudents1.findByIdAndUpdate(req.query.id, {
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      student: req.query.student,
      regno: req.query.regno,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacstudents1comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await vacstudents1.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletevacstudents1byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await vacstudents1.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 21

exports.getvacnew2byfac = async (req, res) => {
  try {
    const lcat1233 = await vacnew2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew2bydep = async (req, res) => {
  try {
    const lcat1233 = await vacnew2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew2byprog = async (req, res) => {
  try {
    const lcat1233 = await vacnew2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew2docs = async (req, res) => {
  try {
    const lcat1233 = await vacnew2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.vacnew2links = async (req, res) => {
  try {
    const lcat1233 = await vacnew2.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createvacnew2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await vacnew2.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      period: req.query.period,
      coursehours: req.query.coursehours,
      duration: req.query.duration,
      enrolled: req.query.enrolled,
      completed: req.query.completed,
      startdate: req.query.startdate,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacnew2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await vacnew2.findByIdAndUpdate(req.query.id, {
      course: req.query.course,
      coursecode: req.query.coursecode,
      year: req.query.year,
      period: req.query.period,
      coursehours: req.query.coursehours,
      duration: req.query.duration,
      enrolled: req.query.enrolled,
      completed: req.query.completed,
      startdate: req.query.startdate,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatevacnew2comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await vacnew2.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletevacnew2byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await vacnew2.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 24

exports.assignmentlinksnew = async (req, res) => {
  try {
    const user1 = req.query.user;
    const lcat1233 = await assignment.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: user1,
          coursecode: req.query.coursecode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getassignsubmitbyfac = async (req, res) => {
  try {
    const lcat1233 = await assignsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          assignmentid: req.query.assignmentid,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignsubmitbydep = async (req, res) => {
  try {
    const lcat1233 = await assignsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignsubmitbyprog = async (req, res) => {
  try {
    const lcat1233 = await assignsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignsubmitdocs = async (req, res) => {
  try {
    const lcat1233 = await assignsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.assignsubmitlinks = async (req, res) => {
  try {
    const lcat1233 = await assignsubmit.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createassignsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await assignsubmit.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      regno: req.query.regno,
      coursecode: req.query.coursecode,
      assignmentid: req.query.assignmentid,
      assignmentid: req.query.assignmentid,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateassignsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await assignsubmit.findByIdAndUpdate(req.query.id, {
      regno: req.query.regno,
      coursecode: req.query.coursecode,
      assignmentid: req.query.assignmentid,
      assignmentid: req.query.assignmentid,
      link: req.query.link,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateassignsubmitcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await assignsubmit.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteassignsubmitbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await assignsubmit.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// apr 25 2024

exports.getaupaynewbyfac = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aupaynewbydep = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aupaynewbyprog = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aupaynewdocs = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aupaynewlinks = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.aupaynewlinksall = async (req, res) => {
  try {
    const lcat1233 = await aupaynew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createaupaynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await aupaynew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      collegecode: req.query.collegecode,
      type: req.query.type,
      amount: req.query.amount,
      paydate: req.query.paydate,
      payref: req.query.payref,
      paytype: req.query.paytype,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaupaynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await aupaynew.findByIdAndUpdate(req.query.id, {
      collegecode: req.query.collegecode,
      type: req.query.type,
      amount: req.query.amount,
      paydate: req.query.paydate,
      payref: req.query.payref,
      paytype: req.query.paytype,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateaupaynewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await aupaynew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteaupaynewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await aupaynew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// may 6 2024

exports.getacalendernewbyfac = async (req, res) => {
  try {
    const lcat1233 = await acalendernew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.acalendernewbydep = async (req, res) => {
  try {
    const lcat1233 = await acalendernew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.acalendernewbyprog = async (req, res) => {
  try {
    const lcat1233 = await acalendernew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.acalendernewdocs = async (req, res) => {
  try {
    const lcat1233 = await acalendernew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.acalendernewlinks = async (req, res) => {
  try {
    const lcat1233 = await acalendernew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createacalendernewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await acalendernew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      isactive: req.query.isactive,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateacalendernewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await acalendernew.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      activity: req.query.activity,
      eventdate: req.query.eventdate,
      isactive: req.query.isactive,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateacalendernewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await acalendernew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteacalendernewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await acalendernew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getdeptasksbyfac = async (req, res) => {
  try {
    const lcat1233 = await deptasks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deptasksbydep = async (req, res) => {
  try {
    const lcat1233 = await deptasks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deptasksbyprog = async (req, res) => {
  try {
    const lcat1233 = await deptasks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deptasksdocs = async (req, res) => {
  try {
    const lcat1233 = await deptasks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deptaskslinks = async (req, res) => {
  try {
    const lcat1233 = await deptasks.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createdeptasksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await deptasks.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      task: req.query.task,
      eventdate: req.query.eventdate,
      isactive: req.query.isactive,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedeptasksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await deptasks.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      task: req.query.task,
      eventdate: req.query.eventdate,
      isactive: req.query.isactive,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatedeptaskscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await deptasks.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletedeptasksbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await deptasks.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// may 26 2024

exports.getcas11byfac = async (req, res) => {
  try {
    const lcat1233 = await cas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas11bydep = async (req, res) => {
  try {
    const lcat1233 = await cas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas11byprog = async (req, res) => {
  try {
    const lcat1233 = await cas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas11docs = async (req, res) => {
  try {
    const lcat1233 = await cas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas11links = async (req, res) => {
  try {
    const lcat1233 = await cas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas11.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      noofclass: req.query.noofclass,
      totalclass: req.query.totalclass,
      percentage: req.query.percentage,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas11.findByIdAndUpdate(req.query.id, {
      noofclass: req.query.noofclass,
      totalclass: req.query.totalclass,
      percentage: req.query.percentage,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas11comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas11.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas11.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas12byfac = async (req, res) => {
  try {
    const lcat1233 = await cas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas12bydep = async (req, res) => {
  try {
    const lcat1233 = await cas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas12byprog = async (req, res) => {
  try {
    const lcat1233 = await cas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas12docs = async (req, res) => {
  try {
    const lcat1233 = await cas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas12links = async (req, res) => {
  try {
    const lcat1233 = await cas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas12.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas12.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas12comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas12.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas12.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas22byfac = async (req, res) => {
  try {
    const lcat1233 = await cas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas22bydep = async (req, res) => {
  try {
    const lcat1233 = await cas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas22byprog = async (req, res) => {
  try {
    const lcat1233 = await cas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas22docs = async (req, res) => {
  try {
    const lcat1233 = await cas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas22links = async (req, res) => {
  try {
    const lcat1233 = await cas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas22.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas22.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas22comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas22.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas22.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas23byfac = async (req, res) => {
  try {
    const lcat1233 = await cas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas23bydep = async (req, res) => {
  try {
    const lcat1233 = await cas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas23byprog = async (req, res) => {
  try {
    const lcat1233 = await cas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas23docs = async (req, res) => {
  try {
    const lcat1233 = await cas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas23links = async (req, res) => {
  try {
    const lcat1233 = await cas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas23.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas23.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas23comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas23.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas23.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas241byfac = async (req, res) => {
  try {
    const lcat1233 = await cas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas241bydep = async (req, res) => {
  try {
    const lcat1233 = await cas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas241byprog = async (req, res) => {
  try {
    const lcat1233 = await cas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas241docs = async (req, res) => {
  try {
    const lcat1233 = await cas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas241links = async (req, res) => {
  try {
    const lcat1233 = await cas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas241.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas241.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas241comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas241.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas241.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas242byfac = async (req, res) => {
  try {
    const lcat1233 = await cas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas242bydep = async (req, res) => {
  try {
    const lcat1233 = await cas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas242byprog = async (req, res) => {
  try {
    const lcat1233 = await cas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas242docs = async (req, res) => {
  try {
    const lcat1233 = await cas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas242links = async (req, res) => {
  try {
    const lcat1233 = await cas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas242.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas242.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas242comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas242.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas242.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas243byfac = async (req, res) => {
  try {
    const lcat1233 = await cas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas243bydep = async (req, res) => {
  try {
    const lcat1233 = await cas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas243byprog = async (req, res) => {
  try {
    const lcat1233 = await cas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas243docs = async (req, res) => {
  try {
    const lcat1233 = await cas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas243links = async (req, res) => {
  try {
    const lcat1233 = await cas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas243.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas243.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas243comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas243.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas243.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas251byfac = async (req, res) => {
  try {
    const lcat1233 = await cas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas251bydep = async (req, res) => {
  try {
    const lcat1233 = await cas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas251byprog = async (req, res) => {
  try {
    const lcat1233 = await cas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas251docs = async (req, res) => {
  try {
    const lcat1233 = await cas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas251links = async (req, res) => {
  try {
    const lcat1233 = await cas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas251.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      patentsno: req.query.patentsno,
      patents: req.query.patents,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas251.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      patentsno: req.query.patentsno,
      patents: req.query.patents,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas251comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas251.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas251.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas252byfac = async (req, res) => {
  try {
    const lcat1233 = await cas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas252bydep = async (req, res) => {
  try {
    const lcat1233 = await cas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas252byprog = async (req, res) => {
  try {
    const lcat1233 = await cas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas252docs = async (req, res) => {
  try {
    const lcat1233 = await cas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas252links = async (req, res) => {
  try {
    const lcat1233 = await cas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas252.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas252.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas252comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas252.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas252.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas253byfac = async (req, res) => {
  try {
    const lcat1233 = await cas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas253bydep = async (req, res) => {
  try {
    const lcat1233 = await cas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas253byprog = async (req, res) => {
  try {
    const lcat1233 = await cas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas253docs = async (req, res) => {
  try {
    const lcat1233 = await cas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas253links = async (req, res) => {
  try {
    const lcat1233 = await cas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas253.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      awards: req.query.awards,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas253.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      awards: req.query.awards,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas253comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas253.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas253.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getcas26byfac = async (req, res) => {
  try {
    const lcat1233 = await cas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas26bydep = async (req, res) => {
  try {
    const lcat1233 = await cas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas26byprog = async (req, res) => {
  try {
    const lcat1233 = await cas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas26docs = async (req, res) => {
  try {
    const lcat1233 = await cas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.cas26links = async (req, res) => {
  try {
    const lcat1233 = await cas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createcas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await cas26.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      type: req.query.type,
      level: req.query.level,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await cas26.findByIdAndUpdate(req.query.id, {
      type: req.query.type,
      level: req.query.level,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatecas26comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await cas26.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletecas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await cas26.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 3 2024

exports.getncas11byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas11bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas11byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas11docs = async (req, res) => {
  try {
    const lcat1233 = await ncas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas11links = async (req, res) => {
  try {
    const lcat1233 = await ncas11.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas11.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      semester: req.query.semester,
      noofclass: req.query.noofclass,
      totalclass: req.query.totalclass,
      percentage: req.query.percentage,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas11.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      semester: req.query.semester,
      noofclass: req.query.noofclass,
      totalclass: req.query.totalclass,
      percentage: req.query.percentage,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas11comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas11.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas11byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas11.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas12byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas12bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas12byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas12docs = async (req, res) => {
  try {
    const lcat1233 = await ncas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas12links = async (req, res) => {
  try {
    const lcat1233 = await ncas12.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas12.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas12.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      grade: req.query.grade,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas12comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas12.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas12byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas12.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas22byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas22bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas22byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas22docs = async (req, res) => {
  try {
    const lcat1233 = await ncas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas22links = async (req, res) => {
  try {
    const lcat1233 = await ncas22.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas22.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas22.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas22comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas22.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas22byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas22.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas23byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas23bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas23byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas23docs = async (req, res) => {
  try {
    const lcat1233 = await ncas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas23links = async (req, res) => {
  try {
    const lcat1233 = await ncas23.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas23.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas23.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas23comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas23.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas23byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas23.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas241byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas241bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas241byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas241docs = async (req, res) => {
  try {
    const lcat1233 = await ncas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas241links = async (req, res) => {
  try {
    const lcat1233 = await ncas241.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas241.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas241.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas241comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas241.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas241byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas241.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas242byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas242bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas242byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas242docs = async (req, res) => {
  try {
    const lcat1233 = await ncas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas242links = async (req, res) => {
  try {
    const lcat1233 = await ncas242.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas242.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas242.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas242comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas242.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas242byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas242.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas243byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas243bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas243byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas243docs = async (req, res) => {
  try {
    const lcat1233 = await ncas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas243links = async (req, res) => {
  try {
    const lcat1233 = await ncas243.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas243.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas243.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas243comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas243.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas243byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas243.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas251byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas251bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas251byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas251docs = async (req, res) => {
  try {
    const lcat1233 = await ncas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas251links = async (req, res) => {
  try {
    const lcat1233 = await ncas251.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas251.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      patentsno: req.query.patentsno,
      patents: req.query.patents,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas251.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      patentsno: req.query.patentsno,
      patents: req.query.patents,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas251comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas251.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas251byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas251.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas252byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas252bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas252byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas252docs = async (req, res) => {
  try {
    const lcat1233 = await ncas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas252links = async (req, res) => {
  try {
    const lcat1233 = await ncas252.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas252.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas252.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas252comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas252.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas252byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas252.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas253byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas253bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas253byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas253docs = async (req, res) => {
  try {
    const lcat1233 = await ncas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas253links = async (req, res) => {
  try {
    const lcat1233 = await ncas253.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas253.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      awards: req.query.awards,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas253.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      awards: req.query.awards,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas253comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas253.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas253byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas253.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas26byfac = async (req, res) => {
  try {
    const lcat1233 = await ncas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas26bydep = async (req, res) => {
  try {
    const lcat1233 = await ncas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas26byprog = async (req, res) => {
  try {
    const lcat1233 = await ncas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas26docs = async (req, res) => {
  try {
    const lcat1233 = await ncas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.ncas26links = async (req, res) => {
  try {
    const lcat1233 = await ncas26.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createncas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await ncas26.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      type: req.query.type,
      level: req.query.level,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await ncas26.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      type: req.query.type,
      level: req.query.level,
      score: req.query.score,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatencas26comments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await ncas26.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletencas26byfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await ncas26.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// jun 3 1

exports.getncas11count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas11.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas11second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas11.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $avg: "$percentage" },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas11countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas11.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas11secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas11.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $avg: "$percentage" },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// jun 4 2024

exports.getncas12count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas12.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas12second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas12.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas12countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas12.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas12secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas12.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// Jun 6 2024

exports.getncas22count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas22.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas22second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas22.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas22countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas22.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas22secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas22.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas23count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas23.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas23second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas23.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas23countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas23.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas23secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas23.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas241count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas241.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas241second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas241.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas241countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas241.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas241secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas241.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas242count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas242.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas242second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas242.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas242countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas242.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas242secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas242.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas243count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas243.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas243second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas243.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas243countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas243.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas243secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas243.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas251count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas251.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas251second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas251.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas251countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas251.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas251secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas251.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas252count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas252.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas252second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas252.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas252countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas252.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas252secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas252.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas253count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas253.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas253second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas253.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas253countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas253.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas253secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas253.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas26count = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas26.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas26second = async (req, res) => {
  try {
    //const user1=req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas26.aggregate([
      {
        $match: { colid: colid1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas26countbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas26.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$year",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getncas26secondbyfac = async (req, res) => {
  try {
    const user1 = req.query.user;
    const colid1 = parseInt(req.query.colid);
    const lcat1233 = await ncas26.aggregate([
      {
        $match: { colid: colid1, user: user1 },
      },
      {
        $group: {
          _id: "$type",
          total_attendance: { $sum: 1 },
        },
      },
    ]);
    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// jul 2 2024

exports.getadmapplnewbyfac = async (req, res) => {
  try {
    const lcat1233 = await admapplnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
          program: req.query.program,
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admapplnewbydep = async (req, res) => {
  try {
    const lcat1233 = await admapplnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admapplnewbyprog = async (req, res) => {
  try {
    const lcat1233 = await admapplnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admapplnewdocs = async (req, res) => {
  try {
    const lcat1233 = await admapplnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.admapplnewlinks = async (req, res) => {
  try {
    const lcat1233 = await admapplnew.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createadmapplnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await admapplnew.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      ispwd: req.query.ispwd,
      pwdcategory: req.query.pwdcategory,
      address: req.query.address,
      city: req.query.city,
      district: req.query.district,
      pincode: req.query.pincode,
      email: req.query.email,
      phone: req.query.phone,
      tenth: req.query.tenth,
      tenthboard: req.query.tenthboard,
      tenthstream: req.query.tenthstream,
      twelveth: req.query.twelveth,
      twelveboard: req.query.twelveboard,
      twelvestream: req.query.twelvestream,
      extracur: req.query.extracur,
      sports: req.query.sports,
      hostel: req.query.hostel,
      father: req.query.father,
      fphone: req.query.fphone,
      femail: req.query.femail,
      mother: req.query.mother,
      mcontact: req.query.mcontact,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmapplnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await admapplnew.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      gender: req.query.gender,
      category: req.query.category,
      ispwd: req.query.ispwd,
      pwdcategory: req.query.pwdcategory,
      address: req.query.address,
      city: req.query.city,
      district: req.query.district,
      pincode: req.query.pincode,
      email: req.query.email,
      phone: req.query.phone,
      tenth: req.query.tenth,
      tenthboard: req.query.tenthboard,
      tenthstream: req.query.tenthstream,
      twelveth: req.query.twelveth,
      twelveboard: req.query.twelveboard,
      twelvestream: req.query.twelvestream,
      extracur: req.query.extracur,
      sports: req.query.sports,
      hostel: req.query.hostel,
      father: req.query.father,
      fphone: req.query.fphone,
      femail: req.query.femail,
      mother: req.query.mother,
      mcontact: req.query.mcontact,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updateadmapplnewcomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await admapplnew.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deleteadmapplnewbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await admapplnew.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

// jul 4 2024

exports.getmadmapplysbyfac = async (req, res) => {
  try {
    const lcat1233 = await madmapplys.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplysbydep = async (req, res) => {
  try {
    const lcat1233 = await madmapplys.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplysbyprog = async (req, res) => {
  try {
    const lcat1233 = await madmapplys.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplysdocs = async (req, res) => {
  try {
    const lcat1233 = await madmapplys.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplyslinks = async (req, res) => {
  try {
    const lcat1233 = await madmapplys.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmadmapplysbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await madmapplys.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      email: req.query.email,
      phone: req.query.phone,
      gender: req.query.gender,
      category: req.query.category,
      tenth: req.query.tenth,
      twelveth: req.query.twelveth,
      physics: req.query.physics,
      chemistry: req.query.chemistry,
      maths: req.query.maths,
      language: req.query.language,
      board: req.query.board,
      ispwd: req.query.ispwd,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemadmapplysbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await madmapplys.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      email: req.query.email,
      phone: req.query.phone,
      gender: req.query.gender,
      category: req.query.category,
      tenth: req.query.tenth,
      twelveth: req.query.twelveth,
      physics: req.query.physics,
      chemistry: req.query.chemistry,
      maths: req.query.maths,
      language: req.query.language,
      board: req.query.board,
      ispwd: req.query.ispwd,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemadmapplyscomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await madmapplys.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemadmapplysbyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await madmapplys.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.getmadmapplyabyfac = async (req, res) => {
  try {
    const lcat1233 = await madmapplya.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          user: req.query.user,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplyabydep = async (req, res) => {
  try {
    const lcat1233 = await madmapplya.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          department: req.query.department,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplyabyprog = async (req, res) => {
  try {
    const lcat1233 = await madmapplya.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          programcode: req.query.programcode,
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplyadocs = async (req, res) => {
  try {
    const lcat1233 = await madmapplya.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.madmapplyalinks = async (req, res) => {
  try {
    const lcat1233 = await madmapplya.aggregate([
      { $addFields: { userId: { $toString: "$_id" } } },
      {
        $lookup: {
          from: "supportingdocs",
          localField: "userId",
          foreignField: "field1",
          as: "seminars",
        },
      },
      {
        $lookup: {
          from: "accrcomments",
          localField: "userId",
          foreignField: "field1",
          as: "allcomments",
        },
      },
      {
        $match: {
          colid: parseInt(req.query.colid),
          status1: { $ne: req.query.status1 },
        },
      },
    ]);

    //console.log(lcat1233);
    return res.status(200).json({
      status: "Success",
      data: {
        classes: lcat1233,
      },
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.createmadmapplyabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const pub1 = await madmapplya.create({
      name: req.query.name,
      colid: req.query.colid,
      user: req.query.user,
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      email: req.query.email,
      phone: req.query.phone,
      gender: req.query.gender,
      category: req.query.category,
      tenth: req.query.tenth,
      twelveth: req.query.twelveth,
      major: req.query.major,
      minor1: req.query.minor1,
      minor2: req.query.minor2,
      language: req.query.language,
      board: req.query.board,
      ispwd: req.query.ispwd,
      status1: "Submitted",
      comments: "NA",
    });

    //res.status(200).send('Hello world for all the tours through db new router');
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemadmapplyabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const lcat1 = await madmapplya.findByIdAndUpdate(req.query.id, {
      year: req.query.year,
      program: req.query.program,
      programcode: req.query.programcode,
      student: req.query.student,
      email: req.query.email,
      phone: req.query.phone,
      gender: req.query.gender,
      category: req.query.category,
      tenth: req.query.tenth,
      twelveth: req.query.twelveth,
      major: req.query.major,
      minor1: req.query.minor1,
      minor2: req.query.minor2,
      language: req.query.language,
      board: req.query.board,
      ispwd: req.query.ispwd,
      status1: "Submitted",
      comments: "NA",
    });
    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.updatemadmapplyacomments = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }
    const lcat1 = await madmapplya.findByIdAndUpdate(req.query.id, {
      status1: req.query.status1,
      comments: req.query.comments,
    });

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};

exports.deletemadmapplyabyfac = async (req, res) => {
  try {
    const token = req.query.token;
    //console.log(token);
    let jwtuser = "";
    let jwtcolid = "";
    try {
      const verified = jwt.verify(
        token,
        process.env.JWT_SECRET,
        (err123, verified) => {
          if (err123) {
            return res.status(401).json({
              status: "Unauthorized",
              error: err123,
            });
          }
          jwtuser = verified.user;
          jwtcolid = verified.colid;
          return verified;
        }
      );
    } catch (err1234) {
      //console.log(err1234);
    }

    const user1 = req.query.user;
    await madmapplya.findByIdAndDelete(req.query.id);

    return res.status(200).json({
      status: "Success",
    });
  } catch (err) {
    // res.status(400).json({
    // status: "Failed",
    //  message: err,
    //  });
  }
};
